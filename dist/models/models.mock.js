"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.privateKey = "de34f27c7a542935e64b8adc6c01511bb669e5c97e61f5fd582b1fa990fded87";
exports.publicKey = "041e4b07f1d4e6f3d088ad0b9fcef8e1ded5ac337a35db332ab8d8b8d42553c35cd3032d437f3a33dc9fb0ce6817ec51a2fedbce74c646b797ca0adafe5c5be24f";
// Payment
var timestamp = 1560802892221;
var term = "new hello in { hello!(\"world\") }";
var phloLimit = 1000000;
var phloPrice = 1;
var validAfterBlockNumber = -1;
exports.payment = {
    timestamp: timestamp,
    term: term,
    phloLimit: phloLimit,
    phloPrice: phloPrice,
    validAfterBlockNumber: validAfterBlockNumber
};
exports.deployDataToSign = new Uint8Array([
    18,
    32,
    110,
    101,
    119,
    32,
    104,
    101,
    108,
    108,
    111,
    32,
    105,
    110,
    32,
    123,
    32,
    104,
    101,
    108,
    108,
    111,
    33,
    40,
    34,
    119,
    111,
    114,
    108,
    100,
    34,
    41,
    32,
    125,
    24,
    189,
    179,
    232,
    184,
    182,
    45,
    56,
    1,
    64,
    192,
    132,
    61,
    80,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    1
]);
exports.hash = new Uint8Array([
    127,
    16,
    243,
    178,
    147,
    115,
    61,
    251,
    232,
    87,
    49,
    223,
    193,
    101,
    246,
    48,
    238,
    211,
    128,
    115,
    109,
    163,
    142,
    110,
    103,
    145,
    112,
    46,
    245,
    15,
    93,
    108
]);
exports.deployDataSecp256k1 = __assign({}, exports.payment, { deployer: Buffer.from([
        4,
        30,
        75,
        7,
        241,
        212,
        230,
        243,
        208,
        136,
        173,
        11,
        159,
        206,
        248,
        225,
        222,
        213,
        172,
        51,
        122,
        53,
        219,
        51,
        42,
        184,
        216,
        184,
        212,
        37,
        83,
        195,
        92,
        211,
        3,
        45,
        67,
        127,
        58,
        51,
        220,
        159,
        176,
        206,
        104,
        23,
        236,
        81,
        162,
        254,
        219,
        206,
        116,
        198,
        70,
        183,
        151,
        202,
        10,
        218,
        254,
        92,
        91,
        226,
        79
    ]), sig: new Uint8Array([
        48,
        68,
        2,
        32,
        99,
        155,
        73,
        67,
        178,
        22,
        191,
        71,
        171,
        254,
        92,
        239,
        48,
        148,
        23,
        13,
        115,
        58,
        132,
        124,
        178,
        131,
        149,
        159,
        205,
        190,
        254,
        255,
        103,
        84,
        129,
        193,
        2,
        32,
        117,
        211,
        244,
        50,
        25,
        45,
        52,
        60,
        63,
        206,
        159,
        30,
        237,
        192,
        205,
        136,
        21,
        175,
        46,
        52,
        205,
        60,
        95,
        94,
        80,
        193,
        21,
        171,
        22,
        183,
        181,
        189
    ]), sigAlgorithm: "secp256k1" });
exports.privateName = "914f485be3a24ac32d8b1e0d81fa76a929632ce1a7d628573e44eab89fb5a575";
