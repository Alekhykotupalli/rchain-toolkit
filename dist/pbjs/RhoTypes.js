/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    $root.Par = (function() {
    
        /**
         * Properties of a Par.
         * @exports IPar
         * @interface IPar
         * @property {Array.<ISend>|null} [sends] Par sends
         * @property {Array.<IReceive>|null} [receives] Par receives
         * @property {Array.<INew>|null} [news] Par news
         * @property {Array.<IExpr>|null} [exprs] Par exprs
         * @property {Array.<IMatch>|null} [matches] Par matches
         * @property {Array.<IGUnforgeable>|null} [unforgeables] Par unforgeables
         * @property {Array.<IBundle>|null} [bundles] Par bundles
         * @property {Array.<IConnective>|null} [connectives] Par connectives
         * @property {Uint8Array|null} [locallyFree] Par locallyFree
         * @property {boolean|null} [connectiveUsed] Par connectiveUsed
         */
    
        /**
         * Constructs a new Par.
         * @exports Par
         * @classdesc Rholang process
         * 
         * For example, `@0!(1) | @2!(3) | for(x <- @0) { Nil }` has two sends
         * and one receive.
         * 
         * The Nil process is a `Par` with no sends, receives, etc.
         * @implements IPar
         * @constructor
         * @param {IPar=} [properties] Properties to set
         */
        function Par(properties) {
            this.sends = [];
            this.receives = [];
            this.news = [];
            this.exprs = [];
            this.matches = [];
            this.unforgeables = [];
            this.bundles = [];
            this.connectives = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Par sends.
         * @member {Array.<ISend>} sends
         * @memberof Par
         * @instance
         */
        Par.prototype.sends = $util.emptyArray;
    
        /**
         * Par receives.
         * @member {Array.<IReceive>} receives
         * @memberof Par
         * @instance
         */
        Par.prototype.receives = $util.emptyArray;
    
        /**
         * Par news.
         * @member {Array.<INew>} news
         * @memberof Par
         * @instance
         */
        Par.prototype.news = $util.emptyArray;
    
        /**
         * Par exprs.
         * @member {Array.<IExpr>} exprs
         * @memberof Par
         * @instance
         */
        Par.prototype.exprs = $util.emptyArray;
    
        /**
         * Par matches.
         * @member {Array.<IMatch>} matches
         * @memberof Par
         * @instance
         */
        Par.prototype.matches = $util.emptyArray;
    
        /**
         * Par unforgeables.
         * @member {Array.<IGUnforgeable>} unforgeables
         * @memberof Par
         * @instance
         */
        Par.prototype.unforgeables = $util.emptyArray;
    
        /**
         * Par bundles.
         * @member {Array.<IBundle>} bundles
         * @memberof Par
         * @instance
         */
        Par.prototype.bundles = $util.emptyArray;
    
        /**
         * Par connectives.
         * @member {Array.<IConnective>} connectives
         * @memberof Par
         * @instance
         */
        Par.prototype.connectives = $util.emptyArray;
    
        /**
         * Par locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof Par
         * @instance
         */
        Par.prototype.locallyFree = $util.newBuffer([]);
    
        /**
         * Par connectiveUsed.
         * @member {boolean} connectiveUsed
         * @memberof Par
         * @instance
         */
        Par.prototype.connectiveUsed = false;
    
        /**
         * Creates a new Par instance using the specified properties.
         * @function create
         * @memberof Par
         * @static
         * @param {IPar=} [properties] Properties to set
         * @returns {Par} Par instance
         */
        Par.create = function create(properties) {
            return new Par(properties);
        };
    
        /**
         * Encodes the specified Par message. Does not implicitly {@link Par.verify|verify} messages.
         * @function encode
         * @memberof Par
         * @static
         * @param {IPar} message Par message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Par.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sends != null && message.sends.length)
                for (var i = 0; i < message.sends.length; ++i)
                    $root.Send.encode(message.sends[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.receives != null && message.receives.length)
                for (var i = 0; i < message.receives.length; ++i)
                    $root.Receive.encode(message.receives[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.news != null && message.news.length)
                for (var i = 0; i < message.news.length; ++i)
                    $root.New.encode(message.news[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.exprs != null && message.exprs.length)
                for (var i = 0; i < message.exprs.length; ++i)
                    $root.Expr.encode(message.exprs[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.matches != null && message.matches.length)
                for (var i = 0; i < message.matches.length; ++i)
                    $root.Match.encode(message.matches[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.unforgeables != null && message.unforgeables.length)
                for (var i = 0; i < message.unforgeables.length; ++i)
                    $root.GUnforgeable.encode(message.unforgeables[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.connectives != null && message.connectives.length)
                for (var i = 0; i < message.connectives.length; ++i)
                    $root.Connective.encode(message.connectives[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.locallyFree);
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.connectiveUsed);
            if (message.bundles != null && message.bundles.length)
                for (var i = 0; i < message.bundles.length; ++i)
                    $root.Bundle.encode(message.bundles[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified Par message, length delimited. Does not implicitly {@link Par.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Par
         * @static
         * @param {IPar} message Par message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Par.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a Par message from the specified reader or buffer.
         * @function decode
         * @memberof Par
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Par} Par
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Par.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Par();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.sends && message.sends.length))
                        message.sends = [];
                    message.sends.push($root.Send.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.receives && message.receives.length))
                        message.receives = [];
                    message.receives.push($root.Receive.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.news && message.news.length))
                        message.news = [];
                    message.news.push($root.New.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.exprs && message.exprs.length))
                        message.exprs = [];
                    message.exprs.push($root.Expr.decode(reader, reader.uint32()));
                    break;
                case 6:
                    if (!(message.matches && message.matches.length))
                        message.matches = [];
                    message.matches.push($root.Match.decode(reader, reader.uint32()));
                    break;
                case 7:
                    if (!(message.unforgeables && message.unforgeables.length))
                        message.unforgeables = [];
                    message.unforgeables.push($root.GUnforgeable.decode(reader, reader.uint32()));
                    break;
                case 11:
                    if (!(message.bundles && message.bundles.length))
                        message.bundles = [];
                    message.bundles.push($root.Bundle.decode(reader, reader.uint32()));
                    break;
                case 8:
                    if (!(message.connectives && message.connectives.length))
                        message.connectives = [];
                    message.connectives.push($root.Connective.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.locallyFree = reader.bytes();
                    break;
                case 10:
                    message.connectiveUsed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a Par message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Par
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Par} Par
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Par.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a Par message.
         * @function verify
         * @memberof Par
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Par.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sends != null && message.hasOwnProperty("sends")) {
                if (!Array.isArray(message.sends))
                    return "sends: array expected";
                for (var i = 0; i < message.sends.length; ++i) {
                    var error = $root.Send.verify(message.sends[i]);
                    if (error)
                        return "sends." + error;
                }
            }
            if (message.receives != null && message.hasOwnProperty("receives")) {
                if (!Array.isArray(message.receives))
                    return "receives: array expected";
                for (var i = 0; i < message.receives.length; ++i) {
                    var error = $root.Receive.verify(message.receives[i]);
                    if (error)
                        return "receives." + error;
                }
            }
            if (message.news != null && message.hasOwnProperty("news")) {
                if (!Array.isArray(message.news))
                    return "news: array expected";
                for (var i = 0; i < message.news.length; ++i) {
                    var error = $root.New.verify(message.news[i]);
                    if (error)
                        return "news." + error;
                }
            }
            if (message.exprs != null && message.hasOwnProperty("exprs")) {
                if (!Array.isArray(message.exprs))
                    return "exprs: array expected";
                for (var i = 0; i < message.exprs.length; ++i) {
                    var error = $root.Expr.verify(message.exprs[i]);
                    if (error)
                        return "exprs." + error;
                }
            }
            if (message.matches != null && message.hasOwnProperty("matches")) {
                if (!Array.isArray(message.matches))
                    return "matches: array expected";
                for (var i = 0; i < message.matches.length; ++i) {
                    var error = $root.Match.verify(message.matches[i]);
                    if (error)
                        return "matches." + error;
                }
            }
            if (message.unforgeables != null && message.hasOwnProperty("unforgeables")) {
                if (!Array.isArray(message.unforgeables))
                    return "unforgeables: array expected";
                for (var i = 0; i < message.unforgeables.length; ++i) {
                    var error = $root.GUnforgeable.verify(message.unforgeables[i]);
                    if (error)
                        return "unforgeables." + error;
                }
            }
            if (message.bundles != null && message.hasOwnProperty("bundles")) {
                if (!Array.isArray(message.bundles))
                    return "bundles: array expected";
                for (var i = 0; i < message.bundles.length; ++i) {
                    var error = $root.Bundle.verify(message.bundles[i]);
                    if (error)
                        return "bundles." + error;
                }
            }
            if (message.connectives != null && message.hasOwnProperty("connectives")) {
                if (!Array.isArray(message.connectives))
                    return "connectives: array expected";
                for (var i = 0; i < message.connectives.length; ++i) {
                    var error = $root.Connective.verify(message.connectives[i]);
                    if (error)
                        return "connectives." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                if (typeof message.connectiveUsed !== "boolean")
                    return "connectiveUsed: boolean expected";
            return null;
        };
    
        /**
         * Creates a Par message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Par
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Par} Par
         */
        Par.fromObject = function fromObject(object) {
            if (object instanceof $root.Par)
                return object;
            var message = new $root.Par();
            if (object.sends) {
                if (!Array.isArray(object.sends))
                    throw TypeError(".Par.sends: array expected");
                message.sends = [];
                for (var i = 0; i < object.sends.length; ++i) {
                    if (typeof object.sends[i] !== "object")
                        throw TypeError(".Par.sends: object expected");
                    message.sends[i] = $root.Send.fromObject(object.sends[i]);
                }
            }
            if (object.receives) {
                if (!Array.isArray(object.receives))
                    throw TypeError(".Par.receives: array expected");
                message.receives = [];
                for (var i = 0; i < object.receives.length; ++i) {
                    if (typeof object.receives[i] !== "object")
                        throw TypeError(".Par.receives: object expected");
                    message.receives[i] = $root.Receive.fromObject(object.receives[i]);
                }
            }
            if (object.news) {
                if (!Array.isArray(object.news))
                    throw TypeError(".Par.news: array expected");
                message.news = [];
                for (var i = 0; i < object.news.length; ++i) {
                    if (typeof object.news[i] !== "object")
                        throw TypeError(".Par.news: object expected");
                    message.news[i] = $root.New.fromObject(object.news[i]);
                }
            }
            if (object.exprs) {
                if (!Array.isArray(object.exprs))
                    throw TypeError(".Par.exprs: array expected");
                message.exprs = [];
                for (var i = 0; i < object.exprs.length; ++i) {
                    if (typeof object.exprs[i] !== "object")
                        throw TypeError(".Par.exprs: object expected");
                    message.exprs[i] = $root.Expr.fromObject(object.exprs[i]);
                }
            }
            if (object.matches) {
                if (!Array.isArray(object.matches))
                    throw TypeError(".Par.matches: array expected");
                message.matches = [];
                for (var i = 0; i < object.matches.length; ++i) {
                    if (typeof object.matches[i] !== "object")
                        throw TypeError(".Par.matches: object expected");
                    message.matches[i] = $root.Match.fromObject(object.matches[i]);
                }
            }
            if (object.unforgeables) {
                if (!Array.isArray(object.unforgeables))
                    throw TypeError(".Par.unforgeables: array expected");
                message.unforgeables = [];
                for (var i = 0; i < object.unforgeables.length; ++i) {
                    if (typeof object.unforgeables[i] !== "object")
                        throw TypeError(".Par.unforgeables: object expected");
                    message.unforgeables[i] = $root.GUnforgeable.fromObject(object.unforgeables[i]);
                }
            }
            if (object.bundles) {
                if (!Array.isArray(object.bundles))
                    throw TypeError(".Par.bundles: array expected");
                message.bundles = [];
                for (var i = 0; i < object.bundles.length; ++i) {
                    if (typeof object.bundles[i] !== "object")
                        throw TypeError(".Par.bundles: object expected");
                    message.bundles[i] = $root.Bundle.fromObject(object.bundles[i]);
                }
            }
            if (object.connectives) {
                if (!Array.isArray(object.connectives))
                    throw TypeError(".Par.connectives: array expected");
                message.connectives = [];
                for (var i = 0; i < object.connectives.length; ++i) {
                    if (typeof object.connectives[i] !== "object")
                        throw TypeError(".Par.connectives: object expected");
                    message.connectives[i] = $root.Connective.fromObject(object.connectives[i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connectiveUsed != null)
                message.connectiveUsed = Boolean(object.connectiveUsed);
            return message;
        };
    
        /**
         * Creates a plain object from a Par message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Par
         * @static
         * @param {Par} message Par
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Par.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.sends = [];
                object.receives = [];
                object.news = [];
                object.exprs = [];
                object.matches = [];
                object.unforgeables = [];
                object.connectives = [];
                object.bundles = [];
            }
            if (options.defaults) {
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connectiveUsed = false;
            }
            if (message.sends && message.sends.length) {
                object.sends = [];
                for (var j = 0; j < message.sends.length; ++j)
                    object.sends[j] = $root.Send.toObject(message.sends[j], options);
            }
            if (message.receives && message.receives.length) {
                object.receives = [];
                for (var j = 0; j < message.receives.length; ++j)
                    object.receives[j] = $root.Receive.toObject(message.receives[j], options);
            }
            if (message.news && message.news.length) {
                object.news = [];
                for (var j = 0; j < message.news.length; ++j)
                    object.news[j] = $root.New.toObject(message.news[j], options);
            }
            if (message.exprs && message.exprs.length) {
                object.exprs = [];
                for (var j = 0; j < message.exprs.length; ++j)
                    object.exprs[j] = $root.Expr.toObject(message.exprs[j], options);
            }
            if (message.matches && message.matches.length) {
                object.matches = [];
                for (var j = 0; j < message.matches.length; ++j)
                    object.matches[j] = $root.Match.toObject(message.matches[j], options);
            }
            if (message.unforgeables && message.unforgeables.length) {
                object.unforgeables = [];
                for (var j = 0; j < message.unforgeables.length; ++j)
                    object.unforgeables[j] = $root.GUnforgeable.toObject(message.unforgeables[j], options);
            }
            if (message.connectives && message.connectives.length) {
                object.connectives = [];
                for (var j = 0; j < message.connectives.length; ++j)
                    object.connectives[j] = $root.Connective.toObject(message.connectives[j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                object.connectiveUsed = message.connectiveUsed;
            if (message.bundles && message.bundles.length) {
                object.bundles = [];
                for (var j = 0; j < message.bundles.length; ++j)
                    object.bundles[j] = $root.Bundle.toObject(message.bundles[j], options);
            }
            return object;
        };
    
        /**
         * Converts this Par to JSON.
         * @function toJSON
         * @memberof Par
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Par.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return Par;
    })();
    
    $root.TaggedContinuation = (function() {
    
        /**
         * Properties of a TaggedContinuation.
         * @exports ITaggedContinuation
         * @interface ITaggedContinuation
         * @property {IParWithRandom|null} [parBody] TaggedContinuation parBody
         * @property {number|Long|null} [scalaBodyRef] TaggedContinuation scalaBodyRef
         */
    
        /**
         * Constructs a new TaggedContinuation.
         * @exports TaggedContinuation
         * @classdesc Either rholang code or code built in to the interpreter.
         * @implements ITaggedContinuation
         * @constructor
         * @param {ITaggedContinuation=} [properties] Properties to set
         */
        function TaggedContinuation(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * TaggedContinuation parBody.
         * @member {IParWithRandom|null|undefined} parBody
         * @memberof TaggedContinuation
         * @instance
         */
        TaggedContinuation.prototype.parBody = null;
    
        /**
         * TaggedContinuation scalaBodyRef.
         * @member {number|Long} scalaBodyRef
         * @memberof TaggedContinuation
         * @instance
         */
        TaggedContinuation.prototype.scalaBodyRef = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;
    
        /**
         * TaggedContinuation taggedCont.
         * @member {"parBody"|"scalaBodyRef"|undefined} taggedCont
         * @memberof TaggedContinuation
         * @instance
         */
        Object.defineProperty(TaggedContinuation.prototype, "taggedCont", {
            get: $util.oneOfGetter($oneOfFields = ["parBody", "scalaBodyRef"]),
            set: $util.oneOfSetter($oneOfFields)
        });
    
        /**
         * Creates a new TaggedContinuation instance using the specified properties.
         * @function create
         * @memberof TaggedContinuation
         * @static
         * @param {ITaggedContinuation=} [properties] Properties to set
         * @returns {TaggedContinuation} TaggedContinuation instance
         */
        TaggedContinuation.create = function create(properties) {
            return new TaggedContinuation(properties);
        };
    
        /**
         * Encodes the specified TaggedContinuation message. Does not implicitly {@link TaggedContinuation.verify|verify} messages.
         * @function encode
         * @memberof TaggedContinuation
         * @static
         * @param {ITaggedContinuation} message TaggedContinuation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaggedContinuation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.parBody != null && message.hasOwnProperty("parBody"))
                $root.ParWithRandom.encode(message.parBody, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.scalaBodyRef != null && message.hasOwnProperty("scalaBodyRef"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.scalaBodyRef);
            return writer;
        };
    
        /**
         * Encodes the specified TaggedContinuation message, length delimited. Does not implicitly {@link TaggedContinuation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof TaggedContinuation
         * @static
         * @param {ITaggedContinuation} message TaggedContinuation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaggedContinuation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a TaggedContinuation message from the specified reader or buffer.
         * @function decode
         * @memberof TaggedContinuation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {TaggedContinuation} TaggedContinuation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaggedContinuation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TaggedContinuation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.parBody = $root.ParWithRandom.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.scalaBodyRef = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a TaggedContinuation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof TaggedContinuation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {TaggedContinuation} TaggedContinuation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaggedContinuation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a TaggedContinuation message.
         * @function verify
         * @memberof TaggedContinuation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TaggedContinuation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.parBody != null && message.hasOwnProperty("parBody")) {
                properties.taggedCont = 1;
                {
                    var error = $root.ParWithRandom.verify(message.parBody);
                    if (error)
                        return "parBody." + error;
                }
            }
            if (message.scalaBodyRef != null && message.hasOwnProperty("scalaBodyRef")) {
                if (properties.taggedCont === 1)
                    return "taggedCont: multiple values";
                properties.taggedCont = 1;
                if (!$util.isInteger(message.scalaBodyRef) && !(message.scalaBodyRef && $util.isInteger(message.scalaBodyRef.low) && $util.isInteger(message.scalaBodyRef.high)))
                    return "scalaBodyRef: integer|Long expected";
            }
            return null;
        };
    
        /**
         * Creates a TaggedContinuation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof TaggedContinuation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {TaggedContinuation} TaggedContinuation
         */
        TaggedContinuation.fromObject = function fromObject(object) {
            if (object instanceof $root.TaggedContinuation)
                return object;
            var message = new $root.TaggedContinuation();
            if (object.parBody != null) {
                if (typeof object.parBody !== "object")
                    throw TypeError(".TaggedContinuation.parBody: object expected");
                message.parBody = $root.ParWithRandom.fromObject(object.parBody);
            }
            if (object.scalaBodyRef != null)
                if ($util.Long)
                    (message.scalaBodyRef = $util.Long.fromValue(object.scalaBodyRef)).unsigned = false;
                else if (typeof object.scalaBodyRef === "string")
                    message.scalaBodyRef = parseInt(object.scalaBodyRef, 10);
                else if (typeof object.scalaBodyRef === "number")
                    message.scalaBodyRef = object.scalaBodyRef;
                else if (typeof object.scalaBodyRef === "object")
                    message.scalaBodyRef = new $util.LongBits(object.scalaBodyRef.low >>> 0, object.scalaBodyRef.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a TaggedContinuation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof TaggedContinuation
         * @static
         * @param {TaggedContinuation} message TaggedContinuation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TaggedContinuation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.parBody != null && message.hasOwnProperty("parBody")) {
                object.parBody = $root.ParWithRandom.toObject(message.parBody, options);
                if (options.oneofs)
                    object.taggedCont = "parBody";
            }
            if (message.scalaBodyRef != null && message.hasOwnProperty("scalaBodyRef")) {
                if (typeof message.scalaBodyRef === "number")
                    object.scalaBodyRef = options.longs === String ? String(message.scalaBodyRef) : message.scalaBodyRef;
                else
                    object.scalaBodyRef = options.longs === String ? $util.Long.prototype.toString.call(message.scalaBodyRef) : options.longs === Number ? new $util.LongBits(message.scalaBodyRef.low >>> 0, message.scalaBodyRef.high >>> 0).toNumber() : message.scalaBodyRef;
                if (options.oneofs)
                    object.taggedCont = "scalaBodyRef";
            }
            return object;
        };
    
        /**
         * Converts this TaggedContinuation to JSON.
         * @function toJSON
         * @memberof TaggedContinuation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TaggedContinuation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return TaggedContinuation;
    })();
    
    $root.ParWithRandom = (function() {
    
        /**
         * Properties of a ParWithRandom.
         * @exports IParWithRandom
         * @interface IParWithRandom
         * @property {IPar|null} [body] ParWithRandom body
         * @property {Uint8Array|null} [randomState] ParWithRandom randomState
         */
    
        /**
         * Constructs a new ParWithRandom.
         * @exports ParWithRandom
         * @classdesc Rholang code along with the state of a split random number
         * generator for generating new unforgeable names.
         * @implements IParWithRandom
         * @constructor
         * @param {IParWithRandom=} [properties] Properties to set
         */
        function ParWithRandom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ParWithRandom body.
         * @member {IPar|null|undefined} body
         * @memberof ParWithRandom
         * @instance
         */
        ParWithRandom.prototype.body = null;
    
        /**
         * ParWithRandom randomState.
         * @member {Uint8Array} randomState
         * @memberof ParWithRandom
         * @instance
         */
        ParWithRandom.prototype.randomState = $util.newBuffer([]);
    
        /**
         * Creates a new ParWithRandom instance using the specified properties.
         * @function create
         * @memberof ParWithRandom
         * @static
         * @param {IParWithRandom=} [properties] Properties to set
         * @returns {ParWithRandom} ParWithRandom instance
         */
        ParWithRandom.create = function create(properties) {
            return new ParWithRandom(properties);
        };
    
        /**
         * Encodes the specified ParWithRandom message. Does not implicitly {@link ParWithRandom.verify|verify} messages.
         * @function encode
         * @memberof ParWithRandom
         * @static
         * @param {IParWithRandom} message ParWithRandom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ParWithRandom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.body != null && message.hasOwnProperty("body"))
                $root.Par.encode(message.body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.randomState != null && message.hasOwnProperty("randomState"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.randomState);
            return writer;
        };
    
        /**
         * Encodes the specified ParWithRandom message, length delimited. Does not implicitly {@link ParWithRandom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ParWithRandom
         * @static
         * @param {IParWithRandom} message ParWithRandom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ParWithRandom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ParWithRandom message from the specified reader or buffer.
         * @function decode
         * @memberof ParWithRandom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ParWithRandom} ParWithRandom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ParWithRandom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ParWithRandom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.body = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.randomState = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ParWithRandom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ParWithRandom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ParWithRandom} ParWithRandom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ParWithRandom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ParWithRandom message.
         * @function verify
         * @memberof ParWithRandom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ParWithRandom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.body != null && message.hasOwnProperty("body")) {
                var error = $root.Par.verify(message.body);
                if (error)
                    return "body." + error;
            }
            if (message.randomState != null && message.hasOwnProperty("randomState"))
                if (!(message.randomState && typeof message.randomState.length === "number" || $util.isString(message.randomState)))
                    return "randomState: buffer expected";
            return null;
        };
    
        /**
         * Creates a ParWithRandom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ParWithRandom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ParWithRandom} ParWithRandom
         */
        ParWithRandom.fromObject = function fromObject(object) {
            if (object instanceof $root.ParWithRandom)
                return object;
            var message = new $root.ParWithRandom();
            if (object.body != null) {
                if (typeof object.body !== "object")
                    throw TypeError(".ParWithRandom.body: object expected");
                message.body = $root.Par.fromObject(object.body);
            }
            if (object.randomState != null)
                if (typeof object.randomState === "string")
                    $util.base64.decode(object.randomState, message.randomState = $util.newBuffer($util.base64.length(object.randomState)), 0);
                else if (object.randomState.length)
                    message.randomState = object.randomState;
            return message;
        };
    
        /**
         * Creates a plain object from a ParWithRandom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ParWithRandom
         * @static
         * @param {ParWithRandom} message ParWithRandom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ParWithRandom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.body = null;
                if (options.bytes === String)
                    object.randomState = "";
                else {
                    object.randomState = [];
                    if (options.bytes !== Array)
                        object.randomState = $util.newBuffer(object.randomState);
                }
            }
            if (message.body != null && message.hasOwnProperty("body"))
                object.body = $root.Par.toObject(message.body, options);
            if (message.randomState != null && message.hasOwnProperty("randomState"))
                object.randomState = options.bytes === String ? $util.base64.encode(message.randomState, 0, message.randomState.length) : options.bytes === Array ? Array.prototype.slice.call(message.randomState) : message.randomState;
            return object;
        };
    
        /**
         * Converts this ParWithRandom to JSON.
         * @function toJSON
         * @memberof ParWithRandom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ParWithRandom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ParWithRandom;
    })();
    
    $root.PCost = (function() {
    
        /**
         * Properties of a PCost.
         * @exports IPCost
         * @interface IPCost
         * @property {number|Long|null} [cost] PCost cost
         */
    
        /**
         * Constructs a new PCost.
         * @exports PCost
         * @classdesc Cost of the performed operations.
         * @implements IPCost
         * @constructor
         * @param {IPCost=} [properties] Properties to set
         */
        function PCost(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * PCost cost.
         * @member {number|Long} cost
         * @memberof PCost
         * @instance
         */
        PCost.prototype.cost = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new PCost instance using the specified properties.
         * @function create
         * @memberof PCost
         * @static
         * @param {IPCost=} [properties] Properties to set
         * @returns {PCost} PCost instance
         */
        PCost.create = function create(properties) {
            return new PCost(properties);
        };
    
        /**
         * Encodes the specified PCost message. Does not implicitly {@link PCost.verify|verify} messages.
         * @function encode
         * @memberof PCost
         * @static
         * @param {IPCost} message PCost message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PCost.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cost != null && message.hasOwnProperty("cost"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.cost);
            return writer;
        };
    
        /**
         * Encodes the specified PCost message, length delimited. Does not implicitly {@link PCost.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PCost
         * @static
         * @param {IPCost} message PCost message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PCost.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a PCost message from the specified reader or buffer.
         * @function decode
         * @memberof PCost
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {PCost} PCost
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PCost.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PCost();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cost = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a PCost message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof PCost
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {PCost} PCost
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PCost.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a PCost message.
         * @function verify
         * @memberof PCost
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PCost.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cost != null && message.hasOwnProperty("cost"))
                if (!$util.isInteger(message.cost) && !(message.cost && $util.isInteger(message.cost.low) && $util.isInteger(message.cost.high)))
                    return "cost: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a PCost message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof PCost
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {PCost} PCost
         */
        PCost.fromObject = function fromObject(object) {
            if (object instanceof $root.PCost)
                return object;
            var message = new $root.PCost();
            if (object.cost != null)
                if ($util.Long)
                    (message.cost = $util.Long.fromValue(object.cost)).unsigned = true;
                else if (typeof object.cost === "string")
                    message.cost = parseInt(object.cost, 10);
                else if (typeof object.cost === "number")
                    message.cost = object.cost;
                else if (typeof object.cost === "object")
                    message.cost = new $util.LongBits(object.cost.low >>> 0, object.cost.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a PCost message. Also converts values to other types if specified.
         * @function toObject
         * @memberof PCost
         * @static
         * @param {PCost} message PCost
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PCost.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.cost = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.cost = options.longs === String ? "0" : 0;
            if (message.cost != null && message.hasOwnProperty("cost"))
                if (typeof message.cost === "number")
                    object.cost = options.longs === String ? String(message.cost) : message.cost;
                else
                    object.cost = options.longs === String ? $util.Long.prototype.toString.call(message.cost) : options.longs === Number ? new $util.LongBits(message.cost.low >>> 0, message.cost.high >>> 0).toNumber(true) : message.cost;
            return object;
        };
    
        /**
         * Converts this PCost to JSON.
         * @function toJSON
         * @memberof PCost
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PCost.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return PCost;
    })();
    
    $root.ListParWithRandom = (function() {
    
        /**
         * Properties of a ListParWithRandom.
         * @exports IListParWithRandom
         * @interface IListParWithRandom
         * @property {Array.<IPar>|null} [pars] ListParWithRandom pars
         * @property {Uint8Array|null} [randomState] ListParWithRandom randomState
         */
    
        /**
         * Constructs a new ListParWithRandom.
         * @exports ListParWithRandom
         * @classdesc Represents a ListParWithRandom.
         * @implements IListParWithRandom
         * @constructor
         * @param {IListParWithRandom=} [properties] Properties to set
         */
        function ListParWithRandom(properties) {
            this.pars = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ListParWithRandom pars.
         * @member {Array.<IPar>} pars
         * @memberof ListParWithRandom
         * @instance
         */
        ListParWithRandom.prototype.pars = $util.emptyArray;
    
        /**
         * ListParWithRandom randomState.
         * @member {Uint8Array} randomState
         * @memberof ListParWithRandom
         * @instance
         */
        ListParWithRandom.prototype.randomState = $util.newBuffer([]);
    
        /**
         * Creates a new ListParWithRandom instance using the specified properties.
         * @function create
         * @memberof ListParWithRandom
         * @static
         * @param {IListParWithRandom=} [properties] Properties to set
         * @returns {ListParWithRandom} ListParWithRandom instance
         */
        ListParWithRandom.create = function create(properties) {
            return new ListParWithRandom(properties);
        };
    
        /**
         * Encodes the specified ListParWithRandom message. Does not implicitly {@link ListParWithRandom.verify|verify} messages.
         * @function encode
         * @memberof ListParWithRandom
         * @static
         * @param {IListParWithRandom} message ListParWithRandom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ListParWithRandom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pars != null && message.pars.length)
                for (var i = 0; i < message.pars.length; ++i)
                    $root.Par.encode(message.pars[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.randomState != null && message.hasOwnProperty("randomState"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.randomState);
            return writer;
        };
    
        /**
         * Encodes the specified ListParWithRandom message, length delimited. Does not implicitly {@link ListParWithRandom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ListParWithRandom
         * @static
         * @param {IListParWithRandom} message ListParWithRandom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ListParWithRandom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ListParWithRandom message from the specified reader or buffer.
         * @function decode
         * @memberof ListParWithRandom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ListParWithRandom} ListParWithRandom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ListParWithRandom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListParWithRandom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.pars && message.pars.length))
                        message.pars = [];
                    message.pars.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.randomState = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ListParWithRandom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ListParWithRandom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ListParWithRandom} ListParWithRandom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ListParWithRandom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ListParWithRandom message.
         * @function verify
         * @memberof ListParWithRandom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ListParWithRandom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pars != null && message.hasOwnProperty("pars")) {
                if (!Array.isArray(message.pars))
                    return "pars: array expected";
                for (var i = 0; i < message.pars.length; ++i) {
                    var error = $root.Par.verify(message.pars[i]);
                    if (error)
                        return "pars." + error;
                }
            }
            if (message.randomState != null && message.hasOwnProperty("randomState"))
                if (!(message.randomState && typeof message.randomState.length === "number" || $util.isString(message.randomState)))
                    return "randomState: buffer expected";
            return null;
        };
    
        /**
         * Creates a ListParWithRandom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ListParWithRandom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ListParWithRandom} ListParWithRandom
         */
        ListParWithRandom.fromObject = function fromObject(object) {
            if (object instanceof $root.ListParWithRandom)
                return object;
            var message = new $root.ListParWithRandom();
            if (object.pars) {
                if (!Array.isArray(object.pars))
                    throw TypeError(".ListParWithRandom.pars: array expected");
                message.pars = [];
                for (var i = 0; i < object.pars.length; ++i) {
                    if (typeof object.pars[i] !== "object")
                        throw TypeError(".ListParWithRandom.pars: object expected");
                    message.pars[i] = $root.Par.fromObject(object.pars[i]);
                }
            }
            if (object.randomState != null)
                if (typeof object.randomState === "string")
                    $util.base64.decode(object.randomState, message.randomState = $util.newBuffer($util.base64.length(object.randomState)), 0);
                else if (object.randomState.length)
                    message.randomState = object.randomState;
            return message;
        };
    
        /**
         * Creates a plain object from a ListParWithRandom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ListParWithRandom
         * @static
         * @param {ListParWithRandom} message ListParWithRandom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ListParWithRandom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pars = [];
            if (options.defaults)
                if (options.bytes === String)
                    object.randomState = "";
                else {
                    object.randomState = [];
                    if (options.bytes !== Array)
                        object.randomState = $util.newBuffer(object.randomState);
                }
            if (message.pars && message.pars.length) {
                object.pars = [];
                for (var j = 0; j < message.pars.length; ++j)
                    object.pars[j] = $root.Par.toObject(message.pars[j], options);
            }
            if (message.randomState != null && message.hasOwnProperty("randomState"))
                object.randomState = options.bytes === String ? $util.base64.encode(message.randomState, 0, message.randomState.length) : options.bytes === Array ? Array.prototype.slice.call(message.randomState) : message.randomState;
            return object;
        };
    
        /**
         * Converts this ListParWithRandom to JSON.
         * @function toJSON
         * @memberof ListParWithRandom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ListParWithRandom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ListParWithRandom;
    })();
    
    $root.Var = (function() {
    
        /**
         * Properties of a Var.
         * @exports IVar
         * @interface IVar
         * @property {number|null} [boundVar] Var boundVar
         * @property {number|null} [freeVar] Var freeVar
         * @property {Var.IWildcardMsg|null} [wildcard] Var wildcard
         */
    
        /**
         * Constructs a new Var.
         * @exports Var
         * @classdesc Represents a Var.
         * @implements IVar
         * @constructor
         * @param {IVar=} [properties] Properties to set
         */
        function Var(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Var boundVar.
         * @member {number} boundVar
         * @memberof Var
         * @instance
         */
        Var.prototype.boundVar = 0;
    
        /**
         * Var freeVar.
         * @member {number} freeVar
         * @memberof Var
         * @instance
         */
        Var.prototype.freeVar = 0;
    
        /**
         * Var wildcard.
         * @member {Var.IWildcardMsg|null|undefined} wildcard
         * @memberof Var
         * @instance
         */
        Var.prototype.wildcard = null;
    
        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;
    
        /**
         * Var varInstance.
         * @member {"boundVar"|"freeVar"|"wildcard"|undefined} varInstance
         * @memberof Var
         * @instance
         */
        Object.defineProperty(Var.prototype, "varInstance", {
            get: $util.oneOfGetter($oneOfFields = ["boundVar", "freeVar", "wildcard"]),
            set: $util.oneOfSetter($oneOfFields)
        });
    
        /**
         * Creates a new Var instance using the specified properties.
         * @function create
         * @memberof Var
         * @static
         * @param {IVar=} [properties] Properties to set
         * @returns {Var} Var instance
         */
        Var.create = function create(properties) {
            return new Var(properties);
        };
    
        /**
         * Encodes the specified Var message. Does not implicitly {@link Var.verify|verify} messages.
         * @function encode
         * @memberof Var
         * @static
         * @param {IVar} message Var message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Var.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.boundVar != null && message.hasOwnProperty("boundVar"))
                writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.boundVar);
            if (message.freeVar != null && message.hasOwnProperty("freeVar"))
                writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.freeVar);
            if (message.wildcard != null && message.hasOwnProperty("wildcard"))
                $root.Var.WildcardMsg.encode(message.wildcard, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified Var message, length delimited. Does not implicitly {@link Var.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Var
         * @static
         * @param {IVar} message Var message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Var.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a Var message from the specified reader or buffer.
         * @function decode
         * @memberof Var
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Var} Var
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Var.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Var();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.boundVar = reader.sint32();
                    break;
                case 2:
                    message.freeVar = reader.sint32();
                    break;
                case 3:
                    message.wildcard = $root.Var.WildcardMsg.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a Var message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Var
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Var} Var
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Var.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a Var message.
         * @function verify
         * @memberof Var
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Var.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.boundVar != null && message.hasOwnProperty("boundVar")) {
                properties.varInstance = 1;
                if (!$util.isInteger(message.boundVar))
                    return "boundVar: integer expected";
            }
            if (message.freeVar != null && message.hasOwnProperty("freeVar")) {
                if (properties.varInstance === 1)
                    return "varInstance: multiple values";
                properties.varInstance = 1;
                if (!$util.isInteger(message.freeVar))
                    return "freeVar: integer expected";
            }
            if (message.wildcard != null && message.hasOwnProperty("wildcard")) {
                if (properties.varInstance === 1)
                    return "varInstance: multiple values";
                properties.varInstance = 1;
                {
                    var error = $root.Var.WildcardMsg.verify(message.wildcard);
                    if (error)
                        return "wildcard." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a Var message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Var
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Var} Var
         */
        Var.fromObject = function fromObject(object) {
            if (object instanceof $root.Var)
                return object;
            var message = new $root.Var();
            if (object.boundVar != null)
                message.boundVar = object.boundVar | 0;
            if (object.freeVar != null)
                message.freeVar = object.freeVar | 0;
            if (object.wildcard != null) {
                if (typeof object.wildcard !== "object")
                    throw TypeError(".Var.wildcard: object expected");
                message.wildcard = $root.Var.WildcardMsg.fromObject(object.wildcard);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a Var message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Var
         * @static
         * @param {Var} message Var
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Var.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.boundVar != null && message.hasOwnProperty("boundVar")) {
                object.boundVar = message.boundVar;
                if (options.oneofs)
                    object.varInstance = "boundVar";
            }
            if (message.freeVar != null && message.hasOwnProperty("freeVar")) {
                object.freeVar = message.freeVar;
                if (options.oneofs)
                    object.varInstance = "freeVar";
            }
            if (message.wildcard != null && message.hasOwnProperty("wildcard")) {
                object.wildcard = $root.Var.WildcardMsg.toObject(message.wildcard, options);
                if (options.oneofs)
                    object.varInstance = "wildcard";
            }
            return object;
        };
    
        /**
         * Converts this Var to JSON.
         * @function toJSON
         * @memberof Var
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Var.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        Var.WildcardMsg = (function() {
    
            /**
             * Properties of a WildcardMsg.
             * @memberof Var
             * @interface IWildcardMsg
             */
    
            /**
             * Constructs a new WildcardMsg.
             * @memberof Var
             * @classdesc Represents a WildcardMsg.
             * @implements IWildcardMsg
             * @constructor
             * @param {Var.IWildcardMsg=} [properties] Properties to set
             */
            function WildcardMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Creates a new WildcardMsg instance using the specified properties.
             * @function create
             * @memberof Var.WildcardMsg
             * @static
             * @param {Var.IWildcardMsg=} [properties] Properties to set
             * @returns {Var.WildcardMsg} WildcardMsg instance
             */
            WildcardMsg.create = function create(properties) {
                return new WildcardMsg(properties);
            };
    
            /**
             * Encodes the specified WildcardMsg message. Does not implicitly {@link Var.WildcardMsg.verify|verify} messages.
             * @function encode
             * @memberof Var.WildcardMsg
             * @static
             * @param {Var.IWildcardMsg} message WildcardMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WildcardMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };
    
            /**
             * Encodes the specified WildcardMsg message, length delimited. Does not implicitly {@link Var.WildcardMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Var.WildcardMsg
             * @static
             * @param {Var.IWildcardMsg} message WildcardMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WildcardMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a WildcardMsg message from the specified reader or buffer.
             * @function decode
             * @memberof Var.WildcardMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Var.WildcardMsg} WildcardMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WildcardMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Var.WildcardMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a WildcardMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Var.WildcardMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Var.WildcardMsg} WildcardMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WildcardMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a WildcardMsg message.
             * @function verify
             * @memberof Var.WildcardMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WildcardMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };
    
            /**
             * Creates a WildcardMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Var.WildcardMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Var.WildcardMsg} WildcardMsg
             */
            WildcardMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.Var.WildcardMsg)
                    return object;
                return new $root.Var.WildcardMsg();
            };
    
            /**
             * Creates a plain object from a WildcardMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Var.WildcardMsg
             * @static
             * @param {Var.WildcardMsg} message WildcardMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WildcardMsg.toObject = function toObject() {
                return {};
            };
    
            /**
             * Converts this WildcardMsg to JSON.
             * @function toJSON
             * @memberof Var.WildcardMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WildcardMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return WildcardMsg;
        })();
    
        return Var;
    })();
    
    $root.Bundle = (function() {
    
        /**
         * Properties of a Bundle.
         * @exports IBundle
         * @interface IBundle
         * @property {IPar|null} [body] Bundle body
         * @property {boolean|null} [writeFlag] Bundle writeFlag
         * @property {boolean|null} [readFlag] Bundle readFlag
         */
    
        /**
         * Constructs a new Bundle.
         * @exports Bundle
         * @classdesc Nothing can be received from a (quoted) bundle with `readFlag = false`.
         * Likeise nothing can be sent to a (quoted) bundle with `writeFlag = false`.
         * 
         * If both flags are set to false, bundle allows only for equivalance check.
         * @implements IBundle
         * @constructor
         * @param {IBundle=} [properties] Properties to set
         */
        function Bundle(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Bundle body.
         * @member {IPar|null|undefined} body
         * @memberof Bundle
         * @instance
         */
        Bundle.prototype.body = null;
    
        /**
         * Bundle writeFlag.
         * @member {boolean} writeFlag
         * @memberof Bundle
         * @instance
         */
        Bundle.prototype.writeFlag = false;
    
        /**
         * Bundle readFlag.
         * @member {boolean} readFlag
         * @memberof Bundle
         * @instance
         */
        Bundle.prototype.readFlag = false;
    
        /**
         * Creates a new Bundle instance using the specified properties.
         * @function create
         * @memberof Bundle
         * @static
         * @param {IBundle=} [properties] Properties to set
         * @returns {Bundle} Bundle instance
         */
        Bundle.create = function create(properties) {
            return new Bundle(properties);
        };
    
        /**
         * Encodes the specified Bundle message. Does not implicitly {@link Bundle.verify|verify} messages.
         * @function encode
         * @memberof Bundle
         * @static
         * @param {IBundle} message Bundle message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Bundle.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.body != null && message.hasOwnProperty("body"))
                $root.Par.encode(message.body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.writeFlag != null && message.hasOwnProperty("writeFlag"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.writeFlag);
            if (message.readFlag != null && message.hasOwnProperty("readFlag"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.readFlag);
            return writer;
        };
    
        /**
         * Encodes the specified Bundle message, length delimited. Does not implicitly {@link Bundle.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Bundle
         * @static
         * @param {IBundle} message Bundle message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Bundle.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a Bundle message from the specified reader or buffer.
         * @function decode
         * @memberof Bundle
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Bundle} Bundle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Bundle.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Bundle();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.body = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.writeFlag = reader.bool();
                    break;
                case 3:
                    message.readFlag = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a Bundle message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Bundle
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Bundle} Bundle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Bundle.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a Bundle message.
         * @function verify
         * @memberof Bundle
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Bundle.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.body != null && message.hasOwnProperty("body")) {
                var error = $root.Par.verify(message.body);
                if (error)
                    return "body." + error;
            }
            if (message.writeFlag != null && message.hasOwnProperty("writeFlag"))
                if (typeof message.writeFlag !== "boolean")
                    return "writeFlag: boolean expected";
            if (message.readFlag != null && message.hasOwnProperty("readFlag"))
                if (typeof message.readFlag !== "boolean")
                    return "readFlag: boolean expected";
            return null;
        };
    
        /**
         * Creates a Bundle message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Bundle
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Bundle} Bundle
         */
        Bundle.fromObject = function fromObject(object) {
            if (object instanceof $root.Bundle)
                return object;
            var message = new $root.Bundle();
            if (object.body != null) {
                if (typeof object.body !== "object")
                    throw TypeError(".Bundle.body: object expected");
                message.body = $root.Par.fromObject(object.body);
            }
            if (object.writeFlag != null)
                message.writeFlag = Boolean(object.writeFlag);
            if (object.readFlag != null)
                message.readFlag = Boolean(object.readFlag);
            return message;
        };
    
        /**
         * Creates a plain object from a Bundle message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Bundle
         * @static
         * @param {Bundle} message Bundle
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Bundle.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.body = null;
                object.writeFlag = false;
                object.readFlag = false;
            }
            if (message.body != null && message.hasOwnProperty("body"))
                object.body = $root.Par.toObject(message.body, options);
            if (message.writeFlag != null && message.hasOwnProperty("writeFlag"))
                object.writeFlag = message.writeFlag;
            if (message.readFlag != null && message.hasOwnProperty("readFlag"))
                object.readFlag = message.readFlag;
            return object;
        };
    
        /**
         * Converts this Bundle to JSON.
         * @function toJSON
         * @memberof Bundle
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Bundle.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return Bundle;
    })();
    
    $root.Send = (function() {
    
        /**
         * Properties of a Send.
         * @exports ISend
         * @interface ISend
         * @property {IPar|null} [chan] Send chan
         * @property {Array.<IPar>|null} [data] Send data
         * @property {boolean|null} [persistent] Send persistent
         * @property {Uint8Array|null} [locallyFree] Send locallyFree
         * @property {boolean|null} [connectiveUsed] Send connectiveUsed
         */
    
        /**
         * Constructs a new Send.
         * @exports Send
         * @classdesc A send is written `chan!(data)` or `chan!!(data)` for a persistent send.
         * 
         * Upon send, all free variables in data are substituted with their values.
         * @implements ISend
         * @constructor
         * @param {ISend=} [properties] Properties to set
         */
        function Send(properties) {
            this.data = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Send chan.
         * @member {IPar|null|undefined} chan
         * @memberof Send
         * @instance
         */
        Send.prototype.chan = null;
    
        /**
         * Send data.
         * @member {Array.<IPar>} data
         * @memberof Send
         * @instance
         */
        Send.prototype.data = $util.emptyArray;
    
        /**
         * Send persistent.
         * @member {boolean} persistent
         * @memberof Send
         * @instance
         */
        Send.prototype.persistent = false;
    
        /**
         * Send locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof Send
         * @instance
         */
        Send.prototype.locallyFree = $util.newBuffer([]);
    
        /**
         * Send connectiveUsed.
         * @member {boolean} connectiveUsed
         * @memberof Send
         * @instance
         */
        Send.prototype.connectiveUsed = false;
    
        /**
         * Creates a new Send instance using the specified properties.
         * @function create
         * @memberof Send
         * @static
         * @param {ISend=} [properties] Properties to set
         * @returns {Send} Send instance
         */
        Send.create = function create(properties) {
            return new Send(properties);
        };
    
        /**
         * Encodes the specified Send message. Does not implicitly {@link Send.verify|verify} messages.
         * @function encode
         * @memberof Send
         * @static
         * @param {ISend} message Send message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Send.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.chan != null && message.hasOwnProperty("chan"))
                $root.Par.encode(message.chan, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.data != null && message.data.length)
                for (var i = 0; i < message.data.length; ++i)
                    $root.Par.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.persistent != null && message.hasOwnProperty("persistent"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.persistent);
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.locallyFree);
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.connectiveUsed);
            return writer;
        };
    
        /**
         * Encodes the specified Send message, length delimited. Does not implicitly {@link Send.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Send
         * @static
         * @param {ISend} message Send message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Send.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a Send message from the specified reader or buffer.
         * @function decode
         * @memberof Send
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Send} Send
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Send.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Send();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.chan = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    if (!(message.data && message.data.length))
                        message.data = [];
                    message.data.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.persistent = reader.bool();
                    break;
                case 5:
                    message.locallyFree = reader.bytes();
                    break;
                case 6:
                    message.connectiveUsed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a Send message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Send
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Send} Send
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Send.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a Send message.
         * @function verify
         * @memberof Send
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Send.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.chan != null && message.hasOwnProperty("chan")) {
                var error = $root.Par.verify(message.chan);
                if (error)
                    return "chan." + error;
            }
            if (message.data != null && message.hasOwnProperty("data")) {
                if (!Array.isArray(message.data))
                    return "data: array expected";
                for (var i = 0; i < message.data.length; ++i) {
                    var error = $root.Par.verify(message.data[i]);
                    if (error)
                        return "data." + error;
                }
            }
            if (message.persistent != null && message.hasOwnProperty("persistent"))
                if (typeof message.persistent !== "boolean")
                    return "persistent: boolean expected";
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                if (typeof message.connectiveUsed !== "boolean")
                    return "connectiveUsed: boolean expected";
            return null;
        };
    
        /**
         * Creates a Send message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Send
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Send} Send
         */
        Send.fromObject = function fromObject(object) {
            if (object instanceof $root.Send)
                return object;
            var message = new $root.Send();
            if (object.chan != null) {
                if (typeof object.chan !== "object")
                    throw TypeError(".Send.chan: object expected");
                message.chan = $root.Par.fromObject(object.chan);
            }
            if (object.data) {
                if (!Array.isArray(object.data))
                    throw TypeError(".Send.data: array expected");
                message.data = [];
                for (var i = 0; i < object.data.length; ++i) {
                    if (typeof object.data[i] !== "object")
                        throw TypeError(".Send.data: object expected");
                    message.data[i] = $root.Par.fromObject(object.data[i]);
                }
            }
            if (object.persistent != null)
                message.persistent = Boolean(object.persistent);
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connectiveUsed != null)
                message.connectiveUsed = Boolean(object.connectiveUsed);
            return message;
        };
    
        /**
         * Creates a plain object from a Send message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Send
         * @static
         * @param {Send} message Send
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Send.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.data = [];
            if (options.defaults) {
                object.chan = null;
                object.persistent = false;
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connectiveUsed = false;
            }
            if (message.chan != null && message.hasOwnProperty("chan"))
                object.chan = $root.Par.toObject(message.chan, options);
            if (message.data && message.data.length) {
                object.data = [];
                for (var j = 0; j < message.data.length; ++j)
                    object.data[j] = $root.Par.toObject(message.data[j], options);
            }
            if (message.persistent != null && message.hasOwnProperty("persistent"))
                object.persistent = message.persistent;
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                object.connectiveUsed = message.connectiveUsed;
            return object;
        };
    
        /**
         * Converts this Send to JSON.
         * @function toJSON
         * @memberof Send
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Send.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return Send;
    })();
    
    $root.ReceiveBind = (function() {
    
        /**
         * Properties of a ReceiveBind.
         * @exports IReceiveBind
         * @interface IReceiveBind
         * @property {Array.<IPar>|null} [patterns] ReceiveBind patterns
         * @property {IPar|null} [source] ReceiveBind source
         * @property {IVar|null} [remainder] ReceiveBind remainder
         * @property {number|null} [freeCount] ReceiveBind freeCount
         */
    
        /**
         * Constructs a new ReceiveBind.
         * @exports ReceiveBind
         * @classdesc Represents a ReceiveBind.
         * @implements IReceiveBind
         * @constructor
         * @param {IReceiveBind=} [properties] Properties to set
         */
        function ReceiveBind(properties) {
            this.patterns = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ReceiveBind patterns.
         * @member {Array.<IPar>} patterns
         * @memberof ReceiveBind
         * @instance
         */
        ReceiveBind.prototype.patterns = $util.emptyArray;
    
        /**
         * ReceiveBind source.
         * @member {IPar|null|undefined} source
         * @memberof ReceiveBind
         * @instance
         */
        ReceiveBind.prototype.source = null;
    
        /**
         * ReceiveBind remainder.
         * @member {IVar|null|undefined} remainder
         * @memberof ReceiveBind
         * @instance
         */
        ReceiveBind.prototype.remainder = null;
    
        /**
         * ReceiveBind freeCount.
         * @member {number} freeCount
         * @memberof ReceiveBind
         * @instance
         */
        ReceiveBind.prototype.freeCount = 0;
    
        /**
         * Creates a new ReceiveBind instance using the specified properties.
         * @function create
         * @memberof ReceiveBind
         * @static
         * @param {IReceiveBind=} [properties] Properties to set
         * @returns {ReceiveBind} ReceiveBind instance
         */
        ReceiveBind.create = function create(properties) {
            return new ReceiveBind(properties);
        };
    
        /**
         * Encodes the specified ReceiveBind message. Does not implicitly {@link ReceiveBind.verify|verify} messages.
         * @function encode
         * @memberof ReceiveBind
         * @static
         * @param {IReceiveBind} message ReceiveBind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReceiveBind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.patterns != null && message.patterns.length)
                for (var i = 0; i < message.patterns.length; ++i)
                    $root.Par.encode(message.patterns[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.source != null && message.hasOwnProperty("source"))
                $root.Par.encode(message.source, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                $root.Var.encode(message.remainder, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.freeCount);
            return writer;
        };
    
        /**
         * Encodes the specified ReceiveBind message, length delimited. Does not implicitly {@link ReceiveBind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ReceiveBind
         * @static
         * @param {IReceiveBind} message ReceiveBind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReceiveBind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ReceiveBind message from the specified reader or buffer.
         * @function decode
         * @memberof ReceiveBind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ReceiveBind} ReceiveBind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReceiveBind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReceiveBind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.patterns && message.patterns.length))
                        message.patterns = [];
                    message.patterns.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.source = $root.Par.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.remainder = $root.Var.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.freeCount = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ReceiveBind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ReceiveBind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ReceiveBind} ReceiveBind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReceiveBind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ReceiveBind message.
         * @function verify
         * @memberof ReceiveBind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ReceiveBind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.patterns != null && message.hasOwnProperty("patterns")) {
                if (!Array.isArray(message.patterns))
                    return "patterns: array expected";
                for (var i = 0; i < message.patterns.length; ++i) {
                    var error = $root.Par.verify(message.patterns[i]);
                    if (error)
                        return "patterns." + error;
                }
            }
            if (message.source != null && message.hasOwnProperty("source")) {
                var error = $root.Par.verify(message.source);
                if (error)
                    return "source." + error;
            }
            if (message.remainder != null && message.hasOwnProperty("remainder")) {
                var error = $root.Var.verify(message.remainder);
                if (error)
                    return "remainder." + error;
            }
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                if (!$util.isInteger(message.freeCount))
                    return "freeCount: integer expected";
            return null;
        };
    
        /**
         * Creates a ReceiveBind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ReceiveBind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ReceiveBind} ReceiveBind
         */
        ReceiveBind.fromObject = function fromObject(object) {
            if (object instanceof $root.ReceiveBind)
                return object;
            var message = new $root.ReceiveBind();
            if (object.patterns) {
                if (!Array.isArray(object.patterns))
                    throw TypeError(".ReceiveBind.patterns: array expected");
                message.patterns = [];
                for (var i = 0; i < object.patterns.length; ++i) {
                    if (typeof object.patterns[i] !== "object")
                        throw TypeError(".ReceiveBind.patterns: object expected");
                    message.patterns[i] = $root.Par.fromObject(object.patterns[i]);
                }
            }
            if (object.source != null) {
                if (typeof object.source !== "object")
                    throw TypeError(".ReceiveBind.source: object expected");
                message.source = $root.Par.fromObject(object.source);
            }
            if (object.remainder != null) {
                if (typeof object.remainder !== "object")
                    throw TypeError(".ReceiveBind.remainder: object expected");
                message.remainder = $root.Var.fromObject(object.remainder);
            }
            if (object.freeCount != null)
                message.freeCount = object.freeCount | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a ReceiveBind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ReceiveBind
         * @static
         * @param {ReceiveBind} message ReceiveBind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ReceiveBind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.patterns = [];
            if (options.defaults) {
                object.source = null;
                object.remainder = null;
                object.freeCount = 0;
            }
            if (message.patterns && message.patterns.length) {
                object.patterns = [];
                for (var j = 0; j < message.patterns.length; ++j)
                    object.patterns[j] = $root.Par.toObject(message.patterns[j], options);
            }
            if (message.source != null && message.hasOwnProperty("source"))
                object.source = $root.Par.toObject(message.source, options);
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                object.remainder = $root.Var.toObject(message.remainder, options);
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                object.freeCount = message.freeCount;
            return object;
        };
    
        /**
         * Converts this ReceiveBind to JSON.
         * @function toJSON
         * @memberof ReceiveBind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ReceiveBind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ReceiveBind;
    })();
    
    $root.BindPattern = (function() {
    
        /**
         * Properties of a BindPattern.
         * @exports IBindPattern
         * @interface IBindPattern
         * @property {Array.<IPar>|null} [patterns] BindPattern patterns
         * @property {IVar|null} [remainder] BindPattern remainder
         * @property {number|null} [freeCount] BindPattern freeCount
         */
    
        /**
         * Constructs a new BindPattern.
         * @exports BindPattern
         * @classdesc Represents a BindPattern.
         * @implements IBindPattern
         * @constructor
         * @param {IBindPattern=} [properties] Properties to set
         */
        function BindPattern(properties) {
            this.patterns = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * BindPattern patterns.
         * @member {Array.<IPar>} patterns
         * @memberof BindPattern
         * @instance
         */
        BindPattern.prototype.patterns = $util.emptyArray;
    
        /**
         * BindPattern remainder.
         * @member {IVar|null|undefined} remainder
         * @memberof BindPattern
         * @instance
         */
        BindPattern.prototype.remainder = null;
    
        /**
         * BindPattern freeCount.
         * @member {number} freeCount
         * @memberof BindPattern
         * @instance
         */
        BindPattern.prototype.freeCount = 0;
    
        /**
         * Creates a new BindPattern instance using the specified properties.
         * @function create
         * @memberof BindPattern
         * @static
         * @param {IBindPattern=} [properties] Properties to set
         * @returns {BindPattern} BindPattern instance
         */
        BindPattern.create = function create(properties) {
            return new BindPattern(properties);
        };
    
        /**
         * Encodes the specified BindPattern message. Does not implicitly {@link BindPattern.verify|verify} messages.
         * @function encode
         * @memberof BindPattern
         * @static
         * @param {IBindPattern} message BindPattern message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BindPattern.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.patterns != null && message.patterns.length)
                for (var i = 0; i < message.patterns.length; ++i)
                    $root.Par.encode(message.patterns[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                $root.Var.encode(message.remainder, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.freeCount);
            return writer;
        };
    
        /**
         * Encodes the specified BindPattern message, length delimited. Does not implicitly {@link BindPattern.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BindPattern
         * @static
         * @param {IBindPattern} message BindPattern message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BindPattern.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a BindPattern message from the specified reader or buffer.
         * @function decode
         * @memberof BindPattern
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {BindPattern} BindPattern
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BindPattern.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BindPattern();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.patterns && message.patterns.length))
                        message.patterns = [];
                    message.patterns.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.remainder = $root.Var.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.freeCount = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a BindPattern message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof BindPattern
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {BindPattern} BindPattern
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BindPattern.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a BindPattern message.
         * @function verify
         * @memberof BindPattern
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BindPattern.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.patterns != null && message.hasOwnProperty("patterns")) {
                if (!Array.isArray(message.patterns))
                    return "patterns: array expected";
                for (var i = 0; i < message.patterns.length; ++i) {
                    var error = $root.Par.verify(message.patterns[i]);
                    if (error)
                        return "patterns." + error;
                }
            }
            if (message.remainder != null && message.hasOwnProperty("remainder")) {
                var error = $root.Var.verify(message.remainder);
                if (error)
                    return "remainder." + error;
            }
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                if (!$util.isInteger(message.freeCount))
                    return "freeCount: integer expected";
            return null;
        };
    
        /**
         * Creates a BindPattern message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof BindPattern
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {BindPattern} BindPattern
         */
        BindPattern.fromObject = function fromObject(object) {
            if (object instanceof $root.BindPattern)
                return object;
            var message = new $root.BindPattern();
            if (object.patterns) {
                if (!Array.isArray(object.patterns))
                    throw TypeError(".BindPattern.patterns: array expected");
                message.patterns = [];
                for (var i = 0; i < object.patterns.length; ++i) {
                    if (typeof object.patterns[i] !== "object")
                        throw TypeError(".BindPattern.patterns: object expected");
                    message.patterns[i] = $root.Par.fromObject(object.patterns[i]);
                }
            }
            if (object.remainder != null) {
                if (typeof object.remainder !== "object")
                    throw TypeError(".BindPattern.remainder: object expected");
                message.remainder = $root.Var.fromObject(object.remainder);
            }
            if (object.freeCount != null)
                message.freeCount = object.freeCount | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a BindPattern message. Also converts values to other types if specified.
         * @function toObject
         * @memberof BindPattern
         * @static
         * @param {BindPattern} message BindPattern
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BindPattern.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.patterns = [];
            if (options.defaults) {
                object.remainder = null;
                object.freeCount = 0;
            }
            if (message.patterns && message.patterns.length) {
                object.patterns = [];
                for (var j = 0; j < message.patterns.length; ++j)
                    object.patterns[j] = $root.Par.toObject(message.patterns[j], options);
            }
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                object.remainder = $root.Var.toObject(message.remainder, options);
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                object.freeCount = message.freeCount;
            return object;
        };
    
        /**
         * Converts this BindPattern to JSON.
         * @function toJSON
         * @memberof BindPattern
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BindPattern.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return BindPattern;
    })();
    
    $root.ListBindPatterns = (function() {
    
        /**
         * Properties of a ListBindPatterns.
         * @exports IListBindPatterns
         * @interface IListBindPatterns
         * @property {Array.<IBindPattern>|null} [patterns] ListBindPatterns patterns
         */
    
        /**
         * Constructs a new ListBindPatterns.
         * @exports ListBindPatterns
         * @classdesc Represents a ListBindPatterns.
         * @implements IListBindPatterns
         * @constructor
         * @param {IListBindPatterns=} [properties] Properties to set
         */
        function ListBindPatterns(properties) {
            this.patterns = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ListBindPatterns patterns.
         * @member {Array.<IBindPattern>} patterns
         * @memberof ListBindPatterns
         * @instance
         */
        ListBindPatterns.prototype.patterns = $util.emptyArray;
    
        /**
         * Creates a new ListBindPatterns instance using the specified properties.
         * @function create
         * @memberof ListBindPatterns
         * @static
         * @param {IListBindPatterns=} [properties] Properties to set
         * @returns {ListBindPatterns} ListBindPatterns instance
         */
        ListBindPatterns.create = function create(properties) {
            return new ListBindPatterns(properties);
        };
    
        /**
         * Encodes the specified ListBindPatterns message. Does not implicitly {@link ListBindPatterns.verify|verify} messages.
         * @function encode
         * @memberof ListBindPatterns
         * @static
         * @param {IListBindPatterns} message ListBindPatterns message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ListBindPatterns.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.patterns != null && message.patterns.length)
                for (var i = 0; i < message.patterns.length; ++i)
                    $root.BindPattern.encode(message.patterns[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified ListBindPatterns message, length delimited. Does not implicitly {@link ListBindPatterns.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ListBindPatterns
         * @static
         * @param {IListBindPatterns} message ListBindPatterns message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ListBindPatterns.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ListBindPatterns message from the specified reader or buffer.
         * @function decode
         * @memberof ListBindPatterns
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ListBindPatterns} ListBindPatterns
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ListBindPatterns.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListBindPatterns();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.patterns && message.patterns.length))
                        message.patterns = [];
                    message.patterns.push($root.BindPattern.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ListBindPatterns message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ListBindPatterns
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ListBindPatterns} ListBindPatterns
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ListBindPatterns.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ListBindPatterns message.
         * @function verify
         * @memberof ListBindPatterns
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ListBindPatterns.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.patterns != null && message.hasOwnProperty("patterns")) {
                if (!Array.isArray(message.patterns))
                    return "patterns: array expected";
                for (var i = 0; i < message.patterns.length; ++i) {
                    var error = $root.BindPattern.verify(message.patterns[i]);
                    if (error)
                        return "patterns." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a ListBindPatterns message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ListBindPatterns
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ListBindPatterns} ListBindPatterns
         */
        ListBindPatterns.fromObject = function fromObject(object) {
            if (object instanceof $root.ListBindPatterns)
                return object;
            var message = new $root.ListBindPatterns();
            if (object.patterns) {
                if (!Array.isArray(object.patterns))
                    throw TypeError(".ListBindPatterns.patterns: array expected");
                message.patterns = [];
                for (var i = 0; i < object.patterns.length; ++i) {
                    if (typeof object.patterns[i] !== "object")
                        throw TypeError(".ListBindPatterns.patterns: object expected");
                    message.patterns[i] = $root.BindPattern.fromObject(object.patterns[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a ListBindPatterns message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ListBindPatterns
         * @static
         * @param {ListBindPatterns} message ListBindPatterns
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ListBindPatterns.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.patterns = [];
            if (message.patterns && message.patterns.length) {
                object.patterns = [];
                for (var j = 0; j < message.patterns.length; ++j)
                    object.patterns[j] = $root.BindPattern.toObject(message.patterns[j], options);
            }
            return object;
        };
    
        /**
         * Converts this ListBindPatterns to JSON.
         * @function toJSON
         * @memberof ListBindPatterns
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ListBindPatterns.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ListBindPatterns;
    })();
    
    $root.Receive = (function() {
    
        /**
         * Properties of a Receive.
         * @exports IReceive
         * @interface IReceive
         * @property {Array.<IReceiveBind>|null} [binds] Receive binds
         * @property {IPar|null} [body] Receive body
         * @property {boolean|null} [persistent] Receive persistent
         * @property {number|null} [bindCount] Receive bindCount
         * @property {Uint8Array|null} [locallyFree] Receive locallyFree
         * @property {boolean|null} [connectiveUsed] Receive connectiveUsed
         */
    
        /**
         * Constructs a new Receive.
         * @exports Receive
         * @classdesc A receive is written `for(binds) { body }`
         * i.e. `for(patterns <- source) { body }`
         * or for a persistent recieve: `for(patterns <= source) { body }`.
         * 
         * It's an error for free Variable to occur more than once in a pattern.
         * @implements IReceive
         * @constructor
         * @param {IReceive=} [properties] Properties to set
         */
        function Receive(properties) {
            this.binds = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Receive binds.
         * @member {Array.<IReceiveBind>} binds
         * @memberof Receive
         * @instance
         */
        Receive.prototype.binds = $util.emptyArray;
    
        /**
         * Receive body.
         * @member {IPar|null|undefined} body
         * @memberof Receive
         * @instance
         */
        Receive.prototype.body = null;
    
        /**
         * Receive persistent.
         * @member {boolean} persistent
         * @memberof Receive
         * @instance
         */
        Receive.prototype.persistent = false;
    
        /**
         * Receive bindCount.
         * @member {number} bindCount
         * @memberof Receive
         * @instance
         */
        Receive.prototype.bindCount = 0;
    
        /**
         * Receive locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof Receive
         * @instance
         */
        Receive.prototype.locallyFree = $util.newBuffer([]);
    
        /**
         * Receive connectiveUsed.
         * @member {boolean} connectiveUsed
         * @memberof Receive
         * @instance
         */
        Receive.prototype.connectiveUsed = false;
    
        /**
         * Creates a new Receive instance using the specified properties.
         * @function create
         * @memberof Receive
         * @static
         * @param {IReceive=} [properties] Properties to set
         * @returns {Receive} Receive instance
         */
        Receive.create = function create(properties) {
            return new Receive(properties);
        };
    
        /**
         * Encodes the specified Receive message. Does not implicitly {@link Receive.verify|verify} messages.
         * @function encode
         * @memberof Receive
         * @static
         * @param {IReceive} message Receive message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Receive.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.binds != null && message.binds.length)
                for (var i = 0; i < message.binds.length; ++i)
                    $root.ReceiveBind.encode(message.binds[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.body != null && message.hasOwnProperty("body"))
                $root.Par.encode(message.body, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.persistent != null && message.hasOwnProperty("persistent"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.persistent);
            if (message.bindCount != null && message.hasOwnProperty("bindCount"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.bindCount);
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.locallyFree);
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.connectiveUsed);
            return writer;
        };
    
        /**
         * Encodes the specified Receive message, length delimited. Does not implicitly {@link Receive.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Receive
         * @static
         * @param {IReceive} message Receive message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Receive.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a Receive message from the specified reader or buffer.
         * @function decode
         * @memberof Receive
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Receive} Receive
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Receive.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Receive();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.binds && message.binds.length))
                        message.binds = [];
                    message.binds.push($root.ReceiveBind.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.body = $root.Par.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.persistent = reader.bool();
                    break;
                case 4:
                    message.bindCount = reader.int32();
                    break;
                case 6:
                    message.locallyFree = reader.bytes();
                    break;
                case 7:
                    message.connectiveUsed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a Receive message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Receive
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Receive} Receive
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Receive.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a Receive message.
         * @function verify
         * @memberof Receive
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Receive.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.binds != null && message.hasOwnProperty("binds")) {
                if (!Array.isArray(message.binds))
                    return "binds: array expected";
                for (var i = 0; i < message.binds.length; ++i) {
                    var error = $root.ReceiveBind.verify(message.binds[i]);
                    if (error)
                        return "binds." + error;
                }
            }
            if (message.body != null && message.hasOwnProperty("body")) {
                var error = $root.Par.verify(message.body);
                if (error)
                    return "body." + error;
            }
            if (message.persistent != null && message.hasOwnProperty("persistent"))
                if (typeof message.persistent !== "boolean")
                    return "persistent: boolean expected";
            if (message.bindCount != null && message.hasOwnProperty("bindCount"))
                if (!$util.isInteger(message.bindCount))
                    return "bindCount: integer expected";
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                if (typeof message.connectiveUsed !== "boolean")
                    return "connectiveUsed: boolean expected";
            return null;
        };
    
        /**
         * Creates a Receive message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Receive
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Receive} Receive
         */
        Receive.fromObject = function fromObject(object) {
            if (object instanceof $root.Receive)
                return object;
            var message = new $root.Receive();
            if (object.binds) {
                if (!Array.isArray(object.binds))
                    throw TypeError(".Receive.binds: array expected");
                message.binds = [];
                for (var i = 0; i < object.binds.length; ++i) {
                    if (typeof object.binds[i] !== "object")
                        throw TypeError(".Receive.binds: object expected");
                    message.binds[i] = $root.ReceiveBind.fromObject(object.binds[i]);
                }
            }
            if (object.body != null) {
                if (typeof object.body !== "object")
                    throw TypeError(".Receive.body: object expected");
                message.body = $root.Par.fromObject(object.body);
            }
            if (object.persistent != null)
                message.persistent = Boolean(object.persistent);
            if (object.bindCount != null)
                message.bindCount = object.bindCount | 0;
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connectiveUsed != null)
                message.connectiveUsed = Boolean(object.connectiveUsed);
            return message;
        };
    
        /**
         * Creates a plain object from a Receive message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Receive
         * @static
         * @param {Receive} message Receive
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Receive.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.binds = [];
            if (options.defaults) {
                object.body = null;
                object.persistent = false;
                object.bindCount = 0;
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connectiveUsed = false;
            }
            if (message.binds && message.binds.length) {
                object.binds = [];
                for (var j = 0; j < message.binds.length; ++j)
                    object.binds[j] = $root.ReceiveBind.toObject(message.binds[j], options);
            }
            if (message.body != null && message.hasOwnProperty("body"))
                object.body = $root.Par.toObject(message.body, options);
            if (message.persistent != null && message.hasOwnProperty("persistent"))
                object.persistent = message.persistent;
            if (message.bindCount != null && message.hasOwnProperty("bindCount"))
                object.bindCount = message.bindCount;
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                object.connectiveUsed = message.connectiveUsed;
            return object;
        };
    
        /**
         * Converts this Receive to JSON.
         * @function toJSON
         * @memberof Receive
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Receive.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return Receive;
    })();
    
    $root.New = (function() {
    
        /**
         * Properties of a New.
         * @exports INew
         * @interface INew
         * @property {number|null} [bindCount] New bindCount
         * @property {IPar|null} [p] New p
         * @property {Array.<string>|null} [uri] New uri
         * @property {IDeployId|null} [deployId] New deployId
         * @property {IDeployerId|null} [deployerId] New deployerId
         * @property {Uint8Array|null} [locallyFree] New locallyFree
         */
    
        /**
         * Constructs a new New.
         * @exports New
         * @classdesc Represents a New.
         * @implements INew
         * @constructor
         * @param {INew=} [properties] Properties to set
         */
        function New(properties) {
            this.uri = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * New bindCount.
         * @member {number} bindCount
         * @memberof New
         * @instance
         */
        New.prototype.bindCount = 0;
    
        /**
         * New p.
         * @member {IPar|null|undefined} p
         * @memberof New
         * @instance
         */
        New.prototype.p = null;
    
        /**
         * New uri.
         * @member {Array.<string>} uri
         * @memberof New
         * @instance
         */
        New.prototype.uri = $util.emptyArray;
    
        /**
         * New deployId.
         * @member {IDeployId|null|undefined} deployId
         * @memberof New
         * @instance
         */
        New.prototype.deployId = null;
    
        /**
         * New deployerId.
         * @member {IDeployerId|null|undefined} deployerId
         * @memberof New
         * @instance
         */
        New.prototype.deployerId = null;
    
        /**
         * New locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof New
         * @instance
         */
        New.prototype.locallyFree = $util.newBuffer([]);
    
        /**
         * Creates a new New instance using the specified properties.
         * @function create
         * @memberof New
         * @static
         * @param {INew=} [properties] Properties to set
         * @returns {New} New instance
         */
        New.create = function create(properties) {
            return new New(properties);
        };
    
        /**
         * Encodes the specified New message. Does not implicitly {@link New.verify|verify} messages.
         * @function encode
         * @memberof New
         * @static
         * @param {INew} message New message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        New.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bindCount != null && message.hasOwnProperty("bindCount"))
                writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.bindCount);
            if (message.p != null && message.hasOwnProperty("p"))
                $root.Par.encode(message.p, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.uri != null && message.uri.length)
                for (var i = 0; i < message.uri.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.uri[i]);
            if (message.deployId != null && message.hasOwnProperty("deployId"))
                $root.DeployId.encode(message.deployId, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.deployerId != null && message.hasOwnProperty("deployerId"))
                $root.DeployerId.encode(message.deployerId, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.locallyFree);
            return writer;
        };
    
        /**
         * Encodes the specified New message, length delimited. Does not implicitly {@link New.verify|verify} messages.
         * @function encodeDelimited
         * @memberof New
         * @static
         * @param {INew} message New message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        New.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a New message from the specified reader or buffer.
         * @function decode
         * @memberof New
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {New} New
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        New.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.New();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.bindCount = reader.sint32();
                    break;
                case 2:
                    message.p = $root.Par.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message.uri && message.uri.length))
                        message.uri = [];
                    message.uri.push(reader.string());
                    break;
                case 4:
                    message.deployId = $root.DeployId.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.deployerId = $root.DeployerId.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.locallyFree = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a New message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof New
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {New} New
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        New.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a New message.
         * @function verify
         * @memberof New
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        New.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bindCount != null && message.hasOwnProperty("bindCount"))
                if (!$util.isInteger(message.bindCount))
                    return "bindCount: integer expected";
            if (message.p != null && message.hasOwnProperty("p")) {
                var error = $root.Par.verify(message.p);
                if (error)
                    return "p." + error;
            }
            if (message.uri != null && message.hasOwnProperty("uri")) {
                if (!Array.isArray(message.uri))
                    return "uri: array expected";
                for (var i = 0; i < message.uri.length; ++i)
                    if (!$util.isString(message.uri[i]))
                        return "uri: string[] expected";
            }
            if (message.deployId != null && message.hasOwnProperty("deployId")) {
                var error = $root.DeployId.verify(message.deployId);
                if (error)
                    return "deployId." + error;
            }
            if (message.deployerId != null && message.hasOwnProperty("deployerId")) {
                var error = $root.DeployerId.verify(message.deployerId);
                if (error)
                    return "deployerId." + error;
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            return null;
        };
    
        /**
         * Creates a New message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof New
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {New} New
         */
        New.fromObject = function fromObject(object) {
            if (object instanceof $root.New)
                return object;
            var message = new $root.New();
            if (object.bindCount != null)
                message.bindCount = object.bindCount | 0;
            if (object.p != null) {
                if (typeof object.p !== "object")
                    throw TypeError(".New.p: object expected");
                message.p = $root.Par.fromObject(object.p);
            }
            if (object.uri) {
                if (!Array.isArray(object.uri))
                    throw TypeError(".New.uri: array expected");
                message.uri = [];
                for (var i = 0; i < object.uri.length; ++i)
                    message.uri[i] = String(object.uri[i]);
            }
            if (object.deployId != null) {
                if (typeof object.deployId !== "object")
                    throw TypeError(".New.deployId: object expected");
                message.deployId = $root.DeployId.fromObject(object.deployId);
            }
            if (object.deployerId != null) {
                if (typeof object.deployerId !== "object")
                    throw TypeError(".New.deployerId: object expected");
                message.deployerId = $root.DeployerId.fromObject(object.deployerId);
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            return message;
        };
    
        /**
         * Creates a plain object from a New message. Also converts values to other types if specified.
         * @function toObject
         * @memberof New
         * @static
         * @param {New} message New
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        New.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.uri = [];
            if (options.defaults) {
                object.bindCount = 0;
                object.p = null;
                object.deployId = null;
                object.deployerId = null;
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
            }
            if (message.bindCount != null && message.hasOwnProperty("bindCount"))
                object.bindCount = message.bindCount;
            if (message.p != null && message.hasOwnProperty("p"))
                object.p = $root.Par.toObject(message.p, options);
            if (message.uri && message.uri.length) {
                object.uri = [];
                for (var j = 0; j < message.uri.length; ++j)
                    object.uri[j] = message.uri[j];
            }
            if (message.deployId != null && message.hasOwnProperty("deployId"))
                object.deployId = $root.DeployId.toObject(message.deployId, options);
            if (message.deployerId != null && message.hasOwnProperty("deployerId"))
                object.deployerId = $root.DeployerId.toObject(message.deployerId, options);
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            return object;
        };
    
        /**
         * Converts this New to JSON.
         * @function toJSON
         * @memberof New
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        New.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return New;
    })();
    
    $root.MatchCase = (function() {
    
        /**
         * Properties of a MatchCase.
         * @exports IMatchCase
         * @interface IMatchCase
         * @property {IPar|null} [pattern] MatchCase pattern
         * @property {IPar|null} [source] MatchCase source
         * @property {number|null} [freeCount] MatchCase freeCount
         */
    
        /**
         * Constructs a new MatchCase.
         * @exports MatchCase
         * @classdesc Represents a MatchCase.
         * @implements IMatchCase
         * @constructor
         * @param {IMatchCase=} [properties] Properties to set
         */
        function MatchCase(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * MatchCase pattern.
         * @member {IPar|null|undefined} pattern
         * @memberof MatchCase
         * @instance
         */
        MatchCase.prototype.pattern = null;
    
        /**
         * MatchCase source.
         * @member {IPar|null|undefined} source
         * @memberof MatchCase
         * @instance
         */
        MatchCase.prototype.source = null;
    
        /**
         * MatchCase freeCount.
         * @member {number} freeCount
         * @memberof MatchCase
         * @instance
         */
        MatchCase.prototype.freeCount = 0;
    
        /**
         * Creates a new MatchCase instance using the specified properties.
         * @function create
         * @memberof MatchCase
         * @static
         * @param {IMatchCase=} [properties] Properties to set
         * @returns {MatchCase} MatchCase instance
         */
        MatchCase.create = function create(properties) {
            return new MatchCase(properties);
        };
    
        /**
         * Encodes the specified MatchCase message. Does not implicitly {@link MatchCase.verify|verify} messages.
         * @function encode
         * @memberof MatchCase
         * @static
         * @param {IMatchCase} message MatchCase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MatchCase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                $root.Par.encode(message.pattern, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.source != null && message.hasOwnProperty("source"))
                $root.Par.encode(message.source, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.freeCount);
            return writer;
        };
    
        /**
         * Encodes the specified MatchCase message, length delimited. Does not implicitly {@link MatchCase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MatchCase
         * @static
         * @param {IMatchCase} message MatchCase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MatchCase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a MatchCase message from the specified reader or buffer.
         * @function decode
         * @memberof MatchCase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {MatchCase} MatchCase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MatchCase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MatchCase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.pattern = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.source = $root.Par.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.freeCount = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a MatchCase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof MatchCase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {MatchCase} MatchCase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MatchCase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a MatchCase message.
         * @function verify
         * @memberof MatchCase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MatchCase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pattern != null && message.hasOwnProperty("pattern")) {
                var error = $root.Par.verify(message.pattern);
                if (error)
                    return "pattern." + error;
            }
            if (message.source != null && message.hasOwnProperty("source")) {
                var error = $root.Par.verify(message.source);
                if (error)
                    return "source." + error;
            }
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                if (!$util.isInteger(message.freeCount))
                    return "freeCount: integer expected";
            return null;
        };
    
        /**
         * Creates a MatchCase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof MatchCase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {MatchCase} MatchCase
         */
        MatchCase.fromObject = function fromObject(object) {
            if (object instanceof $root.MatchCase)
                return object;
            var message = new $root.MatchCase();
            if (object.pattern != null) {
                if (typeof object.pattern !== "object")
                    throw TypeError(".MatchCase.pattern: object expected");
                message.pattern = $root.Par.fromObject(object.pattern);
            }
            if (object.source != null) {
                if (typeof object.source !== "object")
                    throw TypeError(".MatchCase.source: object expected");
                message.source = $root.Par.fromObject(object.source);
            }
            if (object.freeCount != null)
                message.freeCount = object.freeCount | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a MatchCase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof MatchCase
         * @static
         * @param {MatchCase} message MatchCase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MatchCase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.pattern = null;
                object.source = null;
                object.freeCount = 0;
            }
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                object.pattern = $root.Par.toObject(message.pattern, options);
            if (message.source != null && message.hasOwnProperty("source"))
                object.source = $root.Par.toObject(message.source, options);
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                object.freeCount = message.freeCount;
            return object;
        };
    
        /**
         * Converts this MatchCase to JSON.
         * @function toJSON
         * @memberof MatchCase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MatchCase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return MatchCase;
    })();
    
    $root.Match = (function() {
    
        /**
         * Properties of a Match.
         * @exports IMatch
         * @interface IMatch
         * @property {IPar|null} [target] Match target
         * @property {Array.<IMatchCase>|null} [cases] Match cases
         * @property {Uint8Array|null} [locallyFree] Match locallyFree
         * @property {boolean|null} [connectiveUsed] Match connectiveUsed
         */
    
        /**
         * Constructs a new Match.
         * @exports Match
         * @classdesc Represents a Match.
         * @implements IMatch
         * @constructor
         * @param {IMatch=} [properties] Properties to set
         */
        function Match(properties) {
            this.cases = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Match target.
         * @member {IPar|null|undefined} target
         * @memberof Match
         * @instance
         */
        Match.prototype.target = null;
    
        /**
         * Match cases.
         * @member {Array.<IMatchCase>} cases
         * @memberof Match
         * @instance
         */
        Match.prototype.cases = $util.emptyArray;
    
        /**
         * Match locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof Match
         * @instance
         */
        Match.prototype.locallyFree = $util.newBuffer([]);
    
        /**
         * Match connectiveUsed.
         * @member {boolean} connectiveUsed
         * @memberof Match
         * @instance
         */
        Match.prototype.connectiveUsed = false;
    
        /**
         * Creates a new Match instance using the specified properties.
         * @function create
         * @memberof Match
         * @static
         * @param {IMatch=} [properties] Properties to set
         * @returns {Match} Match instance
         */
        Match.create = function create(properties) {
            return new Match(properties);
        };
    
        /**
         * Encodes the specified Match message. Does not implicitly {@link Match.verify|verify} messages.
         * @function encode
         * @memberof Match
         * @static
         * @param {IMatch} message Match message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Match.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.target != null && message.hasOwnProperty("target"))
                $root.Par.encode(message.target, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.cases != null && message.cases.length)
                for (var i = 0; i < message.cases.length; ++i)
                    $root.MatchCase.encode(message.cases[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.locallyFree);
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.connectiveUsed);
            return writer;
        };
    
        /**
         * Encodes the specified Match message, length delimited. Does not implicitly {@link Match.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Match
         * @static
         * @param {IMatch} message Match message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Match.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a Match message from the specified reader or buffer.
         * @function decode
         * @memberof Match
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Match} Match
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Match.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Match();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.target = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    if (!(message.cases && message.cases.length))
                        message.cases = [];
                    message.cases.push($root.MatchCase.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.locallyFree = reader.bytes();
                    break;
                case 5:
                    message.connectiveUsed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a Match message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Match
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Match} Match
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Match.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a Match message.
         * @function verify
         * @memberof Match
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Match.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.target != null && message.hasOwnProperty("target")) {
                var error = $root.Par.verify(message.target);
                if (error)
                    return "target." + error;
            }
            if (message.cases != null && message.hasOwnProperty("cases")) {
                if (!Array.isArray(message.cases))
                    return "cases: array expected";
                for (var i = 0; i < message.cases.length; ++i) {
                    var error = $root.MatchCase.verify(message.cases[i]);
                    if (error)
                        return "cases." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                if (typeof message.connectiveUsed !== "boolean")
                    return "connectiveUsed: boolean expected";
            return null;
        };
    
        /**
         * Creates a Match message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Match
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Match} Match
         */
        Match.fromObject = function fromObject(object) {
            if (object instanceof $root.Match)
                return object;
            var message = new $root.Match();
            if (object.target != null) {
                if (typeof object.target !== "object")
                    throw TypeError(".Match.target: object expected");
                message.target = $root.Par.fromObject(object.target);
            }
            if (object.cases) {
                if (!Array.isArray(object.cases))
                    throw TypeError(".Match.cases: array expected");
                message.cases = [];
                for (var i = 0; i < object.cases.length; ++i) {
                    if (typeof object.cases[i] !== "object")
                        throw TypeError(".Match.cases: object expected");
                    message.cases[i] = $root.MatchCase.fromObject(object.cases[i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connectiveUsed != null)
                message.connectiveUsed = Boolean(object.connectiveUsed);
            return message;
        };
    
        /**
         * Creates a plain object from a Match message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Match
         * @static
         * @param {Match} message Match
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Match.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.cases = [];
            if (options.defaults) {
                object.target = null;
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connectiveUsed = false;
            }
            if (message.target != null && message.hasOwnProperty("target"))
                object.target = $root.Par.toObject(message.target, options);
            if (message.cases && message.cases.length) {
                object.cases = [];
                for (var j = 0; j < message.cases.length; ++j)
                    object.cases[j] = $root.MatchCase.toObject(message.cases[j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                object.connectiveUsed = message.connectiveUsed;
            return object;
        };
    
        /**
         * Converts this Match to JSON.
         * @function toJSON
         * @memberof Match
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Match.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return Match;
    })();
    
    $root.Expr = (function() {
    
        /**
         * Properties of an Expr.
         * @exports IExpr
         * @interface IExpr
         * @property {boolean|null} [gBool] Expr gBool
         * @property {number|Long|null} [gInt] Expr gInt
         * @property {string|null} [gString] Expr gString
         * @property {string|null} [gUri] Expr gUri
         * @property {Uint8Array|null} [gByteArray] Expr gByteArray
         * @property {IENot|null} [eNotBody] Expr eNotBody
         * @property {IENeg|null} [eNegBody] Expr eNegBody
         * @property {IEMult|null} [eMultBody] Expr eMultBody
         * @property {IEDiv|null} [eDivBody] Expr eDivBody
         * @property {IEPlus|null} [ePlusBody] Expr ePlusBody
         * @property {IEMinus|null} [eMinusBody] Expr eMinusBody
         * @property {IELt|null} [eLtBody] Expr eLtBody
         * @property {IELte|null} [eLteBody] Expr eLteBody
         * @property {IEGt|null} [eGtBody] Expr eGtBody
         * @property {IEGte|null} [eGteBody] Expr eGteBody
         * @property {IEEq|null} [eEqBody] Expr eEqBody
         * @property {IENeq|null} [eNeqBody] Expr eNeqBody
         * @property {IEAnd|null} [eAndBody] Expr eAndBody
         * @property {IEOr|null} [eOrBody] Expr eOrBody
         * @property {IEVar|null} [eVarBody] Expr eVarBody
         * @property {IEList|null} [eListBody] Expr eListBody
         * @property {IETuple|null} [eTupleBody] Expr eTupleBody
         * @property {IESet|null} [eSetBody] Expr eSetBody
         * @property {IEMap|null} [eMapBody] Expr eMapBody
         * @property {IEMethod|null} [eMethodBody] Expr eMethodBody
         * @property {IEMatches|null} [eMatchesBody] Expr eMatchesBody
         * @property {IEPercentPercent|null} [ePercentPercentBody] Expr ePercentPercentBody
         * @property {IEPlusPlus|null} [ePlusPlusBody] Expr ePlusPlusBody
         * @property {IEMinusMinus|null} [eMinusMinusBody] Expr eMinusMinusBody
         * @property {IEMod|null} [eModBody] Expr eModBody
         */
    
        /**
         * Constructs a new Expr.
         * @exports Expr
         * @classdesc Represents an Expr.
         * @implements IExpr
         * @constructor
         * @param {IExpr=} [properties] Properties to set
         */
        function Expr(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Expr gBool.
         * @member {boolean} gBool
         * @memberof Expr
         * @instance
         */
        Expr.prototype.gBool = false;
    
        /**
         * Expr gInt.
         * @member {number|Long} gInt
         * @memberof Expr
         * @instance
         */
        Expr.prototype.gInt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Expr gString.
         * @member {string} gString
         * @memberof Expr
         * @instance
         */
        Expr.prototype.gString = "";
    
        /**
         * Expr gUri.
         * @member {string} gUri
         * @memberof Expr
         * @instance
         */
        Expr.prototype.gUri = "";
    
        /**
         * Expr gByteArray.
         * @member {Uint8Array} gByteArray
         * @memberof Expr
         * @instance
         */
        Expr.prototype.gByteArray = $util.newBuffer([]);
    
        /**
         * Expr eNotBody.
         * @member {IENot|null|undefined} eNotBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eNotBody = null;
    
        /**
         * Expr eNegBody.
         * @member {IENeg|null|undefined} eNegBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eNegBody = null;
    
        /**
         * Expr eMultBody.
         * @member {IEMult|null|undefined} eMultBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eMultBody = null;
    
        /**
         * Expr eDivBody.
         * @member {IEDiv|null|undefined} eDivBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eDivBody = null;
    
        /**
         * Expr ePlusBody.
         * @member {IEPlus|null|undefined} ePlusBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.ePlusBody = null;
    
        /**
         * Expr eMinusBody.
         * @member {IEMinus|null|undefined} eMinusBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eMinusBody = null;
    
        /**
         * Expr eLtBody.
         * @member {IELt|null|undefined} eLtBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eLtBody = null;
    
        /**
         * Expr eLteBody.
         * @member {IELte|null|undefined} eLteBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eLteBody = null;
    
        /**
         * Expr eGtBody.
         * @member {IEGt|null|undefined} eGtBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eGtBody = null;
    
        /**
         * Expr eGteBody.
         * @member {IEGte|null|undefined} eGteBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eGteBody = null;
    
        /**
         * Expr eEqBody.
         * @member {IEEq|null|undefined} eEqBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eEqBody = null;
    
        /**
         * Expr eNeqBody.
         * @member {IENeq|null|undefined} eNeqBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eNeqBody = null;
    
        /**
         * Expr eAndBody.
         * @member {IEAnd|null|undefined} eAndBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eAndBody = null;
    
        /**
         * Expr eOrBody.
         * @member {IEOr|null|undefined} eOrBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eOrBody = null;
    
        /**
         * Expr eVarBody.
         * @member {IEVar|null|undefined} eVarBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eVarBody = null;
    
        /**
         * Expr eListBody.
         * @member {IEList|null|undefined} eListBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eListBody = null;
    
        /**
         * Expr eTupleBody.
         * @member {IETuple|null|undefined} eTupleBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eTupleBody = null;
    
        /**
         * Expr eSetBody.
         * @member {IESet|null|undefined} eSetBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eSetBody = null;
    
        /**
         * Expr eMapBody.
         * @member {IEMap|null|undefined} eMapBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eMapBody = null;
    
        /**
         * Expr eMethodBody.
         * @member {IEMethod|null|undefined} eMethodBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eMethodBody = null;
    
        /**
         * Expr eMatchesBody.
         * @member {IEMatches|null|undefined} eMatchesBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eMatchesBody = null;
    
        /**
         * Expr ePercentPercentBody.
         * @member {IEPercentPercent|null|undefined} ePercentPercentBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.ePercentPercentBody = null;
    
        /**
         * Expr ePlusPlusBody.
         * @member {IEPlusPlus|null|undefined} ePlusPlusBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.ePlusPlusBody = null;
    
        /**
         * Expr eMinusMinusBody.
         * @member {IEMinusMinus|null|undefined} eMinusMinusBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eMinusMinusBody = null;
    
        /**
         * Expr eModBody.
         * @member {IEMod|null|undefined} eModBody
         * @memberof Expr
         * @instance
         */
        Expr.prototype.eModBody = null;
    
        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;
    
        /**
         * Expr exprInstance.
         * @member {"gBool"|"gInt"|"gString"|"gUri"|"gByteArray"|"eNotBody"|"eNegBody"|"eMultBody"|"eDivBody"|"ePlusBody"|"eMinusBody"|"eLtBody"|"eLteBody"|"eGtBody"|"eGteBody"|"eEqBody"|"eNeqBody"|"eAndBody"|"eOrBody"|"eVarBody"|"eListBody"|"eTupleBody"|"eSetBody"|"eMapBody"|"eMethodBody"|"eMatchesBody"|"ePercentPercentBody"|"ePlusPlusBody"|"eMinusMinusBody"|"eModBody"|undefined} exprInstance
         * @memberof Expr
         * @instance
         */
        Object.defineProperty(Expr.prototype, "exprInstance", {
            get: $util.oneOfGetter($oneOfFields = ["gBool", "gInt", "gString", "gUri", "gByteArray", "eNotBody", "eNegBody", "eMultBody", "eDivBody", "ePlusBody", "eMinusBody", "eLtBody", "eLteBody", "eGtBody", "eGteBody", "eEqBody", "eNeqBody", "eAndBody", "eOrBody", "eVarBody", "eListBody", "eTupleBody", "eSetBody", "eMapBody", "eMethodBody", "eMatchesBody", "ePercentPercentBody", "ePlusPlusBody", "eMinusMinusBody", "eModBody"]),
            set: $util.oneOfSetter($oneOfFields)
        });
    
        /**
         * Creates a new Expr instance using the specified properties.
         * @function create
         * @memberof Expr
         * @static
         * @param {IExpr=} [properties] Properties to set
         * @returns {Expr} Expr instance
         */
        Expr.create = function create(properties) {
            return new Expr(properties);
        };
    
        /**
         * Encodes the specified Expr message. Does not implicitly {@link Expr.verify|verify} messages.
         * @function encode
         * @memberof Expr
         * @static
         * @param {IExpr} message Expr message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Expr.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gBool != null && message.hasOwnProperty("gBool"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.gBool);
            if (message.gInt != null && message.hasOwnProperty("gInt"))
                writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.gInt);
            if (message.gString != null && message.hasOwnProperty("gString"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.gString);
            if (message.gUri != null && message.hasOwnProperty("gUri"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.gUri);
            if (message.eNotBody != null && message.hasOwnProperty("eNotBody"))
                $root.ENot.encode(message.eNotBody, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.eNegBody != null && message.hasOwnProperty("eNegBody"))
                $root.ENeg.encode(message.eNegBody, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.eMultBody != null && message.hasOwnProperty("eMultBody"))
                $root.EMult.encode(message.eMultBody, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.eDivBody != null && message.hasOwnProperty("eDivBody"))
                $root.EDiv.encode(message.eDivBody, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.ePlusBody != null && message.hasOwnProperty("ePlusBody"))
                $root.EPlus.encode(message.ePlusBody, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.eMinusBody != null && message.hasOwnProperty("eMinusBody"))
                $root.EMinus.encode(message.eMinusBody, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.eLtBody != null && message.hasOwnProperty("eLtBody"))
                $root.ELt.encode(message.eLtBody, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.eLteBody != null && message.hasOwnProperty("eLteBody"))
                $root.ELte.encode(message.eLteBody, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.eGtBody != null && message.hasOwnProperty("eGtBody"))
                $root.EGt.encode(message.eGtBody, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.eGteBody != null && message.hasOwnProperty("eGteBody"))
                $root.EGte.encode(message.eGteBody, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.eEqBody != null && message.hasOwnProperty("eEqBody"))
                $root.EEq.encode(message.eEqBody, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            if (message.eNeqBody != null && message.hasOwnProperty("eNeqBody"))
                $root.ENeq.encode(message.eNeqBody, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            if (message.eAndBody != null && message.hasOwnProperty("eAndBody"))
                $root.EAnd.encode(message.eAndBody, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
            if (message.eOrBody != null && message.hasOwnProperty("eOrBody"))
                $root.EOr.encode(message.eOrBody, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
            if (message.eVarBody != null && message.hasOwnProperty("eVarBody"))
                $root.EVar.encode(message.eVarBody, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
            if (message.eListBody != null && message.hasOwnProperty("eListBody"))
                $root.EList.encode(message.eListBody, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
            if (message.eTupleBody != null && message.hasOwnProperty("eTupleBody"))
                $root.ETuple.encode(message.eTupleBody, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
            if (message.eSetBody != null && message.hasOwnProperty("eSetBody"))
                $root.ESet.encode(message.eSetBody, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
            if (message.eMapBody != null && message.hasOwnProperty("eMapBody"))
                $root.EMap.encode(message.eMapBody, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
            if (message.eMethodBody != null && message.hasOwnProperty("eMethodBody"))
                $root.EMethod.encode(message.eMethodBody, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
            if (message.gByteArray != null && message.hasOwnProperty("gByteArray"))
                writer.uint32(/* id 25, wireType 2 =*/202).bytes(message.gByteArray);
            if (message.eMatchesBody != null && message.hasOwnProperty("eMatchesBody"))
                $root.EMatches.encode(message.eMatchesBody, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
            if (message.ePercentPercentBody != null && message.hasOwnProperty("ePercentPercentBody"))
                $root.EPercentPercent.encode(message.ePercentPercentBody, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
            if (message.ePlusPlusBody != null && message.hasOwnProperty("ePlusPlusBody"))
                $root.EPlusPlus.encode(message.ePlusPlusBody, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();
            if (message.eMinusMinusBody != null && message.hasOwnProperty("eMinusMinusBody"))
                $root.EMinusMinus.encode(message.eMinusMinusBody, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
            if (message.eModBody != null && message.hasOwnProperty("eModBody"))
                $root.EMod.encode(message.eModBody, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified Expr message, length delimited. Does not implicitly {@link Expr.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Expr
         * @static
         * @param {IExpr} message Expr message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Expr.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes an Expr message from the specified reader or buffer.
         * @function decode
         * @memberof Expr
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Expr} Expr
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Expr.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Expr();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gBool = reader.bool();
                    break;
                case 2:
                    message.gInt = reader.sint64();
                    break;
                case 3:
                    message.gString = reader.string();
                    break;
                case 4:
                    message.gUri = reader.string();
                    break;
                case 25:
                    message.gByteArray = reader.bytes();
                    break;
                case 5:
                    message.eNotBody = $root.ENot.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.eNegBody = $root.ENeg.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.eMultBody = $root.EMult.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.eDivBody = $root.EDiv.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.ePlusBody = $root.EPlus.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.eMinusBody = $root.EMinus.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.eLtBody = $root.ELt.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.eLteBody = $root.ELte.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.eGtBody = $root.EGt.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.eGteBody = $root.EGte.decode(reader, reader.uint32());
                    break;
                case 15:
                    message.eEqBody = $root.EEq.decode(reader, reader.uint32());
                    break;
                case 16:
                    message.eNeqBody = $root.ENeq.decode(reader, reader.uint32());
                    break;
                case 17:
                    message.eAndBody = $root.EAnd.decode(reader, reader.uint32());
                    break;
                case 18:
                    message.eOrBody = $root.EOr.decode(reader, reader.uint32());
                    break;
                case 19:
                    message.eVarBody = $root.EVar.decode(reader, reader.uint32());
                    break;
                case 20:
                    message.eListBody = $root.EList.decode(reader, reader.uint32());
                    break;
                case 21:
                    message.eTupleBody = $root.ETuple.decode(reader, reader.uint32());
                    break;
                case 22:
                    message.eSetBody = $root.ESet.decode(reader, reader.uint32());
                    break;
                case 23:
                    message.eMapBody = $root.EMap.decode(reader, reader.uint32());
                    break;
                case 24:
                    message.eMethodBody = $root.EMethod.decode(reader, reader.uint32());
                    break;
                case 27:
                    message.eMatchesBody = $root.EMatches.decode(reader, reader.uint32());
                    break;
                case 28:
                    message.ePercentPercentBody = $root.EPercentPercent.decode(reader, reader.uint32());
                    break;
                case 29:
                    message.ePlusPlusBody = $root.EPlusPlus.decode(reader, reader.uint32());
                    break;
                case 30:
                    message.eMinusMinusBody = $root.EMinusMinus.decode(reader, reader.uint32());
                    break;
                case 31:
                    message.eModBody = $root.EMod.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes an Expr message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Expr
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Expr} Expr
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Expr.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies an Expr message.
         * @function verify
         * @memberof Expr
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Expr.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.gBool != null && message.hasOwnProperty("gBool")) {
                properties.exprInstance = 1;
                if (typeof message.gBool !== "boolean")
                    return "gBool: boolean expected";
            }
            if (message.gInt != null && message.hasOwnProperty("gInt")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                if (!$util.isInteger(message.gInt) && !(message.gInt && $util.isInteger(message.gInt.low) && $util.isInteger(message.gInt.high)))
                    return "gInt: integer|Long expected";
            }
            if (message.gString != null && message.hasOwnProperty("gString")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                if (!$util.isString(message.gString))
                    return "gString: string expected";
            }
            if (message.gUri != null && message.hasOwnProperty("gUri")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                if (!$util.isString(message.gUri))
                    return "gUri: string expected";
            }
            if (message.gByteArray != null && message.hasOwnProperty("gByteArray")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                if (!(message.gByteArray && typeof message.gByteArray.length === "number" || $util.isString(message.gByteArray)))
                    return "gByteArray: buffer expected";
            }
            if (message.eNotBody != null && message.hasOwnProperty("eNotBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.ENot.verify(message.eNotBody);
                    if (error)
                        return "eNotBody." + error;
                }
            }
            if (message.eNegBody != null && message.hasOwnProperty("eNegBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.ENeg.verify(message.eNegBody);
                    if (error)
                        return "eNegBody." + error;
                }
            }
            if (message.eMultBody != null && message.hasOwnProperty("eMultBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EMult.verify(message.eMultBody);
                    if (error)
                        return "eMultBody." + error;
                }
            }
            if (message.eDivBody != null && message.hasOwnProperty("eDivBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EDiv.verify(message.eDivBody);
                    if (error)
                        return "eDivBody." + error;
                }
            }
            if (message.ePlusBody != null && message.hasOwnProperty("ePlusBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EPlus.verify(message.ePlusBody);
                    if (error)
                        return "ePlusBody." + error;
                }
            }
            if (message.eMinusBody != null && message.hasOwnProperty("eMinusBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EMinus.verify(message.eMinusBody);
                    if (error)
                        return "eMinusBody." + error;
                }
            }
            if (message.eLtBody != null && message.hasOwnProperty("eLtBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.ELt.verify(message.eLtBody);
                    if (error)
                        return "eLtBody." + error;
                }
            }
            if (message.eLteBody != null && message.hasOwnProperty("eLteBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.ELte.verify(message.eLteBody);
                    if (error)
                        return "eLteBody." + error;
                }
            }
            if (message.eGtBody != null && message.hasOwnProperty("eGtBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EGt.verify(message.eGtBody);
                    if (error)
                        return "eGtBody." + error;
                }
            }
            if (message.eGteBody != null && message.hasOwnProperty("eGteBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EGte.verify(message.eGteBody);
                    if (error)
                        return "eGteBody." + error;
                }
            }
            if (message.eEqBody != null && message.hasOwnProperty("eEqBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EEq.verify(message.eEqBody);
                    if (error)
                        return "eEqBody." + error;
                }
            }
            if (message.eNeqBody != null && message.hasOwnProperty("eNeqBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.ENeq.verify(message.eNeqBody);
                    if (error)
                        return "eNeqBody." + error;
                }
            }
            if (message.eAndBody != null && message.hasOwnProperty("eAndBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EAnd.verify(message.eAndBody);
                    if (error)
                        return "eAndBody." + error;
                }
            }
            if (message.eOrBody != null && message.hasOwnProperty("eOrBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EOr.verify(message.eOrBody);
                    if (error)
                        return "eOrBody." + error;
                }
            }
            if (message.eVarBody != null && message.hasOwnProperty("eVarBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EVar.verify(message.eVarBody);
                    if (error)
                        return "eVarBody." + error;
                }
            }
            if (message.eListBody != null && message.hasOwnProperty("eListBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EList.verify(message.eListBody);
                    if (error)
                        return "eListBody." + error;
                }
            }
            if (message.eTupleBody != null && message.hasOwnProperty("eTupleBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.ETuple.verify(message.eTupleBody);
                    if (error)
                        return "eTupleBody." + error;
                }
            }
            if (message.eSetBody != null && message.hasOwnProperty("eSetBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.ESet.verify(message.eSetBody);
                    if (error)
                        return "eSetBody." + error;
                }
            }
            if (message.eMapBody != null && message.hasOwnProperty("eMapBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EMap.verify(message.eMapBody);
                    if (error)
                        return "eMapBody." + error;
                }
            }
            if (message.eMethodBody != null && message.hasOwnProperty("eMethodBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EMethod.verify(message.eMethodBody);
                    if (error)
                        return "eMethodBody." + error;
                }
            }
            if (message.eMatchesBody != null && message.hasOwnProperty("eMatchesBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EMatches.verify(message.eMatchesBody);
                    if (error)
                        return "eMatchesBody." + error;
                }
            }
            if (message.ePercentPercentBody != null && message.hasOwnProperty("ePercentPercentBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EPercentPercent.verify(message.ePercentPercentBody);
                    if (error)
                        return "ePercentPercentBody." + error;
                }
            }
            if (message.ePlusPlusBody != null && message.hasOwnProperty("ePlusPlusBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EPlusPlus.verify(message.ePlusPlusBody);
                    if (error)
                        return "ePlusPlusBody." + error;
                }
            }
            if (message.eMinusMinusBody != null && message.hasOwnProperty("eMinusMinusBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EMinusMinus.verify(message.eMinusMinusBody);
                    if (error)
                        return "eMinusMinusBody." + error;
                }
            }
            if (message.eModBody != null && message.hasOwnProperty("eModBody")) {
                if (properties.exprInstance === 1)
                    return "exprInstance: multiple values";
                properties.exprInstance = 1;
                {
                    var error = $root.EMod.verify(message.eModBody);
                    if (error)
                        return "eModBody." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates an Expr message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Expr
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Expr} Expr
         */
        Expr.fromObject = function fromObject(object) {
            if (object instanceof $root.Expr)
                return object;
            var message = new $root.Expr();
            if (object.gBool != null)
                message.gBool = Boolean(object.gBool);
            if (object.gInt != null)
                if ($util.Long)
                    (message.gInt = $util.Long.fromValue(object.gInt)).unsigned = false;
                else if (typeof object.gInt === "string")
                    message.gInt = parseInt(object.gInt, 10);
                else if (typeof object.gInt === "number")
                    message.gInt = object.gInt;
                else if (typeof object.gInt === "object")
                    message.gInt = new $util.LongBits(object.gInt.low >>> 0, object.gInt.high >>> 0).toNumber();
            if (object.gString != null)
                message.gString = String(object.gString);
            if (object.gUri != null)
                message.gUri = String(object.gUri);
            if (object.gByteArray != null)
                if (typeof object.gByteArray === "string")
                    $util.base64.decode(object.gByteArray, message.gByteArray = $util.newBuffer($util.base64.length(object.gByteArray)), 0);
                else if (object.gByteArray.length)
                    message.gByteArray = object.gByteArray;
            if (object.eNotBody != null) {
                if (typeof object.eNotBody !== "object")
                    throw TypeError(".Expr.eNotBody: object expected");
                message.eNotBody = $root.ENot.fromObject(object.eNotBody);
            }
            if (object.eNegBody != null) {
                if (typeof object.eNegBody !== "object")
                    throw TypeError(".Expr.eNegBody: object expected");
                message.eNegBody = $root.ENeg.fromObject(object.eNegBody);
            }
            if (object.eMultBody != null) {
                if (typeof object.eMultBody !== "object")
                    throw TypeError(".Expr.eMultBody: object expected");
                message.eMultBody = $root.EMult.fromObject(object.eMultBody);
            }
            if (object.eDivBody != null) {
                if (typeof object.eDivBody !== "object")
                    throw TypeError(".Expr.eDivBody: object expected");
                message.eDivBody = $root.EDiv.fromObject(object.eDivBody);
            }
            if (object.ePlusBody != null) {
                if (typeof object.ePlusBody !== "object")
                    throw TypeError(".Expr.ePlusBody: object expected");
                message.ePlusBody = $root.EPlus.fromObject(object.ePlusBody);
            }
            if (object.eMinusBody != null) {
                if (typeof object.eMinusBody !== "object")
                    throw TypeError(".Expr.eMinusBody: object expected");
                message.eMinusBody = $root.EMinus.fromObject(object.eMinusBody);
            }
            if (object.eLtBody != null) {
                if (typeof object.eLtBody !== "object")
                    throw TypeError(".Expr.eLtBody: object expected");
                message.eLtBody = $root.ELt.fromObject(object.eLtBody);
            }
            if (object.eLteBody != null) {
                if (typeof object.eLteBody !== "object")
                    throw TypeError(".Expr.eLteBody: object expected");
                message.eLteBody = $root.ELte.fromObject(object.eLteBody);
            }
            if (object.eGtBody != null) {
                if (typeof object.eGtBody !== "object")
                    throw TypeError(".Expr.eGtBody: object expected");
                message.eGtBody = $root.EGt.fromObject(object.eGtBody);
            }
            if (object.eGteBody != null) {
                if (typeof object.eGteBody !== "object")
                    throw TypeError(".Expr.eGteBody: object expected");
                message.eGteBody = $root.EGte.fromObject(object.eGteBody);
            }
            if (object.eEqBody != null) {
                if (typeof object.eEqBody !== "object")
                    throw TypeError(".Expr.eEqBody: object expected");
                message.eEqBody = $root.EEq.fromObject(object.eEqBody);
            }
            if (object.eNeqBody != null) {
                if (typeof object.eNeqBody !== "object")
                    throw TypeError(".Expr.eNeqBody: object expected");
                message.eNeqBody = $root.ENeq.fromObject(object.eNeqBody);
            }
            if (object.eAndBody != null) {
                if (typeof object.eAndBody !== "object")
                    throw TypeError(".Expr.eAndBody: object expected");
                message.eAndBody = $root.EAnd.fromObject(object.eAndBody);
            }
            if (object.eOrBody != null) {
                if (typeof object.eOrBody !== "object")
                    throw TypeError(".Expr.eOrBody: object expected");
                message.eOrBody = $root.EOr.fromObject(object.eOrBody);
            }
            if (object.eVarBody != null) {
                if (typeof object.eVarBody !== "object")
                    throw TypeError(".Expr.eVarBody: object expected");
                message.eVarBody = $root.EVar.fromObject(object.eVarBody);
            }
            if (object.eListBody != null) {
                if (typeof object.eListBody !== "object")
                    throw TypeError(".Expr.eListBody: object expected");
                message.eListBody = $root.EList.fromObject(object.eListBody);
            }
            if (object.eTupleBody != null) {
                if (typeof object.eTupleBody !== "object")
                    throw TypeError(".Expr.eTupleBody: object expected");
                message.eTupleBody = $root.ETuple.fromObject(object.eTupleBody);
            }
            if (object.eSetBody != null) {
                if (typeof object.eSetBody !== "object")
                    throw TypeError(".Expr.eSetBody: object expected");
                message.eSetBody = $root.ESet.fromObject(object.eSetBody);
            }
            if (object.eMapBody != null) {
                if (typeof object.eMapBody !== "object")
                    throw TypeError(".Expr.eMapBody: object expected");
                message.eMapBody = $root.EMap.fromObject(object.eMapBody);
            }
            if (object.eMethodBody != null) {
                if (typeof object.eMethodBody !== "object")
                    throw TypeError(".Expr.eMethodBody: object expected");
                message.eMethodBody = $root.EMethod.fromObject(object.eMethodBody);
            }
            if (object.eMatchesBody != null) {
                if (typeof object.eMatchesBody !== "object")
                    throw TypeError(".Expr.eMatchesBody: object expected");
                message.eMatchesBody = $root.EMatches.fromObject(object.eMatchesBody);
            }
            if (object.ePercentPercentBody != null) {
                if (typeof object.ePercentPercentBody !== "object")
                    throw TypeError(".Expr.ePercentPercentBody: object expected");
                message.ePercentPercentBody = $root.EPercentPercent.fromObject(object.ePercentPercentBody);
            }
            if (object.ePlusPlusBody != null) {
                if (typeof object.ePlusPlusBody !== "object")
                    throw TypeError(".Expr.ePlusPlusBody: object expected");
                message.ePlusPlusBody = $root.EPlusPlus.fromObject(object.ePlusPlusBody);
            }
            if (object.eMinusMinusBody != null) {
                if (typeof object.eMinusMinusBody !== "object")
                    throw TypeError(".Expr.eMinusMinusBody: object expected");
                message.eMinusMinusBody = $root.EMinusMinus.fromObject(object.eMinusMinusBody);
            }
            if (object.eModBody != null) {
                if (typeof object.eModBody !== "object")
                    throw TypeError(".Expr.eModBody: object expected");
                message.eModBody = $root.EMod.fromObject(object.eModBody);
            }
            return message;
        };
    
        /**
         * Creates a plain object from an Expr message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Expr
         * @static
         * @param {Expr} message Expr
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Expr.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.gBool != null && message.hasOwnProperty("gBool")) {
                object.gBool = message.gBool;
                if (options.oneofs)
                    object.exprInstance = "gBool";
            }
            if (message.gInt != null && message.hasOwnProperty("gInt")) {
                if (typeof message.gInt === "number")
                    object.gInt = options.longs === String ? String(message.gInt) : message.gInt;
                else
                    object.gInt = options.longs === String ? $util.Long.prototype.toString.call(message.gInt) : options.longs === Number ? new $util.LongBits(message.gInt.low >>> 0, message.gInt.high >>> 0).toNumber() : message.gInt;
                if (options.oneofs)
                    object.exprInstance = "gInt";
            }
            if (message.gString != null && message.hasOwnProperty("gString")) {
                object.gString = message.gString;
                if (options.oneofs)
                    object.exprInstance = "gString";
            }
            if (message.gUri != null && message.hasOwnProperty("gUri")) {
                object.gUri = message.gUri;
                if (options.oneofs)
                    object.exprInstance = "gUri";
            }
            if (message.eNotBody != null && message.hasOwnProperty("eNotBody")) {
                object.eNotBody = $root.ENot.toObject(message.eNotBody, options);
                if (options.oneofs)
                    object.exprInstance = "eNotBody";
            }
            if (message.eNegBody != null && message.hasOwnProperty("eNegBody")) {
                object.eNegBody = $root.ENeg.toObject(message.eNegBody, options);
                if (options.oneofs)
                    object.exprInstance = "eNegBody";
            }
            if (message.eMultBody != null && message.hasOwnProperty("eMultBody")) {
                object.eMultBody = $root.EMult.toObject(message.eMultBody, options);
                if (options.oneofs)
                    object.exprInstance = "eMultBody";
            }
            if (message.eDivBody != null && message.hasOwnProperty("eDivBody")) {
                object.eDivBody = $root.EDiv.toObject(message.eDivBody, options);
                if (options.oneofs)
                    object.exprInstance = "eDivBody";
            }
            if (message.ePlusBody != null && message.hasOwnProperty("ePlusBody")) {
                object.ePlusBody = $root.EPlus.toObject(message.ePlusBody, options);
                if (options.oneofs)
                    object.exprInstance = "ePlusBody";
            }
            if (message.eMinusBody != null && message.hasOwnProperty("eMinusBody")) {
                object.eMinusBody = $root.EMinus.toObject(message.eMinusBody, options);
                if (options.oneofs)
                    object.exprInstance = "eMinusBody";
            }
            if (message.eLtBody != null && message.hasOwnProperty("eLtBody")) {
                object.eLtBody = $root.ELt.toObject(message.eLtBody, options);
                if (options.oneofs)
                    object.exprInstance = "eLtBody";
            }
            if (message.eLteBody != null && message.hasOwnProperty("eLteBody")) {
                object.eLteBody = $root.ELte.toObject(message.eLteBody, options);
                if (options.oneofs)
                    object.exprInstance = "eLteBody";
            }
            if (message.eGtBody != null && message.hasOwnProperty("eGtBody")) {
                object.eGtBody = $root.EGt.toObject(message.eGtBody, options);
                if (options.oneofs)
                    object.exprInstance = "eGtBody";
            }
            if (message.eGteBody != null && message.hasOwnProperty("eGteBody")) {
                object.eGteBody = $root.EGte.toObject(message.eGteBody, options);
                if (options.oneofs)
                    object.exprInstance = "eGteBody";
            }
            if (message.eEqBody != null && message.hasOwnProperty("eEqBody")) {
                object.eEqBody = $root.EEq.toObject(message.eEqBody, options);
                if (options.oneofs)
                    object.exprInstance = "eEqBody";
            }
            if (message.eNeqBody != null && message.hasOwnProperty("eNeqBody")) {
                object.eNeqBody = $root.ENeq.toObject(message.eNeqBody, options);
                if (options.oneofs)
                    object.exprInstance = "eNeqBody";
            }
            if (message.eAndBody != null && message.hasOwnProperty("eAndBody")) {
                object.eAndBody = $root.EAnd.toObject(message.eAndBody, options);
                if (options.oneofs)
                    object.exprInstance = "eAndBody";
            }
            if (message.eOrBody != null && message.hasOwnProperty("eOrBody")) {
                object.eOrBody = $root.EOr.toObject(message.eOrBody, options);
                if (options.oneofs)
                    object.exprInstance = "eOrBody";
            }
            if (message.eVarBody != null && message.hasOwnProperty("eVarBody")) {
                object.eVarBody = $root.EVar.toObject(message.eVarBody, options);
                if (options.oneofs)
                    object.exprInstance = "eVarBody";
            }
            if (message.eListBody != null && message.hasOwnProperty("eListBody")) {
                object.eListBody = $root.EList.toObject(message.eListBody, options);
                if (options.oneofs)
                    object.exprInstance = "eListBody";
            }
            if (message.eTupleBody != null && message.hasOwnProperty("eTupleBody")) {
                object.eTupleBody = $root.ETuple.toObject(message.eTupleBody, options);
                if (options.oneofs)
                    object.exprInstance = "eTupleBody";
            }
            if (message.eSetBody != null && message.hasOwnProperty("eSetBody")) {
                object.eSetBody = $root.ESet.toObject(message.eSetBody, options);
                if (options.oneofs)
                    object.exprInstance = "eSetBody";
            }
            if (message.eMapBody != null && message.hasOwnProperty("eMapBody")) {
                object.eMapBody = $root.EMap.toObject(message.eMapBody, options);
                if (options.oneofs)
                    object.exprInstance = "eMapBody";
            }
            if (message.eMethodBody != null && message.hasOwnProperty("eMethodBody")) {
                object.eMethodBody = $root.EMethod.toObject(message.eMethodBody, options);
                if (options.oneofs)
                    object.exprInstance = "eMethodBody";
            }
            if (message.gByteArray != null && message.hasOwnProperty("gByteArray")) {
                object.gByteArray = options.bytes === String ? $util.base64.encode(message.gByteArray, 0, message.gByteArray.length) : options.bytes === Array ? Array.prototype.slice.call(message.gByteArray) : message.gByteArray;
                if (options.oneofs)
                    object.exprInstance = "gByteArray";
            }
            if (message.eMatchesBody != null && message.hasOwnProperty("eMatchesBody")) {
                object.eMatchesBody = $root.EMatches.toObject(message.eMatchesBody, options);
                if (options.oneofs)
                    object.exprInstance = "eMatchesBody";
            }
            if (message.ePercentPercentBody != null && message.hasOwnProperty("ePercentPercentBody")) {
                object.ePercentPercentBody = $root.EPercentPercent.toObject(message.ePercentPercentBody, options);
                if (options.oneofs)
                    object.exprInstance = "ePercentPercentBody";
            }
            if (message.ePlusPlusBody != null && message.hasOwnProperty("ePlusPlusBody")) {
                object.ePlusPlusBody = $root.EPlusPlus.toObject(message.ePlusPlusBody, options);
                if (options.oneofs)
                    object.exprInstance = "ePlusPlusBody";
            }
            if (message.eMinusMinusBody != null && message.hasOwnProperty("eMinusMinusBody")) {
                object.eMinusMinusBody = $root.EMinusMinus.toObject(message.eMinusMinusBody, options);
                if (options.oneofs)
                    object.exprInstance = "eMinusMinusBody";
            }
            if (message.eModBody != null && message.hasOwnProperty("eModBody")) {
                object.eModBody = $root.EMod.toObject(message.eModBody, options);
                if (options.oneofs)
                    object.exprInstance = "eModBody";
            }
            return object;
        };
    
        /**
         * Converts this Expr to JSON.
         * @function toJSON
         * @memberof Expr
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Expr.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return Expr;
    })();
    
    $root.EList = (function() {
    
        /**
         * Properties of a EList.
         * @exports IEList
         * @interface IEList
         * @property {Array.<IPar>|null} [ps] EList ps
         * @property {Uint8Array|null} [locallyFree] EList locallyFree
         * @property {boolean|null} [connectiveUsed] EList connectiveUsed
         * @property {IVar|null} [remainder] EList remainder
         */
    
        /**
         * Constructs a new EList.
         * @exports EList
         * @classdesc Represents a EList.
         * @implements IEList
         * @constructor
         * @param {IEList=} [properties] Properties to set
         */
        function EList(properties) {
            this.ps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EList ps.
         * @member {Array.<IPar>} ps
         * @memberof EList
         * @instance
         */
        EList.prototype.ps = $util.emptyArray;
    
        /**
         * EList locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof EList
         * @instance
         */
        EList.prototype.locallyFree = $util.newBuffer([]);
    
        /**
         * EList connectiveUsed.
         * @member {boolean} connectiveUsed
         * @memberof EList
         * @instance
         */
        EList.prototype.connectiveUsed = false;
    
        /**
         * EList remainder.
         * @member {IVar|null|undefined} remainder
         * @memberof EList
         * @instance
         */
        EList.prototype.remainder = null;
    
        /**
         * Creates a new EList instance using the specified properties.
         * @function create
         * @memberof EList
         * @static
         * @param {IEList=} [properties] Properties to set
         * @returns {EList} EList instance
         */
        EList.create = function create(properties) {
            return new EList(properties);
        };
    
        /**
         * Encodes the specified EList message. Does not implicitly {@link EList.verify|verify} messages.
         * @function encode
         * @memberof EList
         * @static
         * @param {IEList} message EList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ps != null && message.ps.length)
                for (var i = 0; i < message.ps.length; ++i)
                    $root.Par.encode(message.ps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.locallyFree);
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.connectiveUsed);
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                $root.Var.encode(message.remainder, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EList message, length delimited. Does not implicitly {@link EList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EList
         * @static
         * @param {IEList} message EList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EList message from the specified reader or buffer.
         * @function decode
         * @memberof EList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EList} EList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ps && message.ps.length))
                        message.ps = [];
                    message.ps.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.locallyFree = reader.bytes();
                    break;
                case 4:
                    message.connectiveUsed = reader.bool();
                    break;
                case 5:
                    message.remainder = $root.Var.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EList} EList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EList message.
         * @function verify
         * @memberof EList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ps != null && message.hasOwnProperty("ps")) {
                if (!Array.isArray(message.ps))
                    return "ps: array expected";
                for (var i = 0; i < message.ps.length; ++i) {
                    var error = $root.Par.verify(message.ps[i]);
                    if (error)
                        return "ps." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                if (typeof message.connectiveUsed !== "boolean")
                    return "connectiveUsed: boolean expected";
            if (message.remainder != null && message.hasOwnProperty("remainder")) {
                var error = $root.Var.verify(message.remainder);
                if (error)
                    return "remainder." + error;
            }
            return null;
        };
    
        /**
         * Creates a EList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EList} EList
         */
        EList.fromObject = function fromObject(object) {
            if (object instanceof $root.EList)
                return object;
            var message = new $root.EList();
            if (object.ps) {
                if (!Array.isArray(object.ps))
                    throw TypeError(".EList.ps: array expected");
                message.ps = [];
                for (var i = 0; i < object.ps.length; ++i) {
                    if (typeof object.ps[i] !== "object")
                        throw TypeError(".EList.ps: object expected");
                    message.ps[i] = $root.Par.fromObject(object.ps[i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connectiveUsed != null)
                message.connectiveUsed = Boolean(object.connectiveUsed);
            if (object.remainder != null) {
                if (typeof object.remainder !== "object")
                    throw TypeError(".EList.remainder: object expected");
                message.remainder = $root.Var.fromObject(object.remainder);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EList
         * @static
         * @param {EList} message EList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ps = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connectiveUsed = false;
                object.remainder = null;
            }
            if (message.ps && message.ps.length) {
                object.ps = [];
                for (var j = 0; j < message.ps.length; ++j)
                    object.ps[j] = $root.Par.toObject(message.ps[j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                object.connectiveUsed = message.connectiveUsed;
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                object.remainder = $root.Var.toObject(message.remainder, options);
            return object;
        };
    
        /**
         * Converts this EList to JSON.
         * @function toJSON
         * @memberof EList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EList;
    })();
    
    $root.ETuple = (function() {
    
        /**
         * Properties of a ETuple.
         * @exports IETuple
         * @interface IETuple
         * @property {Array.<IPar>|null} [ps] ETuple ps
         * @property {Uint8Array|null} [locallyFree] ETuple locallyFree
         * @property {boolean|null} [connectiveUsed] ETuple connectiveUsed
         */
    
        /**
         * Constructs a new ETuple.
         * @exports ETuple
         * @classdesc Represents a ETuple.
         * @implements IETuple
         * @constructor
         * @param {IETuple=} [properties] Properties to set
         */
        function ETuple(properties) {
            this.ps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ETuple ps.
         * @member {Array.<IPar>} ps
         * @memberof ETuple
         * @instance
         */
        ETuple.prototype.ps = $util.emptyArray;
    
        /**
         * ETuple locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof ETuple
         * @instance
         */
        ETuple.prototype.locallyFree = $util.newBuffer([]);
    
        /**
         * ETuple connectiveUsed.
         * @member {boolean} connectiveUsed
         * @memberof ETuple
         * @instance
         */
        ETuple.prototype.connectiveUsed = false;
    
        /**
         * Creates a new ETuple instance using the specified properties.
         * @function create
         * @memberof ETuple
         * @static
         * @param {IETuple=} [properties] Properties to set
         * @returns {ETuple} ETuple instance
         */
        ETuple.create = function create(properties) {
            return new ETuple(properties);
        };
    
        /**
         * Encodes the specified ETuple message. Does not implicitly {@link ETuple.verify|verify} messages.
         * @function encode
         * @memberof ETuple
         * @static
         * @param {IETuple} message ETuple message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ETuple.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ps != null && message.ps.length)
                for (var i = 0; i < message.ps.length; ++i)
                    $root.Par.encode(message.ps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.locallyFree);
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.connectiveUsed);
            return writer;
        };
    
        /**
         * Encodes the specified ETuple message, length delimited. Does not implicitly {@link ETuple.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ETuple
         * @static
         * @param {IETuple} message ETuple message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ETuple.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ETuple message from the specified reader or buffer.
         * @function decode
         * @memberof ETuple
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ETuple} ETuple
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ETuple.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ETuple();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ps && message.ps.length))
                        message.ps = [];
                    message.ps.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.locallyFree = reader.bytes();
                    break;
                case 4:
                    message.connectiveUsed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ETuple message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ETuple
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ETuple} ETuple
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ETuple.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ETuple message.
         * @function verify
         * @memberof ETuple
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ETuple.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ps != null && message.hasOwnProperty("ps")) {
                if (!Array.isArray(message.ps))
                    return "ps: array expected";
                for (var i = 0; i < message.ps.length; ++i) {
                    var error = $root.Par.verify(message.ps[i]);
                    if (error)
                        return "ps." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                if (typeof message.connectiveUsed !== "boolean")
                    return "connectiveUsed: boolean expected";
            return null;
        };
    
        /**
         * Creates a ETuple message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ETuple
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ETuple} ETuple
         */
        ETuple.fromObject = function fromObject(object) {
            if (object instanceof $root.ETuple)
                return object;
            var message = new $root.ETuple();
            if (object.ps) {
                if (!Array.isArray(object.ps))
                    throw TypeError(".ETuple.ps: array expected");
                message.ps = [];
                for (var i = 0; i < object.ps.length; ++i) {
                    if (typeof object.ps[i] !== "object")
                        throw TypeError(".ETuple.ps: object expected");
                    message.ps[i] = $root.Par.fromObject(object.ps[i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connectiveUsed != null)
                message.connectiveUsed = Boolean(object.connectiveUsed);
            return message;
        };
    
        /**
         * Creates a plain object from a ETuple message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ETuple
         * @static
         * @param {ETuple} message ETuple
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ETuple.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ps = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connectiveUsed = false;
            }
            if (message.ps && message.ps.length) {
                object.ps = [];
                for (var j = 0; j < message.ps.length; ++j)
                    object.ps[j] = $root.Par.toObject(message.ps[j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                object.connectiveUsed = message.connectiveUsed;
            return object;
        };
    
        /**
         * Converts this ETuple to JSON.
         * @function toJSON
         * @memberof ETuple
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ETuple.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ETuple;
    })();
    
    $root.ESet = (function() {
    
        /**
         * Properties of a ESet.
         * @exports IESet
         * @interface IESet
         * @property {Array.<IPar>|null} [ps] ESet ps
         * @property {Uint8Array|null} [locallyFree] ESet locallyFree
         * @property {boolean|null} [connectiveUsed] ESet connectiveUsed
         * @property {IVar|null} [remainder] ESet remainder
         */
    
        /**
         * Constructs a new ESet.
         * @exports ESet
         * @classdesc Represents a ESet.
         * @implements IESet
         * @constructor
         * @param {IESet=} [properties] Properties to set
         */
        function ESet(properties) {
            this.ps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ESet ps.
         * @member {Array.<IPar>} ps
         * @memberof ESet
         * @instance
         */
        ESet.prototype.ps = $util.emptyArray;
    
        /**
         * ESet locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof ESet
         * @instance
         */
        ESet.prototype.locallyFree = $util.newBuffer([]);
    
        /**
         * ESet connectiveUsed.
         * @member {boolean} connectiveUsed
         * @memberof ESet
         * @instance
         */
        ESet.prototype.connectiveUsed = false;
    
        /**
         * ESet remainder.
         * @member {IVar|null|undefined} remainder
         * @memberof ESet
         * @instance
         */
        ESet.prototype.remainder = null;
    
        /**
         * Creates a new ESet instance using the specified properties.
         * @function create
         * @memberof ESet
         * @static
         * @param {IESet=} [properties] Properties to set
         * @returns {ESet} ESet instance
         */
        ESet.create = function create(properties) {
            return new ESet(properties);
        };
    
        /**
         * Encodes the specified ESet message. Does not implicitly {@link ESet.verify|verify} messages.
         * @function encode
         * @memberof ESet
         * @static
         * @param {IESet} message ESet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ps != null && message.ps.length)
                for (var i = 0; i < message.ps.length; ++i)
                    $root.Par.encode(message.ps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.locallyFree);
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.connectiveUsed);
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                $root.Var.encode(message.remainder, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified ESet message, length delimited. Does not implicitly {@link ESet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ESet
         * @static
         * @param {IESet} message ESet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ESet message from the specified reader or buffer.
         * @function decode
         * @memberof ESet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ESet} ESet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ESet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ps && message.ps.length))
                        message.ps = [];
                    message.ps.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.locallyFree = reader.bytes();
                    break;
                case 4:
                    message.connectiveUsed = reader.bool();
                    break;
                case 5:
                    message.remainder = $root.Var.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ESet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ESet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ESet} ESet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ESet message.
         * @function verify
         * @memberof ESet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ps != null && message.hasOwnProperty("ps")) {
                if (!Array.isArray(message.ps))
                    return "ps: array expected";
                for (var i = 0; i < message.ps.length; ++i) {
                    var error = $root.Par.verify(message.ps[i]);
                    if (error)
                        return "ps." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                if (typeof message.connectiveUsed !== "boolean")
                    return "connectiveUsed: boolean expected";
            if (message.remainder != null && message.hasOwnProperty("remainder")) {
                var error = $root.Var.verify(message.remainder);
                if (error)
                    return "remainder." + error;
            }
            return null;
        };
    
        /**
         * Creates a ESet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ESet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ESet} ESet
         */
        ESet.fromObject = function fromObject(object) {
            if (object instanceof $root.ESet)
                return object;
            var message = new $root.ESet();
            if (object.ps) {
                if (!Array.isArray(object.ps))
                    throw TypeError(".ESet.ps: array expected");
                message.ps = [];
                for (var i = 0; i < object.ps.length; ++i) {
                    if (typeof object.ps[i] !== "object")
                        throw TypeError(".ESet.ps: object expected");
                    message.ps[i] = $root.Par.fromObject(object.ps[i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connectiveUsed != null)
                message.connectiveUsed = Boolean(object.connectiveUsed);
            if (object.remainder != null) {
                if (typeof object.remainder !== "object")
                    throw TypeError(".ESet.remainder: object expected");
                message.remainder = $root.Var.fromObject(object.remainder);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a ESet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ESet
         * @static
         * @param {ESet} message ESet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ps = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connectiveUsed = false;
                object.remainder = null;
            }
            if (message.ps && message.ps.length) {
                object.ps = [];
                for (var j = 0; j < message.ps.length; ++j)
                    object.ps[j] = $root.Par.toObject(message.ps[j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                object.connectiveUsed = message.connectiveUsed;
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                object.remainder = $root.Var.toObject(message.remainder, options);
            return object;
        };
    
        /**
         * Converts this ESet to JSON.
         * @function toJSON
         * @memberof ESet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ESet;
    })();
    
    $root.EMap = (function() {
    
        /**
         * Properties of a EMap.
         * @exports IEMap
         * @interface IEMap
         * @property {Array.<IKeyValuePair>|null} [kvs] EMap kvs
         * @property {Uint8Array|null} [locallyFree] EMap locallyFree
         * @property {boolean|null} [connectiveUsed] EMap connectiveUsed
         * @property {IVar|null} [remainder] EMap remainder
         */
    
        /**
         * Constructs a new EMap.
         * @exports EMap
         * @classdesc Represents a EMap.
         * @implements IEMap
         * @constructor
         * @param {IEMap=} [properties] Properties to set
         */
        function EMap(properties) {
            this.kvs = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EMap kvs.
         * @member {Array.<IKeyValuePair>} kvs
         * @memberof EMap
         * @instance
         */
        EMap.prototype.kvs = $util.emptyArray;
    
        /**
         * EMap locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof EMap
         * @instance
         */
        EMap.prototype.locallyFree = $util.newBuffer([]);
    
        /**
         * EMap connectiveUsed.
         * @member {boolean} connectiveUsed
         * @memberof EMap
         * @instance
         */
        EMap.prototype.connectiveUsed = false;
    
        /**
         * EMap remainder.
         * @member {IVar|null|undefined} remainder
         * @memberof EMap
         * @instance
         */
        EMap.prototype.remainder = null;
    
        /**
         * Creates a new EMap instance using the specified properties.
         * @function create
         * @memberof EMap
         * @static
         * @param {IEMap=} [properties] Properties to set
         * @returns {EMap} EMap instance
         */
        EMap.create = function create(properties) {
            return new EMap(properties);
        };
    
        /**
         * Encodes the specified EMap message. Does not implicitly {@link EMap.verify|verify} messages.
         * @function encode
         * @memberof EMap
         * @static
         * @param {IEMap} message EMap message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMap.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.kvs != null && message.kvs.length)
                for (var i = 0; i < message.kvs.length; ++i)
                    $root.KeyValuePair.encode(message.kvs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.locallyFree);
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.connectiveUsed);
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                $root.Var.encode(message.remainder, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EMap message, length delimited. Does not implicitly {@link EMap.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMap
         * @static
         * @param {IEMap} message EMap message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMap.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EMap message from the specified reader or buffer.
         * @function decode
         * @memberof EMap
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMap} EMap
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMap.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMap();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.kvs && message.kvs.length))
                        message.kvs = [];
                    message.kvs.push($root.KeyValuePair.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.locallyFree = reader.bytes();
                    break;
                case 4:
                    message.connectiveUsed = reader.bool();
                    break;
                case 5:
                    message.remainder = $root.Var.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EMap message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMap
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMap} EMap
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMap.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EMap message.
         * @function verify
         * @memberof EMap
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMap.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.kvs != null && message.hasOwnProperty("kvs")) {
                if (!Array.isArray(message.kvs))
                    return "kvs: array expected";
                for (var i = 0; i < message.kvs.length; ++i) {
                    var error = $root.KeyValuePair.verify(message.kvs[i]);
                    if (error)
                        return "kvs." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                if (typeof message.connectiveUsed !== "boolean")
                    return "connectiveUsed: boolean expected";
            if (message.remainder != null && message.hasOwnProperty("remainder")) {
                var error = $root.Var.verify(message.remainder);
                if (error)
                    return "remainder." + error;
            }
            return null;
        };
    
        /**
         * Creates a EMap message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMap
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMap} EMap
         */
        EMap.fromObject = function fromObject(object) {
            if (object instanceof $root.EMap)
                return object;
            var message = new $root.EMap();
            if (object.kvs) {
                if (!Array.isArray(object.kvs))
                    throw TypeError(".EMap.kvs: array expected");
                message.kvs = [];
                for (var i = 0; i < object.kvs.length; ++i) {
                    if (typeof object.kvs[i] !== "object")
                        throw TypeError(".EMap.kvs: object expected");
                    message.kvs[i] = $root.KeyValuePair.fromObject(object.kvs[i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connectiveUsed != null)
                message.connectiveUsed = Boolean(object.connectiveUsed);
            if (object.remainder != null) {
                if (typeof object.remainder !== "object")
                    throw TypeError(".EMap.remainder: object expected");
                message.remainder = $root.Var.fromObject(object.remainder);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EMap message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMap
         * @static
         * @param {EMap} message EMap
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMap.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.kvs = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connectiveUsed = false;
                object.remainder = null;
            }
            if (message.kvs && message.kvs.length) {
                object.kvs = [];
                for (var j = 0; j < message.kvs.length; ++j)
                    object.kvs[j] = $root.KeyValuePair.toObject(message.kvs[j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                object.connectiveUsed = message.connectiveUsed;
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                object.remainder = $root.Var.toObject(message.remainder, options);
            return object;
        };
    
        /**
         * Converts this EMap to JSON.
         * @function toJSON
         * @memberof EMap
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMap.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EMap;
    })();
    
    $root.EMethod = (function() {
    
        /**
         * Properties of a EMethod.
         * @exports IEMethod
         * @interface IEMethod
         * @property {string|null} [methodName] EMethod methodName
         * @property {IPar|null} [target] EMethod target
         * @property {Array.<IPar>|null} ["arguments"] EMethod arguments
         * @property {Uint8Array|null} [locallyFree] EMethod locallyFree
         * @property {boolean|null} [connectiveUsed] EMethod connectiveUsed
         */
    
        /**
         * Constructs a new EMethod.
         * @exports EMethod
         * @classdesc `target.method(arguments)`
         * @implements IEMethod
         * @constructor
         * @param {IEMethod=} [properties] Properties to set
         */
        function EMethod(properties) {
            this["arguments"] = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EMethod methodName.
         * @member {string} methodName
         * @memberof EMethod
         * @instance
         */
        EMethod.prototype.methodName = "";
    
        /**
         * EMethod target.
         * @member {IPar|null|undefined} target
         * @memberof EMethod
         * @instance
         */
        EMethod.prototype.target = null;
    
        /**
         * EMethod arguments.
         * @member {Array.<IPar>} arguments
         * @memberof EMethod
         * @instance
         */
        EMethod.prototype["arguments"] = $util.emptyArray;
    
        /**
         * EMethod locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof EMethod
         * @instance
         */
        EMethod.prototype.locallyFree = $util.newBuffer([]);
    
        /**
         * EMethod connectiveUsed.
         * @member {boolean} connectiveUsed
         * @memberof EMethod
         * @instance
         */
        EMethod.prototype.connectiveUsed = false;
    
        /**
         * Creates a new EMethod instance using the specified properties.
         * @function create
         * @memberof EMethod
         * @static
         * @param {IEMethod=} [properties] Properties to set
         * @returns {EMethod} EMethod instance
         */
        EMethod.create = function create(properties) {
            return new EMethod(properties);
        };
    
        /**
         * Encodes the specified EMethod message. Does not implicitly {@link EMethod.verify|verify} messages.
         * @function encode
         * @memberof EMethod
         * @static
         * @param {IEMethod} message EMethod message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMethod.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.methodName != null && message.hasOwnProperty("methodName"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.methodName);
            if (message.target != null && message.hasOwnProperty("target"))
                $root.Par.encode(message.target, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message["arguments"] != null && message["arguments"].length)
                for (var i = 0; i < message["arguments"].length; ++i)
                    $root.Par.encode(message["arguments"][i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.locallyFree);
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.connectiveUsed);
            return writer;
        };
    
        /**
         * Encodes the specified EMethod message, length delimited. Does not implicitly {@link EMethod.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMethod
         * @static
         * @param {IEMethod} message EMethod message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMethod.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EMethod message from the specified reader or buffer.
         * @function decode
         * @memberof EMethod
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMethod} EMethod
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMethod.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMethod();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.methodName = reader.string();
                    break;
                case 2:
                    message.target = $root.Par.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message["arguments"] && message["arguments"].length))
                        message["arguments"] = [];
                    message["arguments"].push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.locallyFree = reader.bytes();
                    break;
                case 6:
                    message.connectiveUsed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EMethod message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMethod
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMethod} EMethod
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMethod.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EMethod message.
         * @function verify
         * @memberof EMethod
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMethod.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.methodName != null && message.hasOwnProperty("methodName"))
                if (!$util.isString(message.methodName))
                    return "methodName: string expected";
            if (message.target != null && message.hasOwnProperty("target")) {
                var error = $root.Par.verify(message.target);
                if (error)
                    return "target." + error;
            }
            if (message["arguments"] != null && message.hasOwnProperty("arguments")) {
                if (!Array.isArray(message["arguments"]))
                    return "arguments: array expected";
                for (var i = 0; i < message["arguments"].length; ++i) {
                    var error = $root.Par.verify(message["arguments"][i]);
                    if (error)
                        return "arguments." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                if (typeof message.connectiveUsed !== "boolean")
                    return "connectiveUsed: boolean expected";
            return null;
        };
    
        /**
         * Creates a EMethod message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMethod
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMethod} EMethod
         */
        EMethod.fromObject = function fromObject(object) {
            if (object instanceof $root.EMethod)
                return object;
            var message = new $root.EMethod();
            if (object.methodName != null)
                message.methodName = String(object.methodName);
            if (object.target != null) {
                if (typeof object.target !== "object")
                    throw TypeError(".EMethod.target: object expected");
                message.target = $root.Par.fromObject(object.target);
            }
            if (object["arguments"]) {
                if (!Array.isArray(object["arguments"]))
                    throw TypeError(".EMethod.arguments: array expected");
                message["arguments"] = [];
                for (var i = 0; i < object["arguments"].length; ++i) {
                    if (typeof object["arguments"][i] !== "object")
                        throw TypeError(".EMethod.arguments: object expected");
                    message["arguments"][i] = $root.Par.fromObject(object["arguments"][i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connectiveUsed != null)
                message.connectiveUsed = Boolean(object.connectiveUsed);
            return message;
        };
    
        /**
         * Creates a plain object from a EMethod message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMethod
         * @static
         * @param {EMethod} message EMethod
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMethod.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object["arguments"] = [];
            if (options.defaults) {
                object.methodName = "";
                object.target = null;
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connectiveUsed = false;
            }
            if (message.methodName != null && message.hasOwnProperty("methodName"))
                object.methodName = message.methodName;
            if (message.target != null && message.hasOwnProperty("target"))
                object.target = $root.Par.toObject(message.target, options);
            if (message["arguments"] && message["arguments"].length) {
                object["arguments"] = [];
                for (var j = 0; j < message["arguments"].length; ++j)
                    object["arguments"][j] = $root.Par.toObject(message["arguments"][j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connectiveUsed != null && message.hasOwnProperty("connectiveUsed"))
                object.connectiveUsed = message.connectiveUsed;
            return object;
        };
    
        /**
         * Converts this EMethod to JSON.
         * @function toJSON
         * @memberof EMethod
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMethod.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EMethod;
    })();
    
    $root.KeyValuePair = (function() {
    
        /**
         * Properties of a KeyValuePair.
         * @exports IKeyValuePair
         * @interface IKeyValuePair
         * @property {IPar|null} [key] KeyValuePair key
         * @property {IPar|null} [value] KeyValuePair value
         */
    
        /**
         * Constructs a new KeyValuePair.
         * @exports KeyValuePair
         * @classdesc Represents a KeyValuePair.
         * @implements IKeyValuePair
         * @constructor
         * @param {IKeyValuePair=} [properties] Properties to set
         */
        function KeyValuePair(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * KeyValuePair key.
         * @member {IPar|null|undefined} key
         * @memberof KeyValuePair
         * @instance
         */
        KeyValuePair.prototype.key = null;
    
        /**
         * KeyValuePair value.
         * @member {IPar|null|undefined} value
         * @memberof KeyValuePair
         * @instance
         */
        KeyValuePair.prototype.value = null;
    
        /**
         * Creates a new KeyValuePair instance using the specified properties.
         * @function create
         * @memberof KeyValuePair
         * @static
         * @param {IKeyValuePair=} [properties] Properties to set
         * @returns {KeyValuePair} KeyValuePair instance
         */
        KeyValuePair.create = function create(properties) {
            return new KeyValuePair(properties);
        };
    
        /**
         * Encodes the specified KeyValuePair message. Does not implicitly {@link KeyValuePair.verify|verify} messages.
         * @function encode
         * @memberof KeyValuePair
         * @static
         * @param {IKeyValuePair} message KeyValuePair message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        KeyValuePair.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && message.hasOwnProperty("key"))
                $root.Par.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.value != null && message.hasOwnProperty("value"))
                $root.Par.encode(message.value, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified KeyValuePair message, length delimited. Does not implicitly {@link KeyValuePair.verify|verify} messages.
         * @function encodeDelimited
         * @memberof KeyValuePair
         * @static
         * @param {IKeyValuePair} message KeyValuePair message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        KeyValuePair.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a KeyValuePair message from the specified reader or buffer.
         * @function decode
         * @memberof KeyValuePair
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {KeyValuePair} KeyValuePair
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        KeyValuePair.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.KeyValuePair();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.value = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a KeyValuePair message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof KeyValuePair
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {KeyValuePair} KeyValuePair
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        KeyValuePair.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a KeyValuePair message.
         * @function verify
         * @memberof KeyValuePair
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        KeyValuePair.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key")) {
                var error = $root.Par.verify(message.key);
                if (error)
                    return "key." + error;
            }
            if (message.value != null && message.hasOwnProperty("value")) {
                var error = $root.Par.verify(message.value);
                if (error)
                    return "value." + error;
            }
            return null;
        };
    
        /**
         * Creates a KeyValuePair message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof KeyValuePair
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {KeyValuePair} KeyValuePair
         */
        KeyValuePair.fromObject = function fromObject(object) {
            if (object instanceof $root.KeyValuePair)
                return object;
            var message = new $root.KeyValuePair();
            if (object.key != null) {
                if (typeof object.key !== "object")
                    throw TypeError(".KeyValuePair.key: object expected");
                message.key = $root.Par.fromObject(object.key);
            }
            if (object.value != null) {
                if (typeof object.value !== "object")
                    throw TypeError(".KeyValuePair.value: object expected");
                message.value = $root.Par.fromObject(object.value);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a KeyValuePair message. Also converts values to other types if specified.
         * @function toObject
         * @memberof KeyValuePair
         * @static
         * @param {KeyValuePair} message KeyValuePair
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        KeyValuePair.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.key = null;
                object.value = null;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = $root.Par.toObject(message.key, options);
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = $root.Par.toObject(message.value, options);
            return object;
        };
    
        /**
         * Converts this KeyValuePair to JSON.
         * @function toJSON
         * @memberof KeyValuePair
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        KeyValuePair.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return KeyValuePair;
    })();
    
    $root.EVar = (function() {
    
        /**
         * Properties of a EVar.
         * @exports IEVar
         * @interface IEVar
         * @property {IVar|null} [v] EVar v
         */
    
        /**
         * Constructs a new EVar.
         * @exports EVar
         * @classdesc Represents a EVar.
         * @implements IEVar
         * @constructor
         * @param {IEVar=} [properties] Properties to set
         */
        function EVar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EVar v.
         * @member {IVar|null|undefined} v
         * @memberof EVar
         * @instance
         */
        EVar.prototype.v = null;
    
        /**
         * Creates a new EVar instance using the specified properties.
         * @function create
         * @memberof EVar
         * @static
         * @param {IEVar=} [properties] Properties to set
         * @returns {EVar} EVar instance
         */
        EVar.create = function create(properties) {
            return new EVar(properties);
        };
    
        /**
         * Encodes the specified EVar message. Does not implicitly {@link EVar.verify|verify} messages.
         * @function encode
         * @memberof EVar
         * @static
         * @param {IEVar} message EVar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EVar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.v != null && message.hasOwnProperty("v"))
                $root.Var.encode(message.v, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EVar message, length delimited. Does not implicitly {@link EVar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EVar
         * @static
         * @param {IEVar} message EVar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EVar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EVar message from the specified reader or buffer.
         * @function decode
         * @memberof EVar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EVar} EVar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EVar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EVar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.v = $root.Var.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EVar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EVar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EVar} EVar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EVar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EVar message.
         * @function verify
         * @memberof EVar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EVar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.v != null && message.hasOwnProperty("v")) {
                var error = $root.Var.verify(message.v);
                if (error)
                    return "v." + error;
            }
            return null;
        };
    
        /**
         * Creates a EVar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EVar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EVar} EVar
         */
        EVar.fromObject = function fromObject(object) {
            if (object instanceof $root.EVar)
                return object;
            var message = new $root.EVar();
            if (object.v != null) {
                if (typeof object.v !== "object")
                    throw TypeError(".EVar.v: object expected");
                message.v = $root.Var.fromObject(object.v);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EVar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EVar
         * @static
         * @param {EVar} message EVar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EVar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.v = null;
            if (message.v != null && message.hasOwnProperty("v"))
                object.v = $root.Var.toObject(message.v, options);
            return object;
        };
    
        /**
         * Converts this EVar to JSON.
         * @function toJSON
         * @memberof EVar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EVar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EVar;
    })();
    
    $root.ENot = (function() {
    
        /**
         * Properties of a ENot.
         * @exports IENot
         * @interface IENot
         * @property {IPar|null} [p] ENot p
         */
    
        /**
         * Constructs a new ENot.
         * @exports ENot
         * @classdesc Represents a ENot.
         * @implements IENot
         * @constructor
         * @param {IENot=} [properties] Properties to set
         */
        function ENot(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ENot p.
         * @member {IPar|null|undefined} p
         * @memberof ENot
         * @instance
         */
        ENot.prototype.p = null;
    
        /**
         * Creates a new ENot instance using the specified properties.
         * @function create
         * @memberof ENot
         * @static
         * @param {IENot=} [properties] Properties to set
         * @returns {ENot} ENot instance
         */
        ENot.create = function create(properties) {
            return new ENot(properties);
        };
    
        /**
         * Encodes the specified ENot message. Does not implicitly {@link ENot.verify|verify} messages.
         * @function encode
         * @memberof ENot
         * @static
         * @param {IENot} message ENot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENot.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p != null && message.hasOwnProperty("p"))
                $root.Par.encode(message.p, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified ENot message, length delimited. Does not implicitly {@link ENot.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ENot
         * @static
         * @param {IENot} message ENot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENot.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ENot message from the specified reader or buffer.
         * @function decode
         * @memberof ENot
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ENot} ENot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENot.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ENot();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ENot message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ENot
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ENot} ENot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENot.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ENot message.
         * @function verify
         * @memberof ENot
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENot.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p != null && message.hasOwnProperty("p")) {
                var error = $root.Par.verify(message.p);
                if (error)
                    return "p." + error;
            }
            return null;
        };
    
        /**
         * Creates a ENot message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ENot
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ENot} ENot
         */
        ENot.fromObject = function fromObject(object) {
            if (object instanceof $root.ENot)
                return object;
            var message = new $root.ENot();
            if (object.p != null) {
                if (typeof object.p !== "object")
                    throw TypeError(".ENot.p: object expected");
                message.p = $root.Par.fromObject(object.p);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a ENot message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ENot
         * @static
         * @param {ENot} message ENot
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENot.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.p = null;
            if (message.p != null && message.hasOwnProperty("p"))
                object.p = $root.Par.toObject(message.p, options);
            return object;
        };
    
        /**
         * Converts this ENot to JSON.
         * @function toJSON
         * @memberof ENot
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENot.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ENot;
    })();
    
    $root.ENeg = (function() {
    
        /**
         * Properties of a ENeg.
         * @exports IENeg
         * @interface IENeg
         * @property {IPar|null} [p] ENeg p
         */
    
        /**
         * Constructs a new ENeg.
         * @exports ENeg
         * @classdesc Represents a ENeg.
         * @implements IENeg
         * @constructor
         * @param {IENeg=} [properties] Properties to set
         */
        function ENeg(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ENeg p.
         * @member {IPar|null|undefined} p
         * @memberof ENeg
         * @instance
         */
        ENeg.prototype.p = null;
    
        /**
         * Creates a new ENeg instance using the specified properties.
         * @function create
         * @memberof ENeg
         * @static
         * @param {IENeg=} [properties] Properties to set
         * @returns {ENeg} ENeg instance
         */
        ENeg.create = function create(properties) {
            return new ENeg(properties);
        };
    
        /**
         * Encodes the specified ENeg message. Does not implicitly {@link ENeg.verify|verify} messages.
         * @function encode
         * @memberof ENeg
         * @static
         * @param {IENeg} message ENeg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENeg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p != null && message.hasOwnProperty("p"))
                $root.Par.encode(message.p, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified ENeg message, length delimited. Does not implicitly {@link ENeg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ENeg
         * @static
         * @param {IENeg} message ENeg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENeg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ENeg message from the specified reader or buffer.
         * @function decode
         * @memberof ENeg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ENeg} ENeg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENeg.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ENeg();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ENeg message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ENeg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ENeg} ENeg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENeg.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ENeg message.
         * @function verify
         * @memberof ENeg
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENeg.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p != null && message.hasOwnProperty("p")) {
                var error = $root.Par.verify(message.p);
                if (error)
                    return "p." + error;
            }
            return null;
        };
    
        /**
         * Creates a ENeg message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ENeg
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ENeg} ENeg
         */
        ENeg.fromObject = function fromObject(object) {
            if (object instanceof $root.ENeg)
                return object;
            var message = new $root.ENeg();
            if (object.p != null) {
                if (typeof object.p !== "object")
                    throw TypeError(".ENeg.p: object expected");
                message.p = $root.Par.fromObject(object.p);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a ENeg message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ENeg
         * @static
         * @param {ENeg} message ENeg
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENeg.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.p = null;
            if (message.p != null && message.hasOwnProperty("p"))
                object.p = $root.Par.toObject(message.p, options);
            return object;
        };
    
        /**
         * Converts this ENeg to JSON.
         * @function toJSON
         * @memberof ENeg
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENeg.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ENeg;
    })();
    
    $root.EMult = (function() {
    
        /**
         * Properties of a EMult.
         * @exports IEMult
         * @interface IEMult
         * @property {IPar|null} [p1] EMult p1
         * @property {IPar|null} [p2] EMult p2
         */
    
        /**
         * Constructs a new EMult.
         * @exports EMult
         * @classdesc Represents a EMult.
         * @implements IEMult
         * @constructor
         * @param {IEMult=} [properties] Properties to set
         */
        function EMult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EMult p1.
         * @member {IPar|null|undefined} p1
         * @memberof EMult
         * @instance
         */
        EMult.prototype.p1 = null;
    
        /**
         * EMult p2.
         * @member {IPar|null|undefined} p2
         * @memberof EMult
         * @instance
         */
        EMult.prototype.p2 = null;
    
        /**
         * Creates a new EMult instance using the specified properties.
         * @function create
         * @memberof EMult
         * @static
         * @param {IEMult=} [properties] Properties to set
         * @returns {EMult} EMult instance
         */
        EMult.create = function create(properties) {
            return new EMult(properties);
        };
    
        /**
         * Encodes the specified EMult message. Does not implicitly {@link EMult.verify|verify} messages.
         * @function encode
         * @memberof EMult
         * @static
         * @param {IEMult} message EMult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EMult message, length delimited. Does not implicitly {@link EMult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMult
         * @static
         * @param {IEMult} message EMult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EMult message from the specified reader or buffer.
         * @function decode
         * @memberof EMult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMult} EMult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EMult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMult} EMult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EMult message.
         * @function verify
         * @memberof EMult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EMult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMult} EMult
         */
        EMult.fromObject = function fromObject(object) {
            if (object instanceof $root.EMult)
                return object;
            var message = new $root.EMult();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EMult.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EMult.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EMult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMult
         * @static
         * @param {EMult} message EMult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EMult to JSON.
         * @function toJSON
         * @memberof EMult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EMult;
    })();
    
    $root.EDiv = (function() {
    
        /**
         * Properties of a EDiv.
         * @exports IEDiv
         * @interface IEDiv
         * @property {IPar|null} [p1] EDiv p1
         * @property {IPar|null} [p2] EDiv p2
         */
    
        /**
         * Constructs a new EDiv.
         * @exports EDiv
         * @classdesc Represents a EDiv.
         * @implements IEDiv
         * @constructor
         * @param {IEDiv=} [properties] Properties to set
         */
        function EDiv(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EDiv p1.
         * @member {IPar|null|undefined} p1
         * @memberof EDiv
         * @instance
         */
        EDiv.prototype.p1 = null;
    
        /**
         * EDiv p2.
         * @member {IPar|null|undefined} p2
         * @memberof EDiv
         * @instance
         */
        EDiv.prototype.p2 = null;
    
        /**
         * Creates a new EDiv instance using the specified properties.
         * @function create
         * @memberof EDiv
         * @static
         * @param {IEDiv=} [properties] Properties to set
         * @returns {EDiv} EDiv instance
         */
        EDiv.create = function create(properties) {
            return new EDiv(properties);
        };
    
        /**
         * Encodes the specified EDiv message. Does not implicitly {@link EDiv.verify|verify} messages.
         * @function encode
         * @memberof EDiv
         * @static
         * @param {IEDiv} message EDiv message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EDiv.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EDiv message, length delimited. Does not implicitly {@link EDiv.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EDiv
         * @static
         * @param {IEDiv} message EDiv message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EDiv.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EDiv message from the specified reader or buffer.
         * @function decode
         * @memberof EDiv
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EDiv} EDiv
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EDiv.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EDiv();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EDiv message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EDiv
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EDiv} EDiv
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EDiv.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EDiv message.
         * @function verify
         * @memberof EDiv
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EDiv.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EDiv message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EDiv
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EDiv} EDiv
         */
        EDiv.fromObject = function fromObject(object) {
            if (object instanceof $root.EDiv)
                return object;
            var message = new $root.EDiv();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EDiv.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EDiv.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EDiv message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EDiv
         * @static
         * @param {EDiv} message EDiv
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EDiv.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EDiv to JSON.
         * @function toJSON
         * @memberof EDiv
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EDiv.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EDiv;
    })();
    
    $root.EMod = (function() {
    
        /**
         * Properties of a EMod.
         * @exports IEMod
         * @interface IEMod
         * @property {IPar|null} [p1] EMod p1
         * @property {IPar|null} [p2] EMod p2
         */
    
        /**
         * Constructs a new EMod.
         * @exports EMod
         * @classdesc Represents a EMod.
         * @implements IEMod
         * @constructor
         * @param {IEMod=} [properties] Properties to set
         */
        function EMod(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EMod p1.
         * @member {IPar|null|undefined} p1
         * @memberof EMod
         * @instance
         */
        EMod.prototype.p1 = null;
    
        /**
         * EMod p2.
         * @member {IPar|null|undefined} p2
         * @memberof EMod
         * @instance
         */
        EMod.prototype.p2 = null;
    
        /**
         * Creates a new EMod instance using the specified properties.
         * @function create
         * @memberof EMod
         * @static
         * @param {IEMod=} [properties] Properties to set
         * @returns {EMod} EMod instance
         */
        EMod.create = function create(properties) {
            return new EMod(properties);
        };
    
        /**
         * Encodes the specified EMod message. Does not implicitly {@link EMod.verify|verify} messages.
         * @function encode
         * @memberof EMod
         * @static
         * @param {IEMod} message EMod message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMod.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EMod message, length delimited. Does not implicitly {@link EMod.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMod
         * @static
         * @param {IEMod} message EMod message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMod.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EMod message from the specified reader or buffer.
         * @function decode
         * @memberof EMod
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMod} EMod
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMod.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMod();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EMod message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMod
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMod} EMod
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMod.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EMod message.
         * @function verify
         * @memberof EMod
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMod.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EMod message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMod
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMod} EMod
         */
        EMod.fromObject = function fromObject(object) {
            if (object instanceof $root.EMod)
                return object;
            var message = new $root.EMod();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EMod.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EMod.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EMod message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMod
         * @static
         * @param {EMod} message EMod
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMod.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EMod to JSON.
         * @function toJSON
         * @memberof EMod
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMod.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EMod;
    })();
    
    $root.EPlus = (function() {
    
        /**
         * Properties of a EPlus.
         * @exports IEPlus
         * @interface IEPlus
         * @property {IPar|null} [p1] EPlus p1
         * @property {IPar|null} [p2] EPlus p2
         */
    
        /**
         * Constructs a new EPlus.
         * @exports EPlus
         * @classdesc Represents a EPlus.
         * @implements IEPlus
         * @constructor
         * @param {IEPlus=} [properties] Properties to set
         */
        function EPlus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EPlus p1.
         * @member {IPar|null|undefined} p1
         * @memberof EPlus
         * @instance
         */
        EPlus.prototype.p1 = null;
    
        /**
         * EPlus p2.
         * @member {IPar|null|undefined} p2
         * @memberof EPlus
         * @instance
         */
        EPlus.prototype.p2 = null;
    
        /**
         * Creates a new EPlus instance using the specified properties.
         * @function create
         * @memberof EPlus
         * @static
         * @param {IEPlus=} [properties] Properties to set
         * @returns {EPlus} EPlus instance
         */
        EPlus.create = function create(properties) {
            return new EPlus(properties);
        };
    
        /**
         * Encodes the specified EPlus message. Does not implicitly {@link EPlus.verify|verify} messages.
         * @function encode
         * @memberof EPlus
         * @static
         * @param {IEPlus} message EPlus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EPlus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EPlus message, length delimited. Does not implicitly {@link EPlus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EPlus
         * @static
         * @param {IEPlus} message EPlus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EPlus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EPlus message from the specified reader or buffer.
         * @function decode
         * @memberof EPlus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EPlus} EPlus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EPlus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EPlus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EPlus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EPlus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EPlus} EPlus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EPlus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EPlus message.
         * @function verify
         * @memberof EPlus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EPlus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EPlus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EPlus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EPlus} EPlus
         */
        EPlus.fromObject = function fromObject(object) {
            if (object instanceof $root.EPlus)
                return object;
            var message = new $root.EPlus();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EPlus.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EPlus.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EPlus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EPlus
         * @static
         * @param {EPlus} message EPlus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EPlus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EPlus to JSON.
         * @function toJSON
         * @memberof EPlus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EPlus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EPlus;
    })();
    
    $root.EMinus = (function() {
    
        /**
         * Properties of a EMinus.
         * @exports IEMinus
         * @interface IEMinus
         * @property {IPar|null} [p1] EMinus p1
         * @property {IPar|null} [p2] EMinus p2
         */
    
        /**
         * Constructs a new EMinus.
         * @exports EMinus
         * @classdesc Represents a EMinus.
         * @implements IEMinus
         * @constructor
         * @param {IEMinus=} [properties] Properties to set
         */
        function EMinus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EMinus p1.
         * @member {IPar|null|undefined} p1
         * @memberof EMinus
         * @instance
         */
        EMinus.prototype.p1 = null;
    
        /**
         * EMinus p2.
         * @member {IPar|null|undefined} p2
         * @memberof EMinus
         * @instance
         */
        EMinus.prototype.p2 = null;
    
        /**
         * Creates a new EMinus instance using the specified properties.
         * @function create
         * @memberof EMinus
         * @static
         * @param {IEMinus=} [properties] Properties to set
         * @returns {EMinus} EMinus instance
         */
        EMinus.create = function create(properties) {
            return new EMinus(properties);
        };
    
        /**
         * Encodes the specified EMinus message. Does not implicitly {@link EMinus.verify|verify} messages.
         * @function encode
         * @memberof EMinus
         * @static
         * @param {IEMinus} message EMinus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMinus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EMinus message, length delimited. Does not implicitly {@link EMinus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMinus
         * @static
         * @param {IEMinus} message EMinus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMinus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EMinus message from the specified reader or buffer.
         * @function decode
         * @memberof EMinus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMinus} EMinus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMinus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMinus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EMinus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMinus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMinus} EMinus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMinus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EMinus message.
         * @function verify
         * @memberof EMinus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMinus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EMinus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMinus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMinus} EMinus
         */
        EMinus.fromObject = function fromObject(object) {
            if (object instanceof $root.EMinus)
                return object;
            var message = new $root.EMinus();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EMinus.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EMinus.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EMinus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMinus
         * @static
         * @param {EMinus} message EMinus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMinus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EMinus to JSON.
         * @function toJSON
         * @memberof EMinus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMinus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EMinus;
    })();
    
    $root.ELt = (function() {
    
        /**
         * Properties of a ELt.
         * @exports IELt
         * @interface IELt
         * @property {IPar|null} [p1] ELt p1
         * @property {IPar|null} [p2] ELt p2
         */
    
        /**
         * Constructs a new ELt.
         * @exports ELt
         * @classdesc Represents a ELt.
         * @implements IELt
         * @constructor
         * @param {IELt=} [properties] Properties to set
         */
        function ELt(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ELt p1.
         * @member {IPar|null|undefined} p1
         * @memberof ELt
         * @instance
         */
        ELt.prototype.p1 = null;
    
        /**
         * ELt p2.
         * @member {IPar|null|undefined} p2
         * @memberof ELt
         * @instance
         */
        ELt.prototype.p2 = null;
    
        /**
         * Creates a new ELt instance using the specified properties.
         * @function create
         * @memberof ELt
         * @static
         * @param {IELt=} [properties] Properties to set
         * @returns {ELt} ELt instance
         */
        ELt.create = function create(properties) {
            return new ELt(properties);
        };
    
        /**
         * Encodes the specified ELt message. Does not implicitly {@link ELt.verify|verify} messages.
         * @function encode
         * @memberof ELt
         * @static
         * @param {IELt} message ELt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ELt.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified ELt message, length delimited. Does not implicitly {@link ELt.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ELt
         * @static
         * @param {IELt} message ELt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ELt.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ELt message from the specified reader or buffer.
         * @function decode
         * @memberof ELt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ELt} ELt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ELt.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ELt();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ELt message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ELt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ELt} ELt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ELt.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ELt message.
         * @function verify
         * @memberof ELt
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ELt.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a ELt message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ELt
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ELt} ELt
         */
        ELt.fromObject = function fromObject(object) {
            if (object instanceof $root.ELt)
                return object;
            var message = new $root.ELt();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".ELt.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".ELt.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a ELt message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ELt
         * @static
         * @param {ELt} message ELt
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ELt.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this ELt to JSON.
         * @function toJSON
         * @memberof ELt
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ELt.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ELt;
    })();
    
    $root.ELte = (function() {
    
        /**
         * Properties of a ELte.
         * @exports IELte
         * @interface IELte
         * @property {IPar|null} [p1] ELte p1
         * @property {IPar|null} [p2] ELte p2
         */
    
        /**
         * Constructs a new ELte.
         * @exports ELte
         * @classdesc Represents a ELte.
         * @implements IELte
         * @constructor
         * @param {IELte=} [properties] Properties to set
         */
        function ELte(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ELte p1.
         * @member {IPar|null|undefined} p1
         * @memberof ELte
         * @instance
         */
        ELte.prototype.p1 = null;
    
        /**
         * ELte p2.
         * @member {IPar|null|undefined} p2
         * @memberof ELte
         * @instance
         */
        ELte.prototype.p2 = null;
    
        /**
         * Creates a new ELte instance using the specified properties.
         * @function create
         * @memberof ELte
         * @static
         * @param {IELte=} [properties] Properties to set
         * @returns {ELte} ELte instance
         */
        ELte.create = function create(properties) {
            return new ELte(properties);
        };
    
        /**
         * Encodes the specified ELte message. Does not implicitly {@link ELte.verify|verify} messages.
         * @function encode
         * @memberof ELte
         * @static
         * @param {IELte} message ELte message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ELte.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified ELte message, length delimited. Does not implicitly {@link ELte.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ELte
         * @static
         * @param {IELte} message ELte message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ELte.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ELte message from the specified reader or buffer.
         * @function decode
         * @memberof ELte
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ELte} ELte
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ELte.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ELte();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ELte message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ELte
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ELte} ELte
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ELte.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ELte message.
         * @function verify
         * @memberof ELte
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ELte.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a ELte message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ELte
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ELte} ELte
         */
        ELte.fromObject = function fromObject(object) {
            if (object instanceof $root.ELte)
                return object;
            var message = new $root.ELte();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".ELte.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".ELte.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a ELte message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ELte
         * @static
         * @param {ELte} message ELte
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ELte.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this ELte to JSON.
         * @function toJSON
         * @memberof ELte
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ELte.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ELte;
    })();
    
    $root.EGt = (function() {
    
        /**
         * Properties of a EGt.
         * @exports IEGt
         * @interface IEGt
         * @property {IPar|null} [p1] EGt p1
         * @property {IPar|null} [p2] EGt p2
         */
    
        /**
         * Constructs a new EGt.
         * @exports EGt
         * @classdesc Represents a EGt.
         * @implements IEGt
         * @constructor
         * @param {IEGt=} [properties] Properties to set
         */
        function EGt(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EGt p1.
         * @member {IPar|null|undefined} p1
         * @memberof EGt
         * @instance
         */
        EGt.prototype.p1 = null;
    
        /**
         * EGt p2.
         * @member {IPar|null|undefined} p2
         * @memberof EGt
         * @instance
         */
        EGt.prototype.p2 = null;
    
        /**
         * Creates a new EGt instance using the specified properties.
         * @function create
         * @memberof EGt
         * @static
         * @param {IEGt=} [properties] Properties to set
         * @returns {EGt} EGt instance
         */
        EGt.create = function create(properties) {
            return new EGt(properties);
        };
    
        /**
         * Encodes the specified EGt message. Does not implicitly {@link EGt.verify|verify} messages.
         * @function encode
         * @memberof EGt
         * @static
         * @param {IEGt} message EGt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EGt.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EGt message, length delimited. Does not implicitly {@link EGt.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EGt
         * @static
         * @param {IEGt} message EGt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EGt.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EGt message from the specified reader or buffer.
         * @function decode
         * @memberof EGt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EGt} EGt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EGt.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EGt();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EGt message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EGt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EGt} EGt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EGt.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EGt message.
         * @function verify
         * @memberof EGt
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EGt.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EGt message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EGt
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EGt} EGt
         */
        EGt.fromObject = function fromObject(object) {
            if (object instanceof $root.EGt)
                return object;
            var message = new $root.EGt();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EGt.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EGt.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EGt message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EGt
         * @static
         * @param {EGt} message EGt
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EGt.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EGt to JSON.
         * @function toJSON
         * @memberof EGt
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EGt.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EGt;
    })();
    
    $root.EGte = (function() {
    
        /**
         * Properties of a EGte.
         * @exports IEGte
         * @interface IEGte
         * @property {IPar|null} [p1] EGte p1
         * @property {IPar|null} [p2] EGte p2
         */
    
        /**
         * Constructs a new EGte.
         * @exports EGte
         * @classdesc Represents a EGte.
         * @implements IEGte
         * @constructor
         * @param {IEGte=} [properties] Properties to set
         */
        function EGte(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EGte p1.
         * @member {IPar|null|undefined} p1
         * @memberof EGte
         * @instance
         */
        EGte.prototype.p1 = null;
    
        /**
         * EGte p2.
         * @member {IPar|null|undefined} p2
         * @memberof EGte
         * @instance
         */
        EGte.prototype.p2 = null;
    
        /**
         * Creates a new EGte instance using the specified properties.
         * @function create
         * @memberof EGte
         * @static
         * @param {IEGte=} [properties] Properties to set
         * @returns {EGte} EGte instance
         */
        EGte.create = function create(properties) {
            return new EGte(properties);
        };
    
        /**
         * Encodes the specified EGte message. Does not implicitly {@link EGte.verify|verify} messages.
         * @function encode
         * @memberof EGte
         * @static
         * @param {IEGte} message EGte message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EGte.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EGte message, length delimited. Does not implicitly {@link EGte.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EGte
         * @static
         * @param {IEGte} message EGte message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EGte.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EGte message from the specified reader or buffer.
         * @function decode
         * @memberof EGte
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EGte} EGte
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EGte.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EGte();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EGte message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EGte
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EGte} EGte
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EGte.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EGte message.
         * @function verify
         * @memberof EGte
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EGte.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EGte message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EGte
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EGte} EGte
         */
        EGte.fromObject = function fromObject(object) {
            if (object instanceof $root.EGte)
                return object;
            var message = new $root.EGte();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EGte.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EGte.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EGte message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EGte
         * @static
         * @param {EGte} message EGte
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EGte.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EGte to JSON.
         * @function toJSON
         * @memberof EGte
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EGte.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EGte;
    })();
    
    $root.EEq = (function() {
    
        /**
         * Properties of a EEq.
         * @exports IEEq
         * @interface IEEq
         * @property {IPar|null} [p1] EEq p1
         * @property {IPar|null} [p2] EEq p2
         */
    
        /**
         * Constructs a new EEq.
         * @exports EEq
         * @classdesc Represents a EEq.
         * @implements IEEq
         * @constructor
         * @param {IEEq=} [properties] Properties to set
         */
        function EEq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EEq p1.
         * @member {IPar|null|undefined} p1
         * @memberof EEq
         * @instance
         */
        EEq.prototype.p1 = null;
    
        /**
         * EEq p2.
         * @member {IPar|null|undefined} p2
         * @memberof EEq
         * @instance
         */
        EEq.prototype.p2 = null;
    
        /**
         * Creates a new EEq instance using the specified properties.
         * @function create
         * @memberof EEq
         * @static
         * @param {IEEq=} [properties] Properties to set
         * @returns {EEq} EEq instance
         */
        EEq.create = function create(properties) {
            return new EEq(properties);
        };
    
        /**
         * Encodes the specified EEq message. Does not implicitly {@link EEq.verify|verify} messages.
         * @function encode
         * @memberof EEq
         * @static
         * @param {IEEq} message EEq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EEq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EEq message, length delimited. Does not implicitly {@link EEq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EEq
         * @static
         * @param {IEEq} message EEq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EEq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EEq message from the specified reader or buffer.
         * @function decode
         * @memberof EEq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EEq} EEq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EEq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EEq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EEq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EEq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EEq} EEq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EEq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EEq message.
         * @function verify
         * @memberof EEq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EEq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EEq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EEq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EEq} EEq
         */
        EEq.fromObject = function fromObject(object) {
            if (object instanceof $root.EEq)
                return object;
            var message = new $root.EEq();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EEq.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EEq.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EEq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EEq
         * @static
         * @param {EEq} message EEq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EEq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EEq to JSON.
         * @function toJSON
         * @memberof EEq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EEq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EEq;
    })();
    
    $root.ENeq = (function() {
    
        /**
         * Properties of a ENeq.
         * @exports IENeq
         * @interface IENeq
         * @property {IPar|null} [p1] ENeq p1
         * @property {IPar|null} [p2] ENeq p2
         */
    
        /**
         * Constructs a new ENeq.
         * @exports ENeq
         * @classdesc Represents a ENeq.
         * @implements IENeq
         * @constructor
         * @param {IENeq=} [properties] Properties to set
         */
        function ENeq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ENeq p1.
         * @member {IPar|null|undefined} p1
         * @memberof ENeq
         * @instance
         */
        ENeq.prototype.p1 = null;
    
        /**
         * ENeq p2.
         * @member {IPar|null|undefined} p2
         * @memberof ENeq
         * @instance
         */
        ENeq.prototype.p2 = null;
    
        /**
         * Creates a new ENeq instance using the specified properties.
         * @function create
         * @memberof ENeq
         * @static
         * @param {IENeq=} [properties] Properties to set
         * @returns {ENeq} ENeq instance
         */
        ENeq.create = function create(properties) {
            return new ENeq(properties);
        };
    
        /**
         * Encodes the specified ENeq message. Does not implicitly {@link ENeq.verify|verify} messages.
         * @function encode
         * @memberof ENeq
         * @static
         * @param {IENeq} message ENeq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENeq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified ENeq message, length delimited. Does not implicitly {@link ENeq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ENeq
         * @static
         * @param {IENeq} message ENeq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENeq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ENeq message from the specified reader or buffer.
         * @function decode
         * @memberof ENeq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ENeq} ENeq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENeq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ENeq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ENeq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ENeq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ENeq} ENeq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENeq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ENeq message.
         * @function verify
         * @memberof ENeq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENeq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a ENeq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ENeq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ENeq} ENeq
         */
        ENeq.fromObject = function fromObject(object) {
            if (object instanceof $root.ENeq)
                return object;
            var message = new $root.ENeq();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".ENeq.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".ENeq.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a ENeq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ENeq
         * @static
         * @param {ENeq} message ENeq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENeq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this ENeq to JSON.
         * @function toJSON
         * @memberof ENeq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENeq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ENeq;
    })();
    
    $root.EAnd = (function() {
    
        /**
         * Properties of a EAnd.
         * @exports IEAnd
         * @interface IEAnd
         * @property {IPar|null} [p1] EAnd p1
         * @property {IPar|null} [p2] EAnd p2
         */
    
        /**
         * Constructs a new EAnd.
         * @exports EAnd
         * @classdesc Represents a EAnd.
         * @implements IEAnd
         * @constructor
         * @param {IEAnd=} [properties] Properties to set
         */
        function EAnd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EAnd p1.
         * @member {IPar|null|undefined} p1
         * @memberof EAnd
         * @instance
         */
        EAnd.prototype.p1 = null;
    
        /**
         * EAnd p2.
         * @member {IPar|null|undefined} p2
         * @memberof EAnd
         * @instance
         */
        EAnd.prototype.p2 = null;
    
        /**
         * Creates a new EAnd instance using the specified properties.
         * @function create
         * @memberof EAnd
         * @static
         * @param {IEAnd=} [properties] Properties to set
         * @returns {EAnd} EAnd instance
         */
        EAnd.create = function create(properties) {
            return new EAnd(properties);
        };
    
        /**
         * Encodes the specified EAnd message. Does not implicitly {@link EAnd.verify|verify} messages.
         * @function encode
         * @memberof EAnd
         * @static
         * @param {IEAnd} message EAnd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EAnd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EAnd message, length delimited. Does not implicitly {@link EAnd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EAnd
         * @static
         * @param {IEAnd} message EAnd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EAnd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EAnd message from the specified reader or buffer.
         * @function decode
         * @memberof EAnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EAnd} EAnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EAnd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EAnd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EAnd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EAnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EAnd} EAnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EAnd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EAnd message.
         * @function verify
         * @memberof EAnd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EAnd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EAnd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EAnd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EAnd} EAnd
         */
        EAnd.fromObject = function fromObject(object) {
            if (object instanceof $root.EAnd)
                return object;
            var message = new $root.EAnd();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EAnd.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EAnd.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EAnd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EAnd
         * @static
         * @param {EAnd} message EAnd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EAnd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EAnd to JSON.
         * @function toJSON
         * @memberof EAnd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EAnd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EAnd;
    })();
    
    $root.EOr = (function() {
    
        /**
         * Properties of a EOr.
         * @exports IEOr
         * @interface IEOr
         * @property {IPar|null} [p1] EOr p1
         * @property {IPar|null} [p2] EOr p2
         */
    
        /**
         * Constructs a new EOr.
         * @exports EOr
         * @classdesc Represents a EOr.
         * @implements IEOr
         * @constructor
         * @param {IEOr=} [properties] Properties to set
         */
        function EOr(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EOr p1.
         * @member {IPar|null|undefined} p1
         * @memberof EOr
         * @instance
         */
        EOr.prototype.p1 = null;
    
        /**
         * EOr p2.
         * @member {IPar|null|undefined} p2
         * @memberof EOr
         * @instance
         */
        EOr.prototype.p2 = null;
    
        /**
         * Creates a new EOr instance using the specified properties.
         * @function create
         * @memberof EOr
         * @static
         * @param {IEOr=} [properties] Properties to set
         * @returns {EOr} EOr instance
         */
        EOr.create = function create(properties) {
            return new EOr(properties);
        };
    
        /**
         * Encodes the specified EOr message. Does not implicitly {@link EOr.verify|verify} messages.
         * @function encode
         * @memberof EOr
         * @static
         * @param {IEOr} message EOr message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EOr.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EOr message, length delimited. Does not implicitly {@link EOr.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EOr
         * @static
         * @param {IEOr} message EOr message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EOr.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EOr message from the specified reader or buffer.
         * @function decode
         * @memberof EOr
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EOr} EOr
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EOr.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EOr();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EOr message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EOr
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EOr} EOr
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EOr.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EOr message.
         * @function verify
         * @memberof EOr
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EOr.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EOr message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EOr
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EOr} EOr
         */
        EOr.fromObject = function fromObject(object) {
            if (object instanceof $root.EOr)
                return object;
            var message = new $root.EOr();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EOr.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EOr.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EOr message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EOr
         * @static
         * @param {EOr} message EOr
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EOr.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EOr to JSON.
         * @function toJSON
         * @memberof EOr
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EOr.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EOr;
    })();
    
    $root.EMatches = (function() {
    
        /**
         * Properties of a EMatches.
         * @exports IEMatches
         * @interface IEMatches
         * @property {IPar|null} [target] EMatches target
         * @property {IPar|null} [pattern] EMatches pattern
         */
    
        /**
         * Constructs a new EMatches.
         * @exports EMatches
         * @classdesc Represents a EMatches.
         * @implements IEMatches
         * @constructor
         * @param {IEMatches=} [properties] Properties to set
         */
        function EMatches(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EMatches target.
         * @member {IPar|null|undefined} target
         * @memberof EMatches
         * @instance
         */
        EMatches.prototype.target = null;
    
        /**
         * EMatches pattern.
         * @member {IPar|null|undefined} pattern
         * @memberof EMatches
         * @instance
         */
        EMatches.prototype.pattern = null;
    
        /**
         * Creates a new EMatches instance using the specified properties.
         * @function create
         * @memberof EMatches
         * @static
         * @param {IEMatches=} [properties] Properties to set
         * @returns {EMatches} EMatches instance
         */
        EMatches.create = function create(properties) {
            return new EMatches(properties);
        };
    
        /**
         * Encodes the specified EMatches message. Does not implicitly {@link EMatches.verify|verify} messages.
         * @function encode
         * @memberof EMatches
         * @static
         * @param {IEMatches} message EMatches message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMatches.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.target != null && message.hasOwnProperty("target"))
                $root.Par.encode(message.target, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                $root.Par.encode(message.pattern, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EMatches message, length delimited. Does not implicitly {@link EMatches.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMatches
         * @static
         * @param {IEMatches} message EMatches message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMatches.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EMatches message from the specified reader or buffer.
         * @function decode
         * @memberof EMatches
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMatches} EMatches
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMatches.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMatches();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.target = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.pattern = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EMatches message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMatches
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMatches} EMatches
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMatches.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EMatches message.
         * @function verify
         * @memberof EMatches
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMatches.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.target != null && message.hasOwnProperty("target")) {
                var error = $root.Par.verify(message.target);
                if (error)
                    return "target." + error;
            }
            if (message.pattern != null && message.hasOwnProperty("pattern")) {
                var error = $root.Par.verify(message.pattern);
                if (error)
                    return "pattern." + error;
            }
            return null;
        };
    
        /**
         * Creates a EMatches message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMatches
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMatches} EMatches
         */
        EMatches.fromObject = function fromObject(object) {
            if (object instanceof $root.EMatches)
                return object;
            var message = new $root.EMatches();
            if (object.target != null) {
                if (typeof object.target !== "object")
                    throw TypeError(".EMatches.target: object expected");
                message.target = $root.Par.fromObject(object.target);
            }
            if (object.pattern != null) {
                if (typeof object.pattern !== "object")
                    throw TypeError(".EMatches.pattern: object expected");
                message.pattern = $root.Par.fromObject(object.pattern);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EMatches message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMatches
         * @static
         * @param {EMatches} message EMatches
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMatches.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.target = null;
                object.pattern = null;
            }
            if (message.target != null && message.hasOwnProperty("target"))
                object.target = $root.Par.toObject(message.target, options);
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                object.pattern = $root.Par.toObject(message.pattern, options);
            return object;
        };
    
        /**
         * Converts this EMatches to JSON.
         * @function toJSON
         * @memberof EMatches
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMatches.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EMatches;
    })();
    
    $root.EPercentPercent = (function() {
    
        /**
         * Properties of a EPercentPercent.
         * @exports IEPercentPercent
         * @interface IEPercentPercent
         * @property {IPar|null} [p1] EPercentPercent p1
         * @property {IPar|null} [p2] EPercentPercent p2
         */
    
        /**
         * Constructs a new EPercentPercent.
         * @exports EPercentPercent
         * @classdesc String interpolation
         * 
         * `"Hello, {name}" %% {"name": "Bob"}` denotes `"Hello, Bob"`
         * @implements IEPercentPercent
         * @constructor
         * @param {IEPercentPercent=} [properties] Properties to set
         */
        function EPercentPercent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EPercentPercent p1.
         * @member {IPar|null|undefined} p1
         * @memberof EPercentPercent
         * @instance
         */
        EPercentPercent.prototype.p1 = null;
    
        /**
         * EPercentPercent p2.
         * @member {IPar|null|undefined} p2
         * @memberof EPercentPercent
         * @instance
         */
        EPercentPercent.prototype.p2 = null;
    
        /**
         * Creates a new EPercentPercent instance using the specified properties.
         * @function create
         * @memberof EPercentPercent
         * @static
         * @param {IEPercentPercent=} [properties] Properties to set
         * @returns {EPercentPercent} EPercentPercent instance
         */
        EPercentPercent.create = function create(properties) {
            return new EPercentPercent(properties);
        };
    
        /**
         * Encodes the specified EPercentPercent message. Does not implicitly {@link EPercentPercent.verify|verify} messages.
         * @function encode
         * @memberof EPercentPercent
         * @static
         * @param {IEPercentPercent} message EPercentPercent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EPercentPercent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EPercentPercent message, length delimited. Does not implicitly {@link EPercentPercent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EPercentPercent
         * @static
         * @param {IEPercentPercent} message EPercentPercent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EPercentPercent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EPercentPercent message from the specified reader or buffer.
         * @function decode
         * @memberof EPercentPercent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EPercentPercent} EPercentPercent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EPercentPercent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EPercentPercent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EPercentPercent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EPercentPercent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EPercentPercent} EPercentPercent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EPercentPercent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EPercentPercent message.
         * @function verify
         * @memberof EPercentPercent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EPercentPercent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EPercentPercent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EPercentPercent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EPercentPercent} EPercentPercent
         */
        EPercentPercent.fromObject = function fromObject(object) {
            if (object instanceof $root.EPercentPercent)
                return object;
            var message = new $root.EPercentPercent();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EPercentPercent.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EPercentPercent.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EPercentPercent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EPercentPercent
         * @static
         * @param {EPercentPercent} message EPercentPercent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EPercentPercent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EPercentPercent to JSON.
         * @function toJSON
         * @memberof EPercentPercent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EPercentPercent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EPercentPercent;
    })();
    
    $root.EPlusPlus = (function() {
    
        /**
         * Properties of a EPlusPlus.
         * @exports IEPlusPlus
         * @interface IEPlusPlus
         * @property {IPar|null} [p1] EPlusPlus p1
         * @property {IPar|null} [p2] EPlusPlus p2
         */
    
        /**
         * Constructs a new EPlusPlus.
         * @exports EPlusPlus
         * @classdesc Represents a EPlusPlus.
         * @implements IEPlusPlus
         * @constructor
         * @param {IEPlusPlus=} [properties] Properties to set
         */
        function EPlusPlus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EPlusPlus p1.
         * @member {IPar|null|undefined} p1
         * @memberof EPlusPlus
         * @instance
         */
        EPlusPlus.prototype.p1 = null;
    
        /**
         * EPlusPlus p2.
         * @member {IPar|null|undefined} p2
         * @memberof EPlusPlus
         * @instance
         */
        EPlusPlus.prototype.p2 = null;
    
        /**
         * Creates a new EPlusPlus instance using the specified properties.
         * @function create
         * @memberof EPlusPlus
         * @static
         * @param {IEPlusPlus=} [properties] Properties to set
         * @returns {EPlusPlus} EPlusPlus instance
         */
        EPlusPlus.create = function create(properties) {
            return new EPlusPlus(properties);
        };
    
        /**
         * Encodes the specified EPlusPlus message. Does not implicitly {@link EPlusPlus.verify|verify} messages.
         * @function encode
         * @memberof EPlusPlus
         * @static
         * @param {IEPlusPlus} message EPlusPlus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EPlusPlus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EPlusPlus message, length delimited. Does not implicitly {@link EPlusPlus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EPlusPlus
         * @static
         * @param {IEPlusPlus} message EPlusPlus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EPlusPlus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EPlusPlus message from the specified reader or buffer.
         * @function decode
         * @memberof EPlusPlus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EPlusPlus} EPlusPlus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EPlusPlus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EPlusPlus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EPlusPlus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EPlusPlus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EPlusPlus} EPlusPlus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EPlusPlus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EPlusPlus message.
         * @function verify
         * @memberof EPlusPlus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EPlusPlus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EPlusPlus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EPlusPlus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EPlusPlus} EPlusPlus
         */
        EPlusPlus.fromObject = function fromObject(object) {
            if (object instanceof $root.EPlusPlus)
                return object;
            var message = new $root.EPlusPlus();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EPlusPlus.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EPlusPlus.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EPlusPlus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EPlusPlus
         * @static
         * @param {EPlusPlus} message EPlusPlus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EPlusPlus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EPlusPlus to JSON.
         * @function toJSON
         * @memberof EPlusPlus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EPlusPlus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EPlusPlus;
    })();
    
    $root.EMinusMinus = (function() {
    
        /**
         * Properties of a EMinusMinus.
         * @exports IEMinusMinus
         * @interface IEMinusMinus
         * @property {IPar|null} [p1] EMinusMinus p1
         * @property {IPar|null} [p2] EMinusMinus p2
         */
    
        /**
         * Constructs a new EMinusMinus.
         * @exports EMinusMinus
         * @classdesc Represents a EMinusMinus.
         * @implements IEMinusMinus
         * @constructor
         * @param {IEMinusMinus=} [properties] Properties to set
         */
        function EMinusMinus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * EMinusMinus p1.
         * @member {IPar|null|undefined} p1
         * @memberof EMinusMinus
         * @instance
         */
        EMinusMinus.prototype.p1 = null;
    
        /**
         * EMinusMinus p2.
         * @member {IPar|null|undefined} p2
         * @memberof EMinusMinus
         * @instance
         */
        EMinusMinus.prototype.p2 = null;
    
        /**
         * Creates a new EMinusMinus instance using the specified properties.
         * @function create
         * @memberof EMinusMinus
         * @static
         * @param {IEMinusMinus=} [properties] Properties to set
         * @returns {EMinusMinus} EMinusMinus instance
         */
        EMinusMinus.create = function create(properties) {
            return new EMinusMinus(properties);
        };
    
        /**
         * Encodes the specified EMinusMinus message. Does not implicitly {@link EMinusMinus.verify|verify} messages.
         * @function encode
         * @memberof EMinusMinus
         * @static
         * @param {IEMinusMinus} message EMinusMinus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMinusMinus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified EMinusMinus message, length delimited. Does not implicitly {@link EMinusMinus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMinusMinus
         * @static
         * @param {IEMinusMinus} message EMinusMinus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMinusMinus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a EMinusMinus message from the specified reader or buffer.
         * @function decode
         * @memberof EMinusMinus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMinusMinus} EMinusMinus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMinusMinus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMinusMinus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a EMinusMinus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMinusMinus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMinusMinus} EMinusMinus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMinusMinus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a EMinusMinus message.
         * @function verify
         * @memberof EMinusMinus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMinusMinus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };
    
        /**
         * Creates a EMinusMinus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMinusMinus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMinusMinus} EMinusMinus
         */
        EMinusMinus.fromObject = function fromObject(object) {
            if (object instanceof $root.EMinusMinus)
                return object;
            var message = new $root.EMinusMinus();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EMinusMinus.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EMinusMinus.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a EMinusMinus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMinusMinus
         * @static
         * @param {EMinusMinus} message EMinusMinus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMinusMinus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };
    
        /**
         * Converts this EMinusMinus to JSON.
         * @function toJSON
         * @memberof EMinusMinus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMinusMinus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return EMinusMinus;
    })();
    
    $root.Connective = (function() {
    
        /**
         * Properties of a Connective.
         * @exports IConnective
         * @interface IConnective
         * @property {IConnectiveBody|null} [connAndBody] Connective connAndBody
         * @property {IConnectiveBody|null} [connOrBody] Connective connOrBody
         * @property {IPar|null} [connNotBody] Connective connNotBody
         * @property {IVarRef|null} [varRefBody] Connective varRefBody
         * @property {boolean|null} [connBool] Connective connBool
         * @property {boolean|null} [connInt] Connective connInt
         * @property {boolean|null} [connString] Connective connString
         * @property {boolean|null} [connUri] Connective connUri
         * @property {boolean|null} [connByteArray] Connective connByteArray
         */
    
        /**
         * Constructs a new Connective.
         * @exports Connective
         * @classdesc Represents a Connective.
         * @implements IConnective
         * @constructor
         * @param {IConnective=} [properties] Properties to set
         */
        function Connective(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Connective connAndBody.
         * @member {IConnectiveBody|null|undefined} connAndBody
         * @memberof Connective
         * @instance
         */
        Connective.prototype.connAndBody = null;
    
        /**
         * Connective connOrBody.
         * @member {IConnectiveBody|null|undefined} connOrBody
         * @memberof Connective
         * @instance
         */
        Connective.prototype.connOrBody = null;
    
        /**
         * Connective connNotBody.
         * @member {IPar|null|undefined} connNotBody
         * @memberof Connective
         * @instance
         */
        Connective.prototype.connNotBody = null;
    
        /**
         * Connective varRefBody.
         * @member {IVarRef|null|undefined} varRefBody
         * @memberof Connective
         * @instance
         */
        Connective.prototype.varRefBody = null;
    
        /**
         * Connective connBool.
         * @member {boolean} connBool
         * @memberof Connective
         * @instance
         */
        Connective.prototype.connBool = false;
    
        /**
         * Connective connInt.
         * @member {boolean} connInt
         * @memberof Connective
         * @instance
         */
        Connective.prototype.connInt = false;
    
        /**
         * Connective connString.
         * @member {boolean} connString
         * @memberof Connective
         * @instance
         */
        Connective.prototype.connString = false;
    
        /**
         * Connective connUri.
         * @member {boolean} connUri
         * @memberof Connective
         * @instance
         */
        Connective.prototype.connUri = false;
    
        /**
         * Connective connByteArray.
         * @member {boolean} connByteArray
         * @memberof Connective
         * @instance
         */
        Connective.prototype.connByteArray = false;
    
        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;
    
        /**
         * Connective connectiveInstance.
         * @member {"connAndBody"|"connOrBody"|"connNotBody"|"varRefBody"|"connBool"|"connInt"|"connString"|"connUri"|"connByteArray"|undefined} connectiveInstance
         * @memberof Connective
         * @instance
         */
        Object.defineProperty(Connective.prototype, "connectiveInstance", {
            get: $util.oneOfGetter($oneOfFields = ["connAndBody", "connOrBody", "connNotBody", "varRefBody", "connBool", "connInt", "connString", "connUri", "connByteArray"]),
            set: $util.oneOfSetter($oneOfFields)
        });
    
        /**
         * Creates a new Connective instance using the specified properties.
         * @function create
         * @memberof Connective
         * @static
         * @param {IConnective=} [properties] Properties to set
         * @returns {Connective} Connective instance
         */
        Connective.create = function create(properties) {
            return new Connective(properties);
        };
    
        /**
         * Encodes the specified Connective message. Does not implicitly {@link Connective.verify|verify} messages.
         * @function encode
         * @memberof Connective
         * @static
         * @param {IConnective} message Connective message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Connective.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connAndBody != null && message.hasOwnProperty("connAndBody"))
                $root.ConnectiveBody.encode(message.connAndBody, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.connOrBody != null && message.hasOwnProperty("connOrBody"))
                $root.ConnectiveBody.encode(message.connOrBody, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.connNotBody != null && message.hasOwnProperty("connNotBody"))
                $root.Par.encode(message.connNotBody, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.varRefBody != null && message.hasOwnProperty("varRefBody"))
                $root.VarRef.encode(message.varRefBody, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.connBool != null && message.hasOwnProperty("connBool"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.connBool);
            if (message.connInt != null && message.hasOwnProperty("connInt"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.connInt);
            if (message.connString != null && message.hasOwnProperty("connString"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.connString);
            if (message.connUri != null && message.hasOwnProperty("connUri"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.connUri);
            if (message.connByteArray != null && message.hasOwnProperty("connByteArray"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.connByteArray);
            return writer;
        };
    
        /**
         * Encodes the specified Connective message, length delimited. Does not implicitly {@link Connective.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Connective
         * @static
         * @param {IConnective} message Connective message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Connective.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a Connective message from the specified reader or buffer.
         * @function decode
         * @memberof Connective
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Connective} Connective
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Connective.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Connective();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.connAndBody = $root.ConnectiveBody.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.connOrBody = $root.ConnectiveBody.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.connNotBody = $root.Par.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.varRefBody = $root.VarRef.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.connBool = reader.bool();
                    break;
                case 6:
                    message.connInt = reader.bool();
                    break;
                case 7:
                    message.connString = reader.bool();
                    break;
                case 8:
                    message.connUri = reader.bool();
                    break;
                case 9:
                    message.connByteArray = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a Connective message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Connective
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Connective} Connective
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Connective.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a Connective message.
         * @function verify
         * @memberof Connective
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Connective.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.connAndBody != null && message.hasOwnProperty("connAndBody")) {
                properties.connectiveInstance = 1;
                {
                    var error = $root.ConnectiveBody.verify(message.connAndBody);
                    if (error)
                        return "connAndBody." + error;
                }
            }
            if (message.connOrBody != null && message.hasOwnProperty("connOrBody")) {
                if (properties.connectiveInstance === 1)
                    return "connectiveInstance: multiple values";
                properties.connectiveInstance = 1;
                {
                    var error = $root.ConnectiveBody.verify(message.connOrBody);
                    if (error)
                        return "connOrBody." + error;
                }
            }
            if (message.connNotBody != null && message.hasOwnProperty("connNotBody")) {
                if (properties.connectiveInstance === 1)
                    return "connectiveInstance: multiple values";
                properties.connectiveInstance = 1;
                {
                    var error = $root.Par.verify(message.connNotBody);
                    if (error)
                        return "connNotBody." + error;
                }
            }
            if (message.varRefBody != null && message.hasOwnProperty("varRefBody")) {
                if (properties.connectiveInstance === 1)
                    return "connectiveInstance: multiple values";
                properties.connectiveInstance = 1;
                {
                    var error = $root.VarRef.verify(message.varRefBody);
                    if (error)
                        return "varRefBody." + error;
                }
            }
            if (message.connBool != null && message.hasOwnProperty("connBool")) {
                if (properties.connectiveInstance === 1)
                    return "connectiveInstance: multiple values";
                properties.connectiveInstance = 1;
                if (typeof message.connBool !== "boolean")
                    return "connBool: boolean expected";
            }
            if (message.connInt != null && message.hasOwnProperty("connInt")) {
                if (properties.connectiveInstance === 1)
                    return "connectiveInstance: multiple values";
                properties.connectiveInstance = 1;
                if (typeof message.connInt !== "boolean")
                    return "connInt: boolean expected";
            }
            if (message.connString != null && message.hasOwnProperty("connString")) {
                if (properties.connectiveInstance === 1)
                    return "connectiveInstance: multiple values";
                properties.connectiveInstance = 1;
                if (typeof message.connString !== "boolean")
                    return "connString: boolean expected";
            }
            if (message.connUri != null && message.hasOwnProperty("connUri")) {
                if (properties.connectiveInstance === 1)
                    return "connectiveInstance: multiple values";
                properties.connectiveInstance = 1;
                if (typeof message.connUri !== "boolean")
                    return "connUri: boolean expected";
            }
            if (message.connByteArray != null && message.hasOwnProperty("connByteArray")) {
                if (properties.connectiveInstance === 1)
                    return "connectiveInstance: multiple values";
                properties.connectiveInstance = 1;
                if (typeof message.connByteArray !== "boolean")
                    return "connByteArray: boolean expected";
            }
            return null;
        };
    
        /**
         * Creates a Connective message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Connective
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Connective} Connective
         */
        Connective.fromObject = function fromObject(object) {
            if (object instanceof $root.Connective)
                return object;
            var message = new $root.Connective();
            if (object.connAndBody != null) {
                if (typeof object.connAndBody !== "object")
                    throw TypeError(".Connective.connAndBody: object expected");
                message.connAndBody = $root.ConnectiveBody.fromObject(object.connAndBody);
            }
            if (object.connOrBody != null) {
                if (typeof object.connOrBody !== "object")
                    throw TypeError(".Connective.connOrBody: object expected");
                message.connOrBody = $root.ConnectiveBody.fromObject(object.connOrBody);
            }
            if (object.connNotBody != null) {
                if (typeof object.connNotBody !== "object")
                    throw TypeError(".Connective.connNotBody: object expected");
                message.connNotBody = $root.Par.fromObject(object.connNotBody);
            }
            if (object.varRefBody != null) {
                if (typeof object.varRefBody !== "object")
                    throw TypeError(".Connective.varRefBody: object expected");
                message.varRefBody = $root.VarRef.fromObject(object.varRefBody);
            }
            if (object.connBool != null)
                message.connBool = Boolean(object.connBool);
            if (object.connInt != null)
                message.connInt = Boolean(object.connInt);
            if (object.connString != null)
                message.connString = Boolean(object.connString);
            if (object.connUri != null)
                message.connUri = Boolean(object.connUri);
            if (object.connByteArray != null)
                message.connByteArray = Boolean(object.connByteArray);
            return message;
        };
    
        /**
         * Creates a plain object from a Connective message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Connective
         * @static
         * @param {Connective} message Connective
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Connective.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.connAndBody != null && message.hasOwnProperty("connAndBody")) {
                object.connAndBody = $root.ConnectiveBody.toObject(message.connAndBody, options);
                if (options.oneofs)
                    object.connectiveInstance = "connAndBody";
            }
            if (message.connOrBody != null && message.hasOwnProperty("connOrBody")) {
                object.connOrBody = $root.ConnectiveBody.toObject(message.connOrBody, options);
                if (options.oneofs)
                    object.connectiveInstance = "connOrBody";
            }
            if (message.connNotBody != null && message.hasOwnProperty("connNotBody")) {
                object.connNotBody = $root.Par.toObject(message.connNotBody, options);
                if (options.oneofs)
                    object.connectiveInstance = "connNotBody";
            }
            if (message.varRefBody != null && message.hasOwnProperty("varRefBody")) {
                object.varRefBody = $root.VarRef.toObject(message.varRefBody, options);
                if (options.oneofs)
                    object.connectiveInstance = "varRefBody";
            }
            if (message.connBool != null && message.hasOwnProperty("connBool")) {
                object.connBool = message.connBool;
                if (options.oneofs)
                    object.connectiveInstance = "connBool";
            }
            if (message.connInt != null && message.hasOwnProperty("connInt")) {
                object.connInt = message.connInt;
                if (options.oneofs)
                    object.connectiveInstance = "connInt";
            }
            if (message.connString != null && message.hasOwnProperty("connString")) {
                object.connString = message.connString;
                if (options.oneofs)
                    object.connectiveInstance = "connString";
            }
            if (message.connUri != null && message.hasOwnProperty("connUri")) {
                object.connUri = message.connUri;
                if (options.oneofs)
                    object.connectiveInstance = "connUri";
            }
            if (message.connByteArray != null && message.hasOwnProperty("connByteArray")) {
                object.connByteArray = message.connByteArray;
                if (options.oneofs)
                    object.connectiveInstance = "connByteArray";
            }
            return object;
        };
    
        /**
         * Converts this Connective to JSON.
         * @function toJSON
         * @memberof Connective
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Connective.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return Connective;
    })();
    
    $root.VarRef = (function() {
    
        /**
         * Properties of a VarRef.
         * @exports IVarRef
         * @interface IVarRef
         * @property {number|null} [index] VarRef index
         * @property {number|null} [depth] VarRef depth
         */
    
        /**
         * Constructs a new VarRef.
         * @exports VarRef
         * @classdesc Represents a VarRef.
         * @implements IVarRef
         * @constructor
         * @param {IVarRef=} [properties] Properties to set
         */
        function VarRef(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * VarRef index.
         * @member {number} index
         * @memberof VarRef
         * @instance
         */
        VarRef.prototype.index = 0;
    
        /**
         * VarRef depth.
         * @member {number} depth
         * @memberof VarRef
         * @instance
         */
        VarRef.prototype.depth = 0;
    
        /**
         * Creates a new VarRef instance using the specified properties.
         * @function create
         * @memberof VarRef
         * @static
         * @param {IVarRef=} [properties] Properties to set
         * @returns {VarRef} VarRef instance
         */
        VarRef.create = function create(properties) {
            return new VarRef(properties);
        };
    
        /**
         * Encodes the specified VarRef message. Does not implicitly {@link VarRef.verify|verify} messages.
         * @function encode
         * @memberof VarRef
         * @static
         * @param {IVarRef} message VarRef message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VarRef.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.index);
            if (message.depth != null && message.hasOwnProperty("depth"))
                writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.depth);
            return writer;
        };
    
        /**
         * Encodes the specified VarRef message, length delimited. Does not implicitly {@link VarRef.verify|verify} messages.
         * @function encodeDelimited
         * @memberof VarRef
         * @static
         * @param {IVarRef} message VarRef message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VarRef.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a VarRef message from the specified reader or buffer.
         * @function decode
         * @memberof VarRef
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {VarRef} VarRef
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VarRef.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VarRef();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.sint32();
                    break;
                case 2:
                    message.depth = reader.sint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a VarRef message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof VarRef
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {VarRef} VarRef
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VarRef.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a VarRef message.
         * @function verify
         * @memberof VarRef
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        VarRef.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.depth != null && message.hasOwnProperty("depth"))
                if (!$util.isInteger(message.depth))
                    return "depth: integer expected";
            return null;
        };
    
        /**
         * Creates a VarRef message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof VarRef
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {VarRef} VarRef
         */
        VarRef.fromObject = function fromObject(object) {
            if (object instanceof $root.VarRef)
                return object;
            var message = new $root.VarRef();
            if (object.index != null)
                message.index = object.index | 0;
            if (object.depth != null)
                message.depth = object.depth | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a VarRef message. Also converts values to other types if specified.
         * @function toObject
         * @memberof VarRef
         * @static
         * @param {VarRef} message VarRef
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        VarRef.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.index = 0;
                object.depth = 0;
            }
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.depth != null && message.hasOwnProperty("depth"))
                object.depth = message.depth;
            return object;
        };
    
        /**
         * Converts this VarRef to JSON.
         * @function toJSON
         * @memberof VarRef
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        VarRef.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return VarRef;
    })();
    
    $root.ConnectiveBody = (function() {
    
        /**
         * Properties of a ConnectiveBody.
         * @exports IConnectiveBody
         * @interface IConnectiveBody
         * @property {Array.<IPar>|null} [ps] ConnectiveBody ps
         */
    
        /**
         * Constructs a new ConnectiveBody.
         * @exports ConnectiveBody
         * @classdesc Represents a ConnectiveBody.
         * @implements IConnectiveBody
         * @constructor
         * @param {IConnectiveBody=} [properties] Properties to set
         */
        function ConnectiveBody(properties) {
            this.ps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ConnectiveBody ps.
         * @member {Array.<IPar>} ps
         * @memberof ConnectiveBody
         * @instance
         */
        ConnectiveBody.prototype.ps = $util.emptyArray;
    
        /**
         * Creates a new ConnectiveBody instance using the specified properties.
         * @function create
         * @memberof ConnectiveBody
         * @static
         * @param {IConnectiveBody=} [properties] Properties to set
         * @returns {ConnectiveBody} ConnectiveBody instance
         */
        ConnectiveBody.create = function create(properties) {
            return new ConnectiveBody(properties);
        };
    
        /**
         * Encodes the specified ConnectiveBody message. Does not implicitly {@link ConnectiveBody.verify|verify} messages.
         * @function encode
         * @memberof ConnectiveBody
         * @static
         * @param {IConnectiveBody} message ConnectiveBody message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ConnectiveBody.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ps != null && message.ps.length)
                for (var i = 0; i < message.ps.length; ++i)
                    $root.Par.encode(message.ps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified ConnectiveBody message, length delimited. Does not implicitly {@link ConnectiveBody.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ConnectiveBody
         * @static
         * @param {IConnectiveBody} message ConnectiveBody message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ConnectiveBody.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ConnectiveBody message from the specified reader or buffer.
         * @function decode
         * @memberof ConnectiveBody
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ConnectiveBody} ConnectiveBody
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ConnectiveBody.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ConnectiveBody();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ps && message.ps.length))
                        message.ps = [];
                    message.ps.push($root.Par.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ConnectiveBody message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ConnectiveBody
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ConnectiveBody} ConnectiveBody
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ConnectiveBody.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ConnectiveBody message.
         * @function verify
         * @memberof ConnectiveBody
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ConnectiveBody.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ps != null && message.hasOwnProperty("ps")) {
                if (!Array.isArray(message.ps))
                    return "ps: array expected";
                for (var i = 0; i < message.ps.length; ++i) {
                    var error = $root.Par.verify(message.ps[i]);
                    if (error)
                        return "ps." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a ConnectiveBody message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ConnectiveBody
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ConnectiveBody} ConnectiveBody
         */
        ConnectiveBody.fromObject = function fromObject(object) {
            if (object instanceof $root.ConnectiveBody)
                return object;
            var message = new $root.ConnectiveBody();
            if (object.ps) {
                if (!Array.isArray(object.ps))
                    throw TypeError(".ConnectiveBody.ps: array expected");
                message.ps = [];
                for (var i = 0; i < object.ps.length; ++i) {
                    if (typeof object.ps[i] !== "object")
                        throw TypeError(".ConnectiveBody.ps: object expected");
                    message.ps[i] = $root.Par.fromObject(object.ps[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a ConnectiveBody message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ConnectiveBody
         * @static
         * @param {ConnectiveBody} message ConnectiveBody
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ConnectiveBody.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ps = [];
            if (message.ps && message.ps.length) {
                object.ps = [];
                for (var j = 0; j < message.ps.length; ++j)
                    object.ps[j] = $root.Par.toObject(message.ps[j], options);
            }
            return object;
        };
    
        /**
         * Converts this ConnectiveBody to JSON.
         * @function toJSON
         * @memberof ConnectiveBody
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ConnectiveBody.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ConnectiveBody;
    })();
    
    $root.DeployId = (function() {
    
        /**
         * Properties of a DeployId.
         * @exports IDeployId
         * @interface IDeployId
         * @property {Uint8Array|null} [sig] DeployId sig
         */
    
        /**
         * Constructs a new DeployId.
         * @exports DeployId
         * @classdesc Represents a DeployId.
         * @implements IDeployId
         * @constructor
         * @param {IDeployId=} [properties] Properties to set
         */
        function DeployId(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * DeployId sig.
         * @member {Uint8Array} sig
         * @memberof DeployId
         * @instance
         */
        DeployId.prototype.sig = $util.newBuffer([]);
    
        /**
         * Creates a new DeployId instance using the specified properties.
         * @function create
         * @memberof DeployId
         * @static
         * @param {IDeployId=} [properties] Properties to set
         * @returns {DeployId} DeployId instance
         */
        DeployId.create = function create(properties) {
            return new DeployId(properties);
        };
    
        /**
         * Encodes the specified DeployId message. Does not implicitly {@link DeployId.verify|verify} messages.
         * @function encode
         * @memberof DeployId
         * @static
         * @param {IDeployId} message DeployId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeployId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sig != null && message.hasOwnProperty("sig"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.sig);
            return writer;
        };
    
        /**
         * Encodes the specified DeployId message, length delimited. Does not implicitly {@link DeployId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DeployId
         * @static
         * @param {IDeployId} message DeployId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeployId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a DeployId message from the specified reader or buffer.
         * @function decode
         * @memberof DeployId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DeployId} DeployId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeployId.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DeployId();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sig = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a DeployId message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DeployId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DeployId} DeployId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeployId.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a DeployId message.
         * @function verify
         * @memberof DeployId
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeployId.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sig != null && message.hasOwnProperty("sig"))
                if (!(message.sig && typeof message.sig.length === "number" || $util.isString(message.sig)))
                    return "sig: buffer expected";
            return null;
        };
    
        /**
         * Creates a DeployId message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DeployId
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DeployId} DeployId
         */
        DeployId.fromObject = function fromObject(object) {
            if (object instanceof $root.DeployId)
                return object;
            var message = new $root.DeployId();
            if (object.sig != null)
                if (typeof object.sig === "string")
                    $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);
                else if (object.sig.length)
                    message.sig = object.sig;
            return message;
        };
    
        /**
         * Creates a plain object from a DeployId message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DeployId
         * @static
         * @param {DeployId} message DeployId
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeployId.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.sig = "";
                else {
                    object.sig = [];
                    if (options.bytes !== Array)
                        object.sig = $util.newBuffer(object.sig);
                }
            if (message.sig != null && message.hasOwnProperty("sig"))
                object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;
            return object;
        };
    
        /**
         * Converts this DeployId to JSON.
         * @function toJSON
         * @memberof DeployId
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeployId.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return DeployId;
    })();
    
    $root.DeployerId = (function() {
    
        /**
         * Properties of a DeployerId.
         * @exports IDeployerId
         * @interface IDeployerId
         * @property {Uint8Array|null} [publicKey] DeployerId publicKey
         */
    
        /**
         * Constructs a new DeployerId.
         * @exports DeployerId
         * @classdesc Represents a DeployerId.
         * @implements IDeployerId
         * @constructor
         * @param {IDeployerId=} [properties] Properties to set
         */
        function DeployerId(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * DeployerId publicKey.
         * @member {Uint8Array} publicKey
         * @memberof DeployerId
         * @instance
         */
        DeployerId.prototype.publicKey = $util.newBuffer([]);
    
        /**
         * Creates a new DeployerId instance using the specified properties.
         * @function create
         * @memberof DeployerId
         * @static
         * @param {IDeployerId=} [properties] Properties to set
         * @returns {DeployerId} DeployerId instance
         */
        DeployerId.create = function create(properties) {
            return new DeployerId(properties);
        };
    
        /**
         * Encodes the specified DeployerId message. Does not implicitly {@link DeployerId.verify|verify} messages.
         * @function encode
         * @memberof DeployerId
         * @static
         * @param {IDeployerId} message DeployerId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeployerId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.publicKey);
            return writer;
        };
    
        /**
         * Encodes the specified DeployerId message, length delimited. Does not implicitly {@link DeployerId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DeployerId
         * @static
         * @param {IDeployerId} message DeployerId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeployerId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a DeployerId message from the specified reader or buffer.
         * @function decode
         * @memberof DeployerId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DeployerId} DeployerId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeployerId.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DeployerId();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.publicKey = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a DeployerId message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DeployerId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DeployerId} DeployerId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeployerId.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a DeployerId message.
         * @function verify
         * @memberof DeployerId
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeployerId.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                if (!(message.publicKey && typeof message.publicKey.length === "number" || $util.isString(message.publicKey)))
                    return "publicKey: buffer expected";
            return null;
        };
    
        /**
         * Creates a DeployerId message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DeployerId
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DeployerId} DeployerId
         */
        DeployerId.fromObject = function fromObject(object) {
            if (object instanceof $root.DeployerId)
                return object;
            var message = new $root.DeployerId();
            if (object.publicKey != null)
                if (typeof object.publicKey === "string")
                    $util.base64.decode(object.publicKey, message.publicKey = $util.newBuffer($util.base64.length(object.publicKey)), 0);
                else if (object.publicKey.length)
                    message.publicKey = object.publicKey;
            return message;
        };
    
        /**
         * Creates a plain object from a DeployerId message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DeployerId
         * @static
         * @param {DeployerId} message DeployerId
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeployerId.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.publicKey = "";
                else {
                    object.publicKey = [];
                    if (options.bytes !== Array)
                        object.publicKey = $util.newBuffer(object.publicKey);
                }
            if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                object.publicKey = options.bytes === String ? $util.base64.encode(message.publicKey, 0, message.publicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.publicKey) : message.publicKey;
            return object;
        };
    
        /**
         * Converts this DeployerId to JSON.
         * @function toJSON
         * @memberof DeployerId
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeployerId.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return DeployerId;
    })();
    
    $root.GUnforgeable = (function() {
    
        /**
         * Properties of a GUnforgeable.
         * @exports IGUnforgeable
         * @interface IGUnforgeable
         * @property {IGPrivate|null} [gPrivateBody] GUnforgeable gPrivateBody
         * @property {IGDeployId|null} [gDeployIdBody] GUnforgeable gDeployIdBody
         * @property {IGDeployerId|null} [gDeployerIdBody] GUnforgeable gDeployerIdBody
         */
    
        /**
         * Constructs a new GUnforgeable.
         * @exports GUnforgeable
         * @classdesc Represents a GUnforgeable.
         * @implements IGUnforgeable
         * @constructor
         * @param {IGUnforgeable=} [properties] Properties to set
         */
        function GUnforgeable(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * GUnforgeable gPrivateBody.
         * @member {IGPrivate|null|undefined} gPrivateBody
         * @memberof GUnforgeable
         * @instance
         */
        GUnforgeable.prototype.gPrivateBody = null;
    
        /**
         * GUnforgeable gDeployIdBody.
         * @member {IGDeployId|null|undefined} gDeployIdBody
         * @memberof GUnforgeable
         * @instance
         */
        GUnforgeable.prototype.gDeployIdBody = null;
    
        /**
         * GUnforgeable gDeployerIdBody.
         * @member {IGDeployerId|null|undefined} gDeployerIdBody
         * @memberof GUnforgeable
         * @instance
         */
        GUnforgeable.prototype.gDeployerIdBody = null;
    
        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;
    
        /**
         * GUnforgeable unfInstance.
         * @member {"gPrivateBody"|"gDeployIdBody"|"gDeployerIdBody"|undefined} unfInstance
         * @memberof GUnforgeable
         * @instance
         */
        Object.defineProperty(GUnforgeable.prototype, "unfInstance", {
            get: $util.oneOfGetter($oneOfFields = ["gPrivateBody", "gDeployIdBody", "gDeployerIdBody"]),
            set: $util.oneOfSetter($oneOfFields)
        });
    
        /**
         * Creates a new GUnforgeable instance using the specified properties.
         * @function create
         * @memberof GUnforgeable
         * @static
         * @param {IGUnforgeable=} [properties] Properties to set
         * @returns {GUnforgeable} GUnforgeable instance
         */
        GUnforgeable.create = function create(properties) {
            return new GUnforgeable(properties);
        };
    
        /**
         * Encodes the specified GUnforgeable message. Does not implicitly {@link GUnforgeable.verify|verify} messages.
         * @function encode
         * @memberof GUnforgeable
         * @static
         * @param {IGUnforgeable} message GUnforgeable message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GUnforgeable.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gPrivateBody != null && message.hasOwnProperty("gPrivateBody"))
                $root.GPrivate.encode(message.gPrivateBody, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.gDeployIdBody != null && message.hasOwnProperty("gDeployIdBody"))
                $root.GDeployId.encode(message.gDeployIdBody, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.gDeployerIdBody != null && message.hasOwnProperty("gDeployerIdBody"))
                $root.GDeployerId.encode(message.gDeployerIdBody, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified GUnforgeable message, length delimited. Does not implicitly {@link GUnforgeable.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GUnforgeable
         * @static
         * @param {IGUnforgeable} message GUnforgeable message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GUnforgeable.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a GUnforgeable message from the specified reader or buffer.
         * @function decode
         * @memberof GUnforgeable
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GUnforgeable} GUnforgeable
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GUnforgeable.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GUnforgeable();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gPrivateBody = $root.GPrivate.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.gDeployIdBody = $root.GDeployId.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.gDeployerIdBody = $root.GDeployerId.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a GUnforgeable message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GUnforgeable
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GUnforgeable} GUnforgeable
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GUnforgeable.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a GUnforgeable message.
         * @function verify
         * @memberof GUnforgeable
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GUnforgeable.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.gPrivateBody != null && message.hasOwnProperty("gPrivateBody")) {
                properties.unfInstance = 1;
                {
                    var error = $root.GPrivate.verify(message.gPrivateBody);
                    if (error)
                        return "gPrivateBody." + error;
                }
            }
            if (message.gDeployIdBody != null && message.hasOwnProperty("gDeployIdBody")) {
                if (properties.unfInstance === 1)
                    return "unfInstance: multiple values";
                properties.unfInstance = 1;
                {
                    var error = $root.GDeployId.verify(message.gDeployIdBody);
                    if (error)
                        return "gDeployIdBody." + error;
                }
            }
            if (message.gDeployerIdBody != null && message.hasOwnProperty("gDeployerIdBody")) {
                if (properties.unfInstance === 1)
                    return "unfInstance: multiple values";
                properties.unfInstance = 1;
                {
                    var error = $root.GDeployerId.verify(message.gDeployerIdBody);
                    if (error)
                        return "gDeployerIdBody." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a GUnforgeable message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GUnforgeable
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GUnforgeable} GUnforgeable
         */
        GUnforgeable.fromObject = function fromObject(object) {
            if (object instanceof $root.GUnforgeable)
                return object;
            var message = new $root.GUnforgeable();
            if (object.gPrivateBody != null) {
                if (typeof object.gPrivateBody !== "object")
                    throw TypeError(".GUnforgeable.gPrivateBody: object expected");
                message.gPrivateBody = $root.GPrivate.fromObject(object.gPrivateBody);
            }
            if (object.gDeployIdBody != null) {
                if (typeof object.gDeployIdBody !== "object")
                    throw TypeError(".GUnforgeable.gDeployIdBody: object expected");
                message.gDeployIdBody = $root.GDeployId.fromObject(object.gDeployIdBody);
            }
            if (object.gDeployerIdBody != null) {
                if (typeof object.gDeployerIdBody !== "object")
                    throw TypeError(".GUnforgeable.gDeployerIdBody: object expected");
                message.gDeployerIdBody = $root.GDeployerId.fromObject(object.gDeployerIdBody);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a GUnforgeable message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GUnforgeable
         * @static
         * @param {GUnforgeable} message GUnforgeable
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GUnforgeable.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.gPrivateBody != null && message.hasOwnProperty("gPrivateBody")) {
                object.gPrivateBody = $root.GPrivate.toObject(message.gPrivateBody, options);
                if (options.oneofs)
                    object.unfInstance = "gPrivateBody";
            }
            if (message.gDeployIdBody != null && message.hasOwnProperty("gDeployIdBody")) {
                object.gDeployIdBody = $root.GDeployId.toObject(message.gDeployIdBody, options);
                if (options.oneofs)
                    object.unfInstance = "gDeployIdBody";
            }
            if (message.gDeployerIdBody != null && message.hasOwnProperty("gDeployerIdBody")) {
                object.gDeployerIdBody = $root.GDeployerId.toObject(message.gDeployerIdBody, options);
                if (options.oneofs)
                    object.unfInstance = "gDeployerIdBody";
            }
            return object;
        };
    
        /**
         * Converts this GUnforgeable to JSON.
         * @function toJSON
         * @memberof GUnforgeable
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GUnforgeable.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return GUnforgeable;
    })();
    
    $root.GPrivate = (function() {
    
        /**
         * Properties of a GPrivate.
         * @exports IGPrivate
         * @interface IGPrivate
         * @property {Uint8Array|null} [id] GPrivate id
         */
    
        /**
         * Constructs a new GPrivate.
         * @exports GPrivate
         * @classdesc Represents a GPrivate.
         * @implements IGPrivate
         * @constructor
         * @param {IGPrivate=} [properties] Properties to set
         */
        function GPrivate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * GPrivate id.
         * @member {Uint8Array} id
         * @memberof GPrivate
         * @instance
         */
        GPrivate.prototype.id = $util.newBuffer([]);
    
        /**
         * Creates a new GPrivate instance using the specified properties.
         * @function create
         * @memberof GPrivate
         * @static
         * @param {IGPrivate=} [properties] Properties to set
         * @returns {GPrivate} GPrivate instance
         */
        GPrivate.create = function create(properties) {
            return new GPrivate(properties);
        };
    
        /**
         * Encodes the specified GPrivate message. Does not implicitly {@link GPrivate.verify|verify} messages.
         * @function encode
         * @memberof GPrivate
         * @static
         * @param {IGPrivate} message GPrivate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GPrivate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.id);
            return writer;
        };
    
        /**
         * Encodes the specified GPrivate message, length delimited. Does not implicitly {@link GPrivate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GPrivate
         * @static
         * @param {IGPrivate} message GPrivate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GPrivate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a GPrivate message from the specified reader or buffer.
         * @function decode
         * @memberof GPrivate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GPrivate} GPrivate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GPrivate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GPrivate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a GPrivate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GPrivate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GPrivate} GPrivate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GPrivate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a GPrivate message.
         * @function verify
         * @memberof GPrivate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GPrivate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!(message.id && typeof message.id.length === "number" || $util.isString(message.id)))
                    return "id: buffer expected";
            return null;
        };
    
        /**
         * Creates a GPrivate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GPrivate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GPrivate} GPrivate
         */
        GPrivate.fromObject = function fromObject(object) {
            if (object instanceof $root.GPrivate)
                return object;
            var message = new $root.GPrivate();
            if (object.id != null)
                if (typeof object.id === "string")
                    $util.base64.decode(object.id, message.id = $util.newBuffer($util.base64.length(object.id)), 0);
                else if (object.id.length)
                    message.id = object.id;
            return message;
        };
    
        /**
         * Creates a plain object from a GPrivate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GPrivate
         * @static
         * @param {GPrivate} message GPrivate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GPrivate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.id = "";
                else {
                    object.id = [];
                    if (options.bytes !== Array)
                        object.id = $util.newBuffer(object.id);
                }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = options.bytes === String ? $util.base64.encode(message.id, 0, message.id.length) : options.bytes === Array ? Array.prototype.slice.call(message.id) : message.id;
            return object;
        };
    
        /**
         * Converts this GPrivate to JSON.
         * @function toJSON
         * @memberof GPrivate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GPrivate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return GPrivate;
    })();
    
    $root.GDeployId = (function() {
    
        /**
         * Properties of a GDeployId.
         * @exports IGDeployId
         * @interface IGDeployId
         * @property {Uint8Array|null} [sig] GDeployId sig
         */
    
        /**
         * Constructs a new GDeployId.
         * @exports GDeployId
         * @classdesc Represents a GDeployId.
         * @implements IGDeployId
         * @constructor
         * @param {IGDeployId=} [properties] Properties to set
         */
        function GDeployId(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * GDeployId sig.
         * @member {Uint8Array} sig
         * @memberof GDeployId
         * @instance
         */
        GDeployId.prototype.sig = $util.newBuffer([]);
    
        /**
         * Creates a new GDeployId instance using the specified properties.
         * @function create
         * @memberof GDeployId
         * @static
         * @param {IGDeployId=} [properties] Properties to set
         * @returns {GDeployId} GDeployId instance
         */
        GDeployId.create = function create(properties) {
            return new GDeployId(properties);
        };
    
        /**
         * Encodes the specified GDeployId message. Does not implicitly {@link GDeployId.verify|verify} messages.
         * @function encode
         * @memberof GDeployId
         * @static
         * @param {IGDeployId} message GDeployId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GDeployId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sig != null && message.hasOwnProperty("sig"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.sig);
            return writer;
        };
    
        /**
         * Encodes the specified GDeployId message, length delimited. Does not implicitly {@link GDeployId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GDeployId
         * @static
         * @param {IGDeployId} message GDeployId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GDeployId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a GDeployId message from the specified reader or buffer.
         * @function decode
         * @memberof GDeployId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GDeployId} GDeployId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GDeployId.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GDeployId();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sig = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a GDeployId message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GDeployId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GDeployId} GDeployId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GDeployId.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a GDeployId message.
         * @function verify
         * @memberof GDeployId
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GDeployId.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sig != null && message.hasOwnProperty("sig"))
                if (!(message.sig && typeof message.sig.length === "number" || $util.isString(message.sig)))
                    return "sig: buffer expected";
            return null;
        };
    
        /**
         * Creates a GDeployId message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GDeployId
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GDeployId} GDeployId
         */
        GDeployId.fromObject = function fromObject(object) {
            if (object instanceof $root.GDeployId)
                return object;
            var message = new $root.GDeployId();
            if (object.sig != null)
                if (typeof object.sig === "string")
                    $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);
                else if (object.sig.length)
                    message.sig = object.sig;
            return message;
        };
    
        /**
         * Creates a plain object from a GDeployId message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GDeployId
         * @static
         * @param {GDeployId} message GDeployId
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GDeployId.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.sig = "";
                else {
                    object.sig = [];
                    if (options.bytes !== Array)
                        object.sig = $util.newBuffer(object.sig);
                }
            if (message.sig != null && message.hasOwnProperty("sig"))
                object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;
            return object;
        };
    
        /**
         * Converts this GDeployId to JSON.
         * @function toJSON
         * @memberof GDeployId
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GDeployId.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return GDeployId;
    })();
    
    $root.GDeployerId = (function() {
    
        /**
         * Properties of a GDeployerId.
         * @exports IGDeployerId
         * @interface IGDeployerId
         * @property {Uint8Array|null} [publicKey] GDeployerId publicKey
         */
    
        /**
         * Constructs a new GDeployerId.
         * @exports GDeployerId
         * @classdesc Represents a GDeployerId.
         * @implements IGDeployerId
         * @constructor
         * @param {IGDeployerId=} [properties] Properties to set
         */
        function GDeployerId(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * GDeployerId publicKey.
         * @member {Uint8Array} publicKey
         * @memberof GDeployerId
         * @instance
         */
        GDeployerId.prototype.publicKey = $util.newBuffer([]);
    
        /**
         * Creates a new GDeployerId instance using the specified properties.
         * @function create
         * @memberof GDeployerId
         * @static
         * @param {IGDeployerId=} [properties] Properties to set
         * @returns {GDeployerId} GDeployerId instance
         */
        GDeployerId.create = function create(properties) {
            return new GDeployerId(properties);
        };
    
        /**
         * Encodes the specified GDeployerId message. Does not implicitly {@link GDeployerId.verify|verify} messages.
         * @function encode
         * @memberof GDeployerId
         * @static
         * @param {IGDeployerId} message GDeployerId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GDeployerId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.publicKey);
            return writer;
        };
    
        /**
         * Encodes the specified GDeployerId message, length delimited. Does not implicitly {@link GDeployerId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GDeployerId
         * @static
         * @param {IGDeployerId} message GDeployerId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GDeployerId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a GDeployerId message from the specified reader or buffer.
         * @function decode
         * @memberof GDeployerId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GDeployerId} GDeployerId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GDeployerId.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GDeployerId();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.publicKey = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a GDeployerId message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GDeployerId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GDeployerId} GDeployerId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GDeployerId.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a GDeployerId message.
         * @function verify
         * @memberof GDeployerId
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GDeployerId.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                if (!(message.publicKey && typeof message.publicKey.length === "number" || $util.isString(message.publicKey)))
                    return "publicKey: buffer expected";
            return null;
        };
    
        /**
         * Creates a GDeployerId message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GDeployerId
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GDeployerId} GDeployerId
         */
        GDeployerId.fromObject = function fromObject(object) {
            if (object instanceof $root.GDeployerId)
                return object;
            var message = new $root.GDeployerId();
            if (object.publicKey != null)
                if (typeof object.publicKey === "string")
                    $util.base64.decode(object.publicKey, message.publicKey = $util.newBuffer($util.base64.length(object.publicKey)), 0);
                else if (object.publicKey.length)
                    message.publicKey = object.publicKey;
            return message;
        };
    
        /**
         * Creates a plain object from a GDeployerId message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GDeployerId
         * @static
         * @param {GDeployerId} message GDeployerId
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GDeployerId.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.publicKey = "";
                else {
                    object.publicKey = [];
                    if (options.bytes !== Array)
                        object.publicKey = $util.newBuffer(object.publicKey);
                }
            if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                object.publicKey = options.bytes === String ? $util.base64.encode(message.publicKey, 0, message.publicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.publicKey) : message.publicKey;
            return object;
        };
    
        /**
         * Converts this GDeployerId to JSON.
         * @function toJSON
         * @memberof GDeployerId
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GDeployerId.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return GDeployerId;
    })();
    
    $root.scalapb = (function() {
    
        /**
         * Namespace scalapb.
         * @exports scalapb
         * @namespace
         */
        var scalapb = {};
    
        scalapb.ScalaPbOptions = (function() {
    
            /**
             * Properties of a ScalaPbOptions.
             * @memberof scalapb
             * @interface IScalaPbOptions
             * @property {string|null} [packageName] ScalaPbOptions packageName
             * @property {boolean|null} [flatPackage] ScalaPbOptions flatPackage
             * @property {Array.<string>|null} ["import"] ScalaPbOptions import
             * @property {Array.<string>|null} [preamble] ScalaPbOptions preamble
             * @property {boolean|null} [singleFile] ScalaPbOptions singleFile
             * @property {boolean|null} [noPrimitiveWrappers] ScalaPbOptions noPrimitiveWrappers
             * @property {boolean|null} [primitiveWrappers] ScalaPbOptions primitiveWrappers
             * @property {string|null} [collectionType] ScalaPbOptions collectionType
             * @property {boolean|null} [preserveUnknownFields] ScalaPbOptions preserveUnknownFields
             * @property {string|null} [objectName] ScalaPbOptions objectName
             * @property {scalapb.ScalaPbOptions.OptionsScope|null} [scope] ScalaPbOptions scope
             * @property {boolean|null} [lenses] ScalaPbOptions lenses
             * @property {boolean|null} [retainSourceCodeInfo] ScalaPbOptions retainSourceCodeInfo
             * @property {string|null} [mapType] ScalaPbOptions mapType
             * @property {boolean|null} [testOnlyNoJavaConversions] ScalaPbOptions testOnlyNoJavaConversions
             */
    
            /**
             * Constructs a new ScalaPbOptions.
             * @memberof scalapb
             * @classdesc Represents a ScalaPbOptions.
             * @implements IScalaPbOptions
             * @constructor
             * @param {scalapb.IScalaPbOptions=} [properties] Properties to set
             */
            function ScalaPbOptions(properties) {
                this["import"] = [];
                this.preamble = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ScalaPbOptions packageName.
             * @member {string} packageName
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.packageName = "";
    
            /**
             * ScalaPbOptions flatPackage.
             * @member {boolean} flatPackage
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.flatPackage = false;
    
            /**
             * ScalaPbOptions import.
             * @member {Array.<string>} import
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype["import"] = $util.emptyArray;
    
            /**
             * ScalaPbOptions preamble.
             * @member {Array.<string>} preamble
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.preamble = $util.emptyArray;
    
            /**
             * ScalaPbOptions singleFile.
             * @member {boolean} singleFile
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.singleFile = false;
    
            /**
             * ScalaPbOptions noPrimitiveWrappers.
             * @member {boolean} noPrimitiveWrappers
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.noPrimitiveWrappers = false;
    
            /**
             * ScalaPbOptions primitiveWrappers.
             * @member {boolean} primitiveWrappers
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.primitiveWrappers = false;
    
            /**
             * ScalaPbOptions collectionType.
             * @member {string} collectionType
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.collectionType = "";
    
            /**
             * ScalaPbOptions preserveUnknownFields.
             * @member {boolean} preserveUnknownFields
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.preserveUnknownFields = false;
    
            /**
             * ScalaPbOptions objectName.
             * @member {string} objectName
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.objectName = "";
    
            /**
             * ScalaPbOptions scope.
             * @member {scalapb.ScalaPbOptions.OptionsScope} scope
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.scope = 0;
    
            /**
             * ScalaPbOptions lenses.
             * @member {boolean} lenses
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.lenses = true;
    
            /**
             * ScalaPbOptions retainSourceCodeInfo.
             * @member {boolean} retainSourceCodeInfo
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.retainSourceCodeInfo = false;
    
            /**
             * ScalaPbOptions mapType.
             * @member {string} mapType
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.mapType = "";
    
            /**
             * ScalaPbOptions testOnlyNoJavaConversions.
             * @member {boolean} testOnlyNoJavaConversions
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.testOnlyNoJavaConversions = false;
    
            /**
             * Creates a new ScalaPbOptions instance using the specified properties.
             * @function create
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {scalapb.IScalaPbOptions=} [properties] Properties to set
             * @returns {scalapb.ScalaPbOptions} ScalaPbOptions instance
             */
            ScalaPbOptions.create = function create(properties) {
                return new ScalaPbOptions(properties);
            };
    
            /**
             * Encodes the specified ScalaPbOptions message. Does not implicitly {@link scalapb.ScalaPbOptions.verify|verify} messages.
             * @function encode
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {scalapb.IScalaPbOptions} message ScalaPbOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScalaPbOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.packageName != null && message.hasOwnProperty("packageName"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.packageName);
                if (message.flatPackage != null && message.hasOwnProperty("flatPackage"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.flatPackage);
                if (message["import"] != null && message["import"].length)
                    for (var i = 0; i < message["import"].length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message["import"][i]);
                if (message.preamble != null && message.preamble.length)
                    for (var i = 0; i < message.preamble.length; ++i)
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.preamble[i]);
                if (message.singleFile != null && message.hasOwnProperty("singleFile"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.singleFile);
                if (message.primitiveWrappers != null && message.hasOwnProperty("primitiveWrappers"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.primitiveWrappers);
                if (message.noPrimitiveWrappers != null && message.hasOwnProperty("noPrimitiveWrappers"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.noPrimitiveWrappers);
                if (message.collectionType != null && message.hasOwnProperty("collectionType"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.collectionType);
                if (message.preserveUnknownFields != null && message.hasOwnProperty("preserveUnknownFields"))
                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.preserveUnknownFields);
                if (message.objectName != null && message.hasOwnProperty("objectName"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.objectName);
                if (message.scope != null && message.hasOwnProperty("scope"))
                    writer.uint32(/* id 11, wireType 0 =*/88).int32(message.scope);
                if (message.lenses != null && message.hasOwnProperty("lenses"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.lenses);
                if (message.retainSourceCodeInfo != null && message.hasOwnProperty("retainSourceCodeInfo"))
                    writer.uint32(/* id 13, wireType 0 =*/104).bool(message.retainSourceCodeInfo);
                if (message.mapType != null && message.hasOwnProperty("mapType"))
                    writer.uint32(/* id 14, wireType 2 =*/114).string(message.mapType);
                if (message.testOnlyNoJavaConversions != null && message.hasOwnProperty("testOnlyNoJavaConversions"))
                    writer.uint32(/* id 100001, wireType 0 =*/800008).bool(message.testOnlyNoJavaConversions);
                return writer;
            };
    
            /**
             * Encodes the specified ScalaPbOptions message, length delimited. Does not implicitly {@link scalapb.ScalaPbOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {scalapb.IScalaPbOptions} message ScalaPbOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScalaPbOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ScalaPbOptions message from the specified reader or buffer.
             * @function decode
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scalapb.ScalaPbOptions} ScalaPbOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScalaPbOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.ScalaPbOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.packageName = reader.string();
                        break;
                    case 2:
                        message.flatPackage = reader.bool();
                        break;
                    case 3:
                        if (!(message["import"] && message["import"].length))
                            message["import"] = [];
                        message["import"].push(reader.string());
                        break;
                    case 4:
                        if (!(message.preamble && message.preamble.length))
                            message.preamble = [];
                        message.preamble.push(reader.string());
                        break;
                    case 5:
                        message.singleFile = reader.bool();
                        break;
                    case 7:
                        message.noPrimitiveWrappers = reader.bool();
                        break;
                    case 6:
                        message.primitiveWrappers = reader.bool();
                        break;
                    case 8:
                        message.collectionType = reader.string();
                        break;
                    case 9:
                        message.preserveUnknownFields = reader.bool();
                        break;
                    case 10:
                        message.objectName = reader.string();
                        break;
                    case 11:
                        message.scope = reader.int32();
                        break;
                    case 12:
                        message.lenses = reader.bool();
                        break;
                    case 13:
                        message.retainSourceCodeInfo = reader.bool();
                        break;
                    case 14:
                        message.mapType = reader.string();
                        break;
                    case 100001:
                        message.testOnlyNoJavaConversions = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ScalaPbOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scalapb.ScalaPbOptions} ScalaPbOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScalaPbOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ScalaPbOptions message.
             * @function verify
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ScalaPbOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.packageName != null && message.hasOwnProperty("packageName"))
                    if (!$util.isString(message.packageName))
                        return "packageName: string expected";
                if (message.flatPackage != null && message.hasOwnProperty("flatPackage"))
                    if (typeof message.flatPackage !== "boolean")
                        return "flatPackage: boolean expected";
                if (message["import"] != null && message.hasOwnProperty("import")) {
                    if (!Array.isArray(message["import"]))
                        return "import: array expected";
                    for (var i = 0; i < message["import"].length; ++i)
                        if (!$util.isString(message["import"][i]))
                            return "import: string[] expected";
                }
                if (message.preamble != null && message.hasOwnProperty("preamble")) {
                    if (!Array.isArray(message.preamble))
                        return "preamble: array expected";
                    for (var i = 0; i < message.preamble.length; ++i)
                        if (!$util.isString(message.preamble[i]))
                            return "preamble: string[] expected";
                }
                if (message.singleFile != null && message.hasOwnProperty("singleFile"))
                    if (typeof message.singleFile !== "boolean")
                        return "singleFile: boolean expected";
                if (message.noPrimitiveWrappers != null && message.hasOwnProperty("noPrimitiveWrappers"))
                    if (typeof message.noPrimitiveWrappers !== "boolean")
                        return "noPrimitiveWrappers: boolean expected";
                if (message.primitiveWrappers != null && message.hasOwnProperty("primitiveWrappers"))
                    if (typeof message.primitiveWrappers !== "boolean")
                        return "primitiveWrappers: boolean expected";
                if (message.collectionType != null && message.hasOwnProperty("collectionType"))
                    if (!$util.isString(message.collectionType))
                        return "collectionType: string expected";
                if (message.preserveUnknownFields != null && message.hasOwnProperty("preserveUnknownFields"))
                    if (typeof message.preserveUnknownFields !== "boolean")
                        return "preserveUnknownFields: boolean expected";
                if (message.objectName != null && message.hasOwnProperty("objectName"))
                    if (!$util.isString(message.objectName))
                        return "objectName: string expected";
                if (message.scope != null && message.hasOwnProperty("scope"))
                    switch (message.scope) {
                    default:
                        return "scope: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.lenses != null && message.hasOwnProperty("lenses"))
                    if (typeof message.lenses !== "boolean")
                        return "lenses: boolean expected";
                if (message.retainSourceCodeInfo != null && message.hasOwnProperty("retainSourceCodeInfo"))
                    if (typeof message.retainSourceCodeInfo !== "boolean")
                        return "retainSourceCodeInfo: boolean expected";
                if (message.mapType != null && message.hasOwnProperty("mapType"))
                    if (!$util.isString(message.mapType))
                        return "mapType: string expected";
                if (message.testOnlyNoJavaConversions != null && message.hasOwnProperty("testOnlyNoJavaConversions"))
                    if (typeof message.testOnlyNoJavaConversions !== "boolean")
                        return "testOnlyNoJavaConversions: boolean expected";
                return null;
            };
    
            /**
             * Creates a ScalaPbOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scalapb.ScalaPbOptions} ScalaPbOptions
             */
            ScalaPbOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.scalapb.ScalaPbOptions)
                    return object;
                var message = new $root.scalapb.ScalaPbOptions();
                if (object.packageName != null)
                    message.packageName = String(object.packageName);
                if (object.flatPackage != null)
                    message.flatPackage = Boolean(object.flatPackage);
                if (object["import"]) {
                    if (!Array.isArray(object["import"]))
                        throw TypeError(".scalapb.ScalaPbOptions.import: array expected");
                    message["import"] = [];
                    for (var i = 0; i < object["import"].length; ++i)
                        message["import"][i] = String(object["import"][i]);
                }
                if (object.preamble) {
                    if (!Array.isArray(object.preamble))
                        throw TypeError(".scalapb.ScalaPbOptions.preamble: array expected");
                    message.preamble = [];
                    for (var i = 0; i < object.preamble.length; ++i)
                        message.preamble[i] = String(object.preamble[i]);
                }
                if (object.singleFile != null)
                    message.singleFile = Boolean(object.singleFile);
                if (object.noPrimitiveWrappers != null)
                    message.noPrimitiveWrappers = Boolean(object.noPrimitiveWrappers);
                if (object.primitiveWrappers != null)
                    message.primitiveWrappers = Boolean(object.primitiveWrappers);
                if (object.collectionType != null)
                    message.collectionType = String(object.collectionType);
                if (object.preserveUnknownFields != null)
                    message.preserveUnknownFields = Boolean(object.preserveUnknownFields);
                if (object.objectName != null)
                    message.objectName = String(object.objectName);
                switch (object.scope) {
                case "FILE":
                case 0:
                    message.scope = 0;
                    break;
                case "PACKAGE":
                case 1:
                    message.scope = 1;
                    break;
                }
                if (object.lenses != null)
                    message.lenses = Boolean(object.lenses);
                if (object.retainSourceCodeInfo != null)
                    message.retainSourceCodeInfo = Boolean(object.retainSourceCodeInfo);
                if (object.mapType != null)
                    message.mapType = String(object.mapType);
                if (object.testOnlyNoJavaConversions != null)
                    message.testOnlyNoJavaConversions = Boolean(object.testOnlyNoJavaConversions);
                return message;
            };
    
            /**
             * Creates a plain object from a ScalaPbOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {scalapb.ScalaPbOptions} message ScalaPbOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ScalaPbOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object["import"] = [];
                    object.preamble = [];
                }
                if (options.defaults) {
                    object.packageName = "";
                    object.flatPackage = false;
                    object.singleFile = false;
                    object.primitiveWrappers = false;
                    object.noPrimitiveWrappers = false;
                    object.collectionType = "";
                    object.preserveUnknownFields = false;
                    object.objectName = "";
                    object.scope = options.enums === String ? "FILE" : 0;
                    object.lenses = true;
                    object.retainSourceCodeInfo = false;
                    object.mapType = "";
                    object.testOnlyNoJavaConversions = false;
                }
                if (message.packageName != null && message.hasOwnProperty("packageName"))
                    object.packageName = message.packageName;
                if (message.flatPackage != null && message.hasOwnProperty("flatPackage"))
                    object.flatPackage = message.flatPackage;
                if (message["import"] && message["import"].length) {
                    object["import"] = [];
                    for (var j = 0; j < message["import"].length; ++j)
                        object["import"][j] = message["import"][j];
                }
                if (message.preamble && message.preamble.length) {
                    object.preamble = [];
                    for (var j = 0; j < message.preamble.length; ++j)
                        object.preamble[j] = message.preamble[j];
                }
                if (message.singleFile != null && message.hasOwnProperty("singleFile"))
                    object.singleFile = message.singleFile;
                if (message.primitiveWrappers != null && message.hasOwnProperty("primitiveWrappers"))
                    object.primitiveWrappers = message.primitiveWrappers;
                if (message.noPrimitiveWrappers != null && message.hasOwnProperty("noPrimitiveWrappers"))
                    object.noPrimitiveWrappers = message.noPrimitiveWrappers;
                if (message.collectionType != null && message.hasOwnProperty("collectionType"))
                    object.collectionType = message.collectionType;
                if (message.preserveUnknownFields != null && message.hasOwnProperty("preserveUnknownFields"))
                    object.preserveUnknownFields = message.preserveUnknownFields;
                if (message.objectName != null && message.hasOwnProperty("objectName"))
                    object.objectName = message.objectName;
                if (message.scope != null && message.hasOwnProperty("scope"))
                    object.scope = options.enums === String ? $root.scalapb.ScalaPbOptions.OptionsScope[message.scope] : message.scope;
                if (message.lenses != null && message.hasOwnProperty("lenses"))
                    object.lenses = message.lenses;
                if (message.retainSourceCodeInfo != null && message.hasOwnProperty("retainSourceCodeInfo"))
                    object.retainSourceCodeInfo = message.retainSourceCodeInfo;
                if (message.mapType != null && message.hasOwnProperty("mapType"))
                    object.mapType = message.mapType;
                if (message.testOnlyNoJavaConversions != null && message.hasOwnProperty("testOnlyNoJavaConversions"))
                    object.testOnlyNoJavaConversions = message.testOnlyNoJavaConversions;
                return object;
            };
    
            /**
             * Converts this ScalaPbOptions to JSON.
             * @function toJSON
             * @memberof scalapb.ScalaPbOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ScalaPbOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * OptionsScope enum.
             * @name scalapb.ScalaPbOptions.OptionsScope
             * @enum {string}
             * @property {number} FILE=0 FILE value
             * @property {number} PACKAGE=1 PACKAGE value
             */
            ScalaPbOptions.OptionsScope = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FILE"] = 0;
                values[valuesById[1] = "PACKAGE"] = 1;
                return values;
            })();
    
            return ScalaPbOptions;
        })();
    
        scalapb.MessageOptions = (function() {
    
            /**
             * Properties of a MessageOptions.
             * @memberof scalapb
             * @interface IMessageOptions
             * @property {Array.<string>|null} ["extends"] MessageOptions extends
             * @property {Array.<string>|null} [companionExtends] MessageOptions companionExtends
             * @property {Array.<string>|null} [annotations] MessageOptions annotations
             * @property {string|null} [type] MessageOptions type
             * @property {Array.<string>|null} [companionAnnotations] MessageOptions companionAnnotations
             * @property {Array.<string>|null} [sealedOneofExtends] MessageOptions sealedOneofExtends
             */
    
            /**
             * Constructs a new MessageOptions.
             * @memberof scalapb
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {scalapb.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this["extends"] = [];
                this.companionExtends = [];
                this.annotations = [];
                this.companionAnnotations = [];
                this.sealedOneofExtends = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MessageOptions extends.
             * @member {Array.<string>} extends
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype["extends"] = $util.emptyArray;
    
            /**
             * MessageOptions companionExtends.
             * @member {Array.<string>} companionExtends
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype.companionExtends = $util.emptyArray;
    
            /**
             * MessageOptions annotations.
             * @member {Array.<string>} annotations
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype.annotations = $util.emptyArray;
    
            /**
             * MessageOptions type.
             * @member {string} type
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype.type = "";
    
            /**
             * MessageOptions companionAnnotations.
             * @member {Array.<string>} companionAnnotations
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype.companionAnnotations = $util.emptyArray;
    
            /**
             * MessageOptions sealedOneofExtends.
             * @member {Array.<string>} sealedOneofExtends
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype.sealedOneofExtends = $util.emptyArray;
    
            /**
             * Creates a new MessageOptions instance using the specified properties.
             * @function create
             * @memberof scalapb.MessageOptions
             * @static
             * @param {scalapb.IMessageOptions=} [properties] Properties to set
             * @returns {scalapb.MessageOptions} MessageOptions instance
             */
            MessageOptions.create = function create(properties) {
                return new MessageOptions(properties);
            };
    
            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link scalapb.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof scalapb.MessageOptions
             * @static
             * @param {scalapb.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["extends"] != null && message["extends"].length)
                    for (var i = 0; i < message["extends"].length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message["extends"][i]);
                if (message.companionExtends != null && message.companionExtends.length)
                    for (var i = 0; i < message.companionExtends.length; ++i)
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.companionExtends[i]);
                if (message.annotations != null && message.annotations.length)
                    for (var i = 0; i < message.annotations.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.annotations[i]);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.type);
                if (message.companionAnnotations != null && message.companionAnnotations.length)
                    for (var i = 0; i < message.companionAnnotations.length; ++i)
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.companionAnnotations[i]);
                if (message.sealedOneofExtends != null && message.sealedOneofExtends.length)
                    for (var i = 0; i < message.sealedOneofExtends.length; ++i)
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.sealedOneofExtends[i]);
                return writer;
            };
    
            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link scalapb.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scalapb.MessageOptions
             * @static
             * @param {scalapb.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof scalapb.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scalapb.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.MessageOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message["extends"] && message["extends"].length))
                            message["extends"] = [];
                        message["extends"].push(reader.string());
                        break;
                    case 2:
                        if (!(message.companionExtends && message.companionExtends.length))
                            message.companionExtends = [];
                        message.companionExtends.push(reader.string());
                        break;
                    case 3:
                        if (!(message.annotations && message.annotations.length))
                            message.annotations = [];
                        message.annotations.push(reader.string());
                        break;
                    case 4:
                        message.type = reader.string();
                        break;
                    case 5:
                        if (!(message.companionAnnotations && message.companionAnnotations.length))
                            message.companionAnnotations = [];
                        message.companionAnnotations.push(reader.string());
                        break;
                    case 6:
                        if (!(message.sealedOneofExtends && message.sealedOneofExtends.length))
                            message.sealedOneofExtends = [];
                        message.sealedOneofExtends.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scalapb.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scalapb.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof scalapb.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message["extends"] != null && message.hasOwnProperty("extends")) {
                    if (!Array.isArray(message["extends"]))
                        return "extends: array expected";
                    for (var i = 0; i < message["extends"].length; ++i)
                        if (!$util.isString(message["extends"][i]))
                            return "extends: string[] expected";
                }
                if (message.companionExtends != null && message.hasOwnProperty("companionExtends")) {
                    if (!Array.isArray(message.companionExtends))
                        return "companionExtends: array expected";
                    for (var i = 0; i < message.companionExtends.length; ++i)
                        if (!$util.isString(message.companionExtends[i]))
                            return "companionExtends: string[] expected";
                }
                if (message.annotations != null && message.hasOwnProperty("annotations")) {
                    if (!Array.isArray(message.annotations))
                        return "annotations: array expected";
                    for (var i = 0; i < message.annotations.length; ++i)
                        if (!$util.isString(message.annotations[i]))
                            return "annotations: string[] expected";
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.companionAnnotations != null && message.hasOwnProperty("companionAnnotations")) {
                    if (!Array.isArray(message.companionAnnotations))
                        return "companionAnnotations: array expected";
                    for (var i = 0; i < message.companionAnnotations.length; ++i)
                        if (!$util.isString(message.companionAnnotations[i]))
                            return "companionAnnotations: string[] expected";
                }
                if (message.sealedOneofExtends != null && message.hasOwnProperty("sealedOneofExtends")) {
                    if (!Array.isArray(message.sealedOneofExtends))
                        return "sealedOneofExtends: array expected";
                    for (var i = 0; i < message.sealedOneofExtends.length; ++i)
                        if (!$util.isString(message.sealedOneofExtends[i]))
                            return "sealedOneofExtends: string[] expected";
                }
                return null;
            };
    
            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scalapb.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scalapb.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.scalapb.MessageOptions)
                    return object;
                var message = new $root.scalapb.MessageOptions();
                if (object["extends"]) {
                    if (!Array.isArray(object["extends"]))
                        throw TypeError(".scalapb.MessageOptions.extends: array expected");
                    message["extends"] = [];
                    for (var i = 0; i < object["extends"].length; ++i)
                        message["extends"][i] = String(object["extends"][i]);
                }
                if (object.companionExtends) {
                    if (!Array.isArray(object.companionExtends))
                        throw TypeError(".scalapb.MessageOptions.companionExtends: array expected");
                    message.companionExtends = [];
                    for (var i = 0; i < object.companionExtends.length; ++i)
                        message.companionExtends[i] = String(object.companionExtends[i]);
                }
                if (object.annotations) {
                    if (!Array.isArray(object.annotations))
                        throw TypeError(".scalapb.MessageOptions.annotations: array expected");
                    message.annotations = [];
                    for (var i = 0; i < object.annotations.length; ++i)
                        message.annotations[i] = String(object.annotations[i]);
                }
                if (object.type != null)
                    message.type = String(object.type);
                if (object.companionAnnotations) {
                    if (!Array.isArray(object.companionAnnotations))
                        throw TypeError(".scalapb.MessageOptions.companionAnnotations: array expected");
                    message.companionAnnotations = [];
                    for (var i = 0; i < object.companionAnnotations.length; ++i)
                        message.companionAnnotations[i] = String(object.companionAnnotations[i]);
                }
                if (object.sealedOneofExtends) {
                    if (!Array.isArray(object.sealedOneofExtends))
                        throw TypeError(".scalapb.MessageOptions.sealedOneofExtends: array expected");
                    message.sealedOneofExtends = [];
                    for (var i = 0; i < object.sealedOneofExtends.length; ++i)
                        message.sealedOneofExtends[i] = String(object.sealedOneofExtends[i]);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scalapb.MessageOptions
             * @static
             * @param {scalapb.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object["extends"] = [];
                    object.companionExtends = [];
                    object.annotations = [];
                    object.companionAnnotations = [];
                    object.sealedOneofExtends = [];
                }
                if (options.defaults)
                    object.type = "";
                if (message["extends"] && message["extends"].length) {
                    object["extends"] = [];
                    for (var j = 0; j < message["extends"].length; ++j)
                        object["extends"][j] = message["extends"][j];
                }
                if (message.companionExtends && message.companionExtends.length) {
                    object.companionExtends = [];
                    for (var j = 0; j < message.companionExtends.length; ++j)
                        object.companionExtends[j] = message.companionExtends[j];
                }
                if (message.annotations && message.annotations.length) {
                    object.annotations = [];
                    for (var j = 0; j < message.annotations.length; ++j)
                        object.annotations[j] = message.annotations[j];
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.companionAnnotations && message.companionAnnotations.length) {
                    object.companionAnnotations = [];
                    for (var j = 0; j < message.companionAnnotations.length; ++j)
                        object.companionAnnotations[j] = message.companionAnnotations[j];
                }
                if (message.sealedOneofExtends && message.sealedOneofExtends.length) {
                    object.sealedOneofExtends = [];
                    for (var j = 0; j < message.sealedOneofExtends.length; ++j)
                        object.sealedOneofExtends[j] = message.sealedOneofExtends[j];
                }
                return object;
            };
    
            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof scalapb.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MessageOptions;
        })();
    
        scalapb.FieldOptions = (function() {
    
            /**
             * Properties of a FieldOptions.
             * @memberof scalapb
             * @interface IFieldOptions
             * @property {string|null} [type] FieldOptions type
             * @property {string|null} [scalaName] FieldOptions scalaName
             * @property {string|null} [collectionType] FieldOptions collectionType
             * @property {string|null} [keyType] FieldOptions keyType
             * @property {string|null} [valueType] FieldOptions valueType
             * @property {Array.<string>|null} [annotations] FieldOptions annotations
             * @property {string|null} [mapType] FieldOptions mapType
             * @property {boolean|null} [noBox] FieldOptions noBox
             */
    
            /**
             * Constructs a new FieldOptions.
             * @memberof scalapb
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {scalapb.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.annotations = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FieldOptions type.
             * @member {string} type
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.type = "";
    
            /**
             * FieldOptions scalaName.
             * @member {string} scalaName
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.scalaName = "";
    
            /**
             * FieldOptions collectionType.
             * @member {string} collectionType
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.collectionType = "";
    
            /**
             * FieldOptions keyType.
             * @member {string} keyType
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.keyType = "";
    
            /**
             * FieldOptions valueType.
             * @member {string} valueType
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.valueType = "";
    
            /**
             * FieldOptions annotations.
             * @member {Array.<string>} annotations
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.annotations = $util.emptyArray;
    
            /**
             * FieldOptions mapType.
             * @member {string} mapType
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.mapType = "";
    
            /**
             * FieldOptions noBox.
             * @member {boolean} noBox
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.noBox = false;
    
            /**
             * Creates a new FieldOptions instance using the specified properties.
             * @function create
             * @memberof scalapb.FieldOptions
             * @static
             * @param {scalapb.IFieldOptions=} [properties] Properties to set
             * @returns {scalapb.FieldOptions} FieldOptions instance
             */
            FieldOptions.create = function create(properties) {
                return new FieldOptions(properties);
            };
    
            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link scalapb.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof scalapb.FieldOptions
             * @static
             * @param {scalapb.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                if (message.scalaName != null && message.hasOwnProperty("scalaName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.scalaName);
                if (message.collectionType != null && message.hasOwnProperty("collectionType"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.collectionType);
                if (message.keyType != null && message.hasOwnProperty("keyType"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.keyType);
                if (message.valueType != null && message.hasOwnProperty("valueType"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.valueType);
                if (message.annotations != null && message.annotations.length)
                    for (var i = 0; i < message.annotations.length; ++i)
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.annotations[i]);
                if (message.mapType != null && message.hasOwnProperty("mapType"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.mapType);
                if (message.noBox != null && message.hasOwnProperty("noBox"))
                    writer.uint32(/* id 30, wireType 0 =*/240).bool(message.noBox);
                return writer;
            };
    
            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link scalapb.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scalapb.FieldOptions
             * @static
             * @param {scalapb.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof scalapb.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scalapb.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.FieldOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.string();
                        break;
                    case 2:
                        message.scalaName = reader.string();
                        break;
                    case 3:
                        message.collectionType = reader.string();
                        break;
                    case 4:
                        message.keyType = reader.string();
                        break;
                    case 5:
                        message.valueType = reader.string();
                        break;
                    case 6:
                        if (!(message.annotations && message.annotations.length))
                            message.annotations = [];
                        message.annotations.push(reader.string());
                        break;
                    case 7:
                        message.mapType = reader.string();
                        break;
                    case 30:
                        message.noBox = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scalapb.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scalapb.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof scalapb.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.scalaName != null && message.hasOwnProperty("scalaName"))
                    if (!$util.isString(message.scalaName))
                        return "scalaName: string expected";
                if (message.collectionType != null && message.hasOwnProperty("collectionType"))
                    if (!$util.isString(message.collectionType))
                        return "collectionType: string expected";
                if (message.keyType != null && message.hasOwnProperty("keyType"))
                    if (!$util.isString(message.keyType))
                        return "keyType: string expected";
                if (message.valueType != null && message.hasOwnProperty("valueType"))
                    if (!$util.isString(message.valueType))
                        return "valueType: string expected";
                if (message.annotations != null && message.hasOwnProperty("annotations")) {
                    if (!Array.isArray(message.annotations))
                        return "annotations: array expected";
                    for (var i = 0; i < message.annotations.length; ++i)
                        if (!$util.isString(message.annotations[i]))
                            return "annotations: string[] expected";
                }
                if (message.mapType != null && message.hasOwnProperty("mapType"))
                    if (!$util.isString(message.mapType))
                        return "mapType: string expected";
                if (message.noBox != null && message.hasOwnProperty("noBox"))
                    if (typeof message.noBox !== "boolean")
                        return "noBox: boolean expected";
                return null;
            };
    
            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scalapb.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scalapb.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.scalapb.FieldOptions)
                    return object;
                var message = new $root.scalapb.FieldOptions();
                if (object.type != null)
                    message.type = String(object.type);
                if (object.scalaName != null)
                    message.scalaName = String(object.scalaName);
                if (object.collectionType != null)
                    message.collectionType = String(object.collectionType);
                if (object.keyType != null)
                    message.keyType = String(object.keyType);
                if (object.valueType != null)
                    message.valueType = String(object.valueType);
                if (object.annotations) {
                    if (!Array.isArray(object.annotations))
                        throw TypeError(".scalapb.FieldOptions.annotations: array expected");
                    message.annotations = [];
                    for (var i = 0; i < object.annotations.length; ++i)
                        message.annotations[i] = String(object.annotations[i]);
                }
                if (object.mapType != null)
                    message.mapType = String(object.mapType);
                if (object.noBox != null)
                    message.noBox = Boolean(object.noBox);
                return message;
            };
    
            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scalapb.FieldOptions
             * @static
             * @param {scalapb.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.annotations = [];
                if (options.defaults) {
                    object.type = "";
                    object.scalaName = "";
                    object.collectionType = "";
                    object.keyType = "";
                    object.valueType = "";
                    object.mapType = "";
                    object.noBox = false;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.scalaName != null && message.hasOwnProperty("scalaName"))
                    object.scalaName = message.scalaName;
                if (message.collectionType != null && message.hasOwnProperty("collectionType"))
                    object.collectionType = message.collectionType;
                if (message.keyType != null && message.hasOwnProperty("keyType"))
                    object.keyType = message.keyType;
                if (message.valueType != null && message.hasOwnProperty("valueType"))
                    object.valueType = message.valueType;
                if (message.annotations && message.annotations.length) {
                    object.annotations = [];
                    for (var j = 0; j < message.annotations.length; ++j)
                        object.annotations[j] = message.annotations[j];
                }
                if (message.mapType != null && message.hasOwnProperty("mapType"))
                    object.mapType = message.mapType;
                if (message.noBox != null && message.hasOwnProperty("noBox"))
                    object.noBox = message.noBox;
                return object;
            };
    
            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof scalapb.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FieldOptions;
        })();
    
        scalapb.EnumOptions = (function() {
    
            /**
             * Properties of an EnumOptions.
             * @memberof scalapb
             * @interface IEnumOptions
             * @property {Array.<string>|null} ["extends"] EnumOptions extends
             * @property {Array.<string>|null} [companionExtends] EnumOptions companionExtends
             * @property {string|null} [type] EnumOptions type
             */
    
            /**
             * Constructs a new EnumOptions.
             * @memberof scalapb
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {scalapb.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this["extends"] = [];
                this.companionExtends = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * EnumOptions extends.
             * @member {Array.<string>} extends
             * @memberof scalapb.EnumOptions
             * @instance
             */
            EnumOptions.prototype["extends"] = $util.emptyArray;
    
            /**
             * EnumOptions companionExtends.
             * @member {Array.<string>} companionExtends
             * @memberof scalapb.EnumOptions
             * @instance
             */
            EnumOptions.prototype.companionExtends = $util.emptyArray;
    
            /**
             * EnumOptions type.
             * @member {string} type
             * @memberof scalapb.EnumOptions
             * @instance
             */
            EnumOptions.prototype.type = "";
    
            /**
             * Creates a new EnumOptions instance using the specified properties.
             * @function create
             * @memberof scalapb.EnumOptions
             * @static
             * @param {scalapb.IEnumOptions=} [properties] Properties to set
             * @returns {scalapb.EnumOptions} EnumOptions instance
             */
            EnumOptions.create = function create(properties) {
                return new EnumOptions(properties);
            };
    
            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link scalapb.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof scalapb.EnumOptions
             * @static
             * @param {scalapb.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["extends"] != null && message["extends"].length)
                    for (var i = 0; i < message["extends"].length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message["extends"][i]);
                if (message.companionExtends != null && message.companionExtends.length)
                    for (var i = 0; i < message.companionExtends.length; ++i)
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.companionExtends[i]);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);
                return writer;
            };
    
            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link scalapb.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scalapb.EnumOptions
             * @static
             * @param {scalapb.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof scalapb.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scalapb.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.EnumOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message["extends"] && message["extends"].length))
                            message["extends"] = [];
                        message["extends"].push(reader.string());
                        break;
                    case 2:
                        if (!(message.companionExtends && message.companionExtends.length))
                            message.companionExtends = [];
                        message.companionExtends.push(reader.string());
                        break;
                    case 3:
                        message.type = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scalapb.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scalapb.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof scalapb.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message["extends"] != null && message.hasOwnProperty("extends")) {
                    if (!Array.isArray(message["extends"]))
                        return "extends: array expected";
                    for (var i = 0; i < message["extends"].length; ++i)
                        if (!$util.isString(message["extends"][i]))
                            return "extends: string[] expected";
                }
                if (message.companionExtends != null && message.hasOwnProperty("companionExtends")) {
                    if (!Array.isArray(message.companionExtends))
                        return "companionExtends: array expected";
                    for (var i = 0; i < message.companionExtends.length; ++i)
                        if (!$util.isString(message.companionExtends[i]))
                            return "companionExtends: string[] expected";
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                return null;
            };
    
            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scalapb.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scalapb.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.scalapb.EnumOptions)
                    return object;
                var message = new $root.scalapb.EnumOptions();
                if (object["extends"]) {
                    if (!Array.isArray(object["extends"]))
                        throw TypeError(".scalapb.EnumOptions.extends: array expected");
                    message["extends"] = [];
                    for (var i = 0; i < object["extends"].length; ++i)
                        message["extends"][i] = String(object["extends"][i]);
                }
                if (object.companionExtends) {
                    if (!Array.isArray(object.companionExtends))
                        throw TypeError(".scalapb.EnumOptions.companionExtends: array expected");
                    message.companionExtends = [];
                    for (var i = 0; i < object.companionExtends.length; ++i)
                        message.companionExtends[i] = String(object.companionExtends[i]);
                }
                if (object.type != null)
                    message.type = String(object.type);
                return message;
            };
    
            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scalapb.EnumOptions
             * @static
             * @param {scalapb.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object["extends"] = [];
                    object.companionExtends = [];
                }
                if (options.defaults)
                    object.type = "";
                if (message["extends"] && message["extends"].length) {
                    object["extends"] = [];
                    for (var j = 0; j < message["extends"].length; ++j)
                        object["extends"][j] = message["extends"][j];
                }
                if (message.companionExtends && message.companionExtends.length) {
                    object.companionExtends = [];
                    for (var j = 0; j < message.companionExtends.length; ++j)
                        object.companionExtends[j] = message.companionExtends[j];
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                return object;
            };
    
            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof scalapb.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return EnumOptions;
        })();
    
        scalapb.EnumValueOptions = (function() {
    
            /**
             * Properties of an EnumValueOptions.
             * @memberof scalapb
             * @interface IEnumValueOptions
             * @property {Array.<string>|null} ["extends"] EnumValueOptions extends
             */
    
            /**
             * Constructs a new EnumValueOptions.
             * @memberof scalapb
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {scalapb.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this["extends"] = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * EnumValueOptions extends.
             * @member {Array.<string>} extends
             * @memberof scalapb.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype["extends"] = $util.emptyArray;
    
            /**
             * Creates a new EnumValueOptions instance using the specified properties.
             * @function create
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {scalapb.IEnumValueOptions=} [properties] Properties to set
             * @returns {scalapb.EnumValueOptions} EnumValueOptions instance
             */
            EnumValueOptions.create = function create(properties) {
                return new EnumValueOptions(properties);
            };
    
            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link scalapb.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {scalapb.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["extends"] != null && message["extends"].length)
                    for (var i = 0; i < message["extends"].length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message["extends"][i]);
                return writer;
            };
    
            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link scalapb.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {scalapb.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scalapb.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.EnumValueOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message["extends"] && message["extends"].length))
                            message["extends"] = [];
                        message["extends"].push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scalapb.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message["extends"] != null && message.hasOwnProperty("extends")) {
                    if (!Array.isArray(message["extends"]))
                        return "extends: array expected";
                    for (var i = 0; i < message["extends"].length; ++i)
                        if (!$util.isString(message["extends"][i]))
                            return "extends: string[] expected";
                }
                return null;
            };
    
            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scalapb.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.scalapb.EnumValueOptions)
                    return object;
                var message = new $root.scalapb.EnumValueOptions();
                if (object["extends"]) {
                    if (!Array.isArray(object["extends"]))
                        throw TypeError(".scalapb.EnumValueOptions.extends: array expected");
                    message["extends"] = [];
                    for (var i = 0; i < object["extends"].length; ++i)
                        message["extends"][i] = String(object["extends"][i]);
                }
                return message;
            };
    
            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {scalapb.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object["extends"] = [];
                if (message["extends"] && message["extends"].length) {
                    object["extends"] = [];
                    for (var j = 0; j < message["extends"].length; ++j)
                        object["extends"][j] = message["extends"][j];
                }
                return object;
            };
    
            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof scalapb.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return EnumValueOptions;
        })();
    
        scalapb.OneofOptions = (function() {
    
            /**
             * Properties of an OneofOptions.
             * @memberof scalapb
             * @interface IOneofOptions
             * @property {Array.<string>|null} ["extends"] OneofOptions extends
             */
    
            /**
             * Constructs a new OneofOptions.
             * @memberof scalapb
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {scalapb.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this["extends"] = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * OneofOptions extends.
             * @member {Array.<string>} extends
             * @memberof scalapb.OneofOptions
             * @instance
             */
            OneofOptions.prototype["extends"] = $util.emptyArray;
    
            /**
             * Creates a new OneofOptions instance using the specified properties.
             * @function create
             * @memberof scalapb.OneofOptions
             * @static
             * @param {scalapb.IOneofOptions=} [properties] Properties to set
             * @returns {scalapb.OneofOptions} OneofOptions instance
             */
            OneofOptions.create = function create(properties) {
                return new OneofOptions(properties);
            };
    
            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link scalapb.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof scalapb.OneofOptions
             * @static
             * @param {scalapb.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["extends"] != null && message["extends"].length)
                    for (var i = 0; i < message["extends"].length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message["extends"][i]);
                return writer;
            };
    
            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link scalapb.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scalapb.OneofOptions
             * @static
             * @param {scalapb.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof scalapb.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scalapb.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.OneofOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message["extends"] && message["extends"].length))
                            message["extends"] = [];
                        message["extends"].push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scalapb.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scalapb.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof scalapb.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message["extends"] != null && message.hasOwnProperty("extends")) {
                    if (!Array.isArray(message["extends"]))
                        return "extends: array expected";
                    for (var i = 0; i < message["extends"].length; ++i)
                        if (!$util.isString(message["extends"][i]))
                            return "extends: string[] expected";
                }
                return null;
            };
    
            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scalapb.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scalapb.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.scalapb.OneofOptions)
                    return object;
                var message = new $root.scalapb.OneofOptions();
                if (object["extends"]) {
                    if (!Array.isArray(object["extends"]))
                        throw TypeError(".scalapb.OneofOptions.extends: array expected");
                    message["extends"] = [];
                    for (var i = 0; i < object["extends"].length; ++i)
                        message["extends"][i] = String(object["extends"][i]);
                }
                return message;
            };
    
            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scalapb.OneofOptions
             * @static
             * @param {scalapb.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object["extends"] = [];
                if (message["extends"] && message["extends"].length) {
                    object["extends"] = [];
                    for (var j = 0; j < message["extends"].length; ++j)
                        object["extends"][j] = message["extends"][j];
                }
                return object;
            };
    
            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof scalapb.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return OneofOptions;
        })();
    
        return scalapb;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 10:
                            if (!(message.publicDependency && message.publicDependency.length))
                                message.publicDependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.publicDependency.push(reader.int32());
                            } else
                                message.publicDependency.push(reader.int32());
                            break;
                        case 11:
                            if (!(message.weakDependency && message.weakDependency.length))
                                message.weakDependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weakDependency.push(reader.int32());
                            } else
                                message.weakDependency.push(reader.int32());
                            break;
                        case 4:
                            if (!(message.messageType && message.messageType.length))
                                message.messageType = [];
                            message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.syntax = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nestedType && message.nestedType.length))
                                message.nestedType = [];
                            message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extensionRange && message.extensionRange.length))
                                message.extensionRange = [];
                            message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.oneofDecl && message.oneofDecl.length))
                                message.oneofDecl = [];
                            message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && message.hasOwnProperty("start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && message.hasOwnProperty("options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            case 3:
                                message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && message.hasOwnProperty("start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && message.hasOwnProperty("number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && message.hasOwnProperty("label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.typeName = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.defaultValue = reader.string();
                            break;
                        case 9:
                            message.oneofIndex = reader.int32();
                            break;
                        case 10:
                            message.jsonName = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {string}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {string}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && message.hasOwnProperty("start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && message.hasOwnProperty("number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.inputType = reader.string();
                            break;
                        case 3:
                            message.outputType = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.clientStreaming = reader.bool();
                            break;
                        case 6:
                            message.serverStreaming = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 * @property {scalapb.IScalaPbOptions|null} [".scalapb.options"] FileOptions .scalapb.options
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = false;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FileOptions .scalapb.options.
                 * @member {scalapb.IScalaPbOptions|null|undefined} .scalapb.options
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".scalapb.options"] = null;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".scalapb.options"] != null && message.hasOwnProperty(".scalapb.options"))
                        $root.scalapb.ScalaPbOptions.encode(message[".scalapb.options"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.javaPackage = reader.string();
                            break;
                        case 8:
                            message.javaOuterClassname = reader.string();
                            break;
                        case 10:
                            message.javaMultipleFiles = reader.bool();
                            break;
                        case 20:
                            message.javaGenerateEqualsAndHash = reader.bool();
                            break;
                        case 27:
                            message.javaStringCheckUtf8 = reader.bool();
                            break;
                        case 9:
                            message.optimizeFor = reader.int32();
                            break;
                        case 11:
                            message.goPackage = reader.string();
                            break;
                        case 16:
                            message.ccGenericServices = reader.bool();
                            break;
                        case 17:
                            message.javaGenericServices = reader.bool();
                            break;
                        case 18:
                            message.pyGenericServices = reader.bool();
                            break;
                        case 42:
                            message.phpGenericServices = reader.bool();
                            break;
                        case 23:
                            message.deprecated = reader.bool();
                            break;
                        case 31:
                            message.ccEnableArenas = reader.bool();
                            break;
                        case 36:
                            message.objcClassPrefix = reader.string();
                            break;
                        case 37:
                            message.csharpNamespace = reader.string();
                            break;
                        case 39:
                            message.swiftPrefix = reader.string();
                            break;
                        case 40:
                            message.phpClassPrefix = reader.string();
                            break;
                        case 41:
                            message.phpNamespace = reader.string();
                            break;
                        case 44:
                            message.phpMetadataNamespace = reader.string();
                            break;
                        case 45:
                            message.rubyPackage = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1020:
                            message[".scalapb.options"] = $root.scalapb.ScalaPbOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".scalapb.options"] != null && message.hasOwnProperty(".scalapb.options")) {
                        var error = $root.scalapb.ScalaPbOptions.verify(message[".scalapb.options"]);
                        if (error)
                            return ".scalapb.options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".scalapb.options"] != null) {
                        if (typeof object[".scalapb.options"] !== "object")
                            throw TypeError(".google.protobuf.FileOptions..scalapb.options: object expected");
                        message[".scalapb.options"] = $root.scalapb.ScalaPbOptions.fromObject(object[".scalapb.options"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = false;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                        object[".scalapb.options"] = null;
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".scalapb.options"] != null && message.hasOwnProperty(".scalapb.options"))
                        object[".scalapb.options"] = $root.scalapb.ScalaPbOptions.toObject(message[".scalapb.options"], options);
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {string}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 * @property {scalapb.IMessageOptions|null} [".scalapb.message"] MessageOptions .scalapb.message
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MessageOptions .scalapb.message.
                 * @member {scalapb.IMessageOptions|null|undefined} .scalapb.message
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".scalapb.message"] = null;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".scalapb.message"] != null && message.hasOwnProperty(".scalapb.message"))
                        $root.scalapb.MessageOptions.encode(message[".scalapb.message"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.messageSetWireFormat = reader.bool();
                            break;
                        case 2:
                            message.noStandardDescriptorAccessor = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 7:
                            message.mapEntry = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1020:
                            message[".scalapb.message"] = $root.scalapb.MessageOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".scalapb.message"] != null && message.hasOwnProperty(".scalapb.message")) {
                        var error = $root.scalapb.MessageOptions.verify(message[".scalapb.message"]);
                        if (error)
                            return ".scalapb.message." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".scalapb.message"] != null) {
                        if (typeof object[".scalapb.message"] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions..scalapb.message: object expected");
                        message[".scalapb.message"] = $root.scalapb.MessageOptions.fromObject(object[".scalapb.message"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object[".scalapb.message"] = null;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".scalapb.message"] != null && message.hasOwnProperty(".scalapb.message"))
                        object[".scalapb.message"] = $root.scalapb.MessageOptions.toObject(message[".scalapb.message"], options);
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {scalapb.IFieldOptions|null} [".scalapb.field"] FieldOptions .scalapb.field
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .scalapb.field.
                 * @member {scalapb.IFieldOptions|null|undefined} .scalapb.field
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".scalapb.field"] = null;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".scalapb.field"] != null && message.hasOwnProperty(".scalapb.field"))
                        $root.scalapb.FieldOptions.encode(message[".scalapb.field"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 6:
                            message.jstype = reader.int32();
                            break;
                        case 5:
                            message.lazy = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 10:
                            message.weak = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1020:
                            message[".scalapb.field"] = $root.scalapb.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".scalapb.field"] != null && message.hasOwnProperty(".scalapb.field")) {
                        var error = $root.scalapb.FieldOptions.verify(message[".scalapb.field"]);
                        if (error)
                            return ".scalapb.field." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".scalapb.field"] != null) {
                        if (typeof object[".scalapb.field"] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions..scalapb.field: object expected");
                        message[".scalapb.field"] = $root.scalapb.FieldOptions.fromObject(object[".scalapb.field"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object[".scalapb.field"] = null;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".scalapb.field"] != null && message.hasOwnProperty(".scalapb.field"))
                        object[".scalapb.field"] = $root.scalapb.FieldOptions.toObject(message[".scalapb.field"], options);
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {string}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {string}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 * @property {scalapb.IOneofOptions|null} [".scalapb.oneof"] OneofOptions .scalapb.oneof
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * OneofOptions .scalapb.oneof.
                 * @member {scalapb.IOneofOptions|null|undefined} .scalapb.oneof
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype[".scalapb.oneof"] = null;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".scalapb.oneof"] != null && message.hasOwnProperty(".scalapb.oneof"))
                        $root.scalapb.OneofOptions.encode(message[".scalapb.oneof"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1020:
                            message[".scalapb.oneof"] = $root.scalapb.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".scalapb.oneof"] != null && message.hasOwnProperty(".scalapb.oneof")) {
                        var error = $root.scalapb.OneofOptions.verify(message[".scalapb.oneof"]);
                        if (error)
                            return ".scalapb.oneof." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".scalapb.oneof"] != null) {
                        if (typeof object[".scalapb.oneof"] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions..scalapb.oneof: object expected");
                        message[".scalapb.oneof"] = $root.scalapb.OneofOptions.fromObject(object[".scalapb.oneof"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object[".scalapb.oneof"] = null;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".scalapb.oneof"] != null && message.hasOwnProperty(".scalapb.oneof"))
                        object[".scalapb.oneof"] = $root.scalapb.OneofOptions.toObject(message[".scalapb.oneof"], options);
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 * @property {scalapb.IEnumOptions|null} [".scalapb.enumOptions"] EnumOptions .scalapb.enumOptions
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * EnumOptions .scalapb.enumOptions.
                 * @member {scalapb.IEnumOptions|null|undefined} .scalapb.enumOptions
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".scalapb.enumOptions"] = null;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".scalapb.enumOptions"] != null && message.hasOwnProperty(".scalapb.enumOptions"))
                        $root.scalapb.EnumOptions.encode(message[".scalapb.enumOptions"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.allowAlias = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1020:
                            message[".scalapb.enumOptions"] = $root.scalapb.EnumOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".scalapb.enumOptions"] != null && message.hasOwnProperty(".scalapb.enumOptions")) {
                        var error = $root.scalapb.EnumOptions.verify(message[".scalapb.enumOptions"]);
                        if (error)
                            return ".scalapb.enumOptions." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".scalapb.enumOptions"] != null) {
                        if (typeof object[".scalapb.enumOptions"] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions..scalapb.enumOptions: object expected");
                        message[".scalapb.enumOptions"] = $root.scalapb.EnumOptions.fromObject(object[".scalapb.enumOptions"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                        object[".scalapb.enumOptions"] = null;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".scalapb.enumOptions"] != null && message.hasOwnProperty(".scalapb.enumOptions"))
                        object[".scalapb.enumOptions"] = $root.scalapb.EnumOptions.toObject(message[".scalapb.enumOptions"], options);
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 * @property {scalapb.IEnumValueOptions|null} [".scalapb.enumValue"] EnumValueOptions .scalapb.enumValue
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * EnumValueOptions .scalapb.enumValue.
                 * @member {scalapb.IEnumValueOptions|null|undefined} .scalapb.enumValue
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype[".scalapb.enumValue"] = null;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".scalapb.enumValue"] != null && message.hasOwnProperty(".scalapb.enumValue"))
                        $root.scalapb.EnumValueOptions.encode(message[".scalapb.enumValue"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1020:
                            message[".scalapb.enumValue"] = $root.scalapb.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".scalapb.enumValue"] != null && message.hasOwnProperty(".scalapb.enumValue")) {
                        var error = $root.scalapb.EnumValueOptions.verify(message[".scalapb.enumValue"]);
                        if (error)
                            return ".scalapb.enumValue." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".scalapb.enumValue"] != null) {
                        if (typeof object[".scalapb.enumValue"] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions..scalapb.enumValue: object expected");
                        message[".scalapb.enumValue"] = $root.scalapb.EnumValueOptions.fromObject(object[".scalapb.enumValue"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".scalapb.enumValue"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".scalapb.enumValue"] != null && message.hasOwnProperty(".scalapb.enumValue"))
                        object[".scalapb.enumValue"] = $root.scalapb.EnumValueOptions.toObject(message[".scalapb.enumValue"], options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 34:
                            message.idempotencyLevel = reader.int32();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {string}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifierValue = reader.string();
                            break;
                        case 4:
                            message.positiveIntValue = reader.uint64();
                            break;
                        case 5:
                            message.negativeIntValue = reader.int64();
                            break;
                        case 6:
                            message.doubleValue = reader.double();
                            break;
                        case 7:
                            message.stringValue = reader.bytes();
                            break;
                        case 8:
                            message.aggregateValue = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.namePart = reader.string();
                                break;
                            case 2:
                                message.isExtension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            case 3:
                                message.leadingComments = reader.string();
                                break;
                            case 4:
                                message.trailingComments = reader.string();
                                break;
                            case 6:
                                if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                    message.leadingDetachedComments = [];
                                message.leadingDetachedComments.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                message.sourceFile = reader.string();
                                break;
                            case 3:
                                message.begin = reader.int32();
                                break;
                            case 4:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            return protobuf;
        })();
    
        return google;
    })();

    return $root;
});
